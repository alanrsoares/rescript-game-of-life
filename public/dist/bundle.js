(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[Object.keys(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = {exports: {}}).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, {get: all[name], enumerable: true});
  };
  var __reExport = (target, module, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
    }
    return target;
  };
  var __toModule = (module) => {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? {get: () => module.default, enumerable: true} : {value: module, enumerable: true})), module);
  };

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);
          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var _assign = require_object_assign();
          var ReactVersion = "17.0.2";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          exports.StrictMode = 60108;
          exports.Profiler = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          exports.Suspense = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            exports.StrictMode = symbolFor("react.strict_mode");
            exports.Profiler = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            exports.Suspense = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: 0
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var IsSomeRendererActing = {
            current: false
          };
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
            IsSomeRendererActing,
            assign: _assign
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          }
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
              {
                throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          _assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case exports.Profiler:
                return "Profiler";
              case exports.StrictMode:
                return "StrictMode";
              case exports.Suspense:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (!!(element === null || element === void 0)) {
              {
                throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
              }
            }
            var propName;
            var props = _assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (Array.isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = "" + children;
                {
                  {
                    throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                  }
                }
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              {
                throw Error("React.Children.only expected to receive a single React element child.");
              }
            }
            return children;
          }
          function createContext(defaultValue, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null;
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                  error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
                }
              }
            }
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
                _calculateChangedBits: context._calculateChangedBits
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
              thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                  var defaultExport = moduleObject.default;
                  {
                    if (defaultExport === void 0) {
                      error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = defaultExport;
                }
              }, function(error2) {
                if (payload._status === Pending) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
            }
            if (payload._status === Resolved) {
              return payload._result;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: -1,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (render.displayName == null) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (type.displayName == null) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (!(dispatcher !== null)) {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context, unstable_observedBits) {
            var dispatcher = resolveDispatcher();
            {
              if (unstable_observedBits !== void 0) {
                error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
              }
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context, unstable_observedBits);
          }
          function useState(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case exports.Suspense:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentName(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (Array.isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentName(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (Array.isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === exports.Fragment) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          {
            try {
              var frozenObject = Object.freeze({});
              new Map([[frozenObject, null]]);
              new Set([frozenObject]);
            } catch (e) {
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.PureComponent = PureComponent;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.useCallback = useCallback;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useEffect = useEffect;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo;
          exports.useReducer = useReducer;
          exports.useRef = useRef;
          exports.useState = useState;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          if (typeof window === "undefined" || typeof MessageChannel !== "function") {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e) {
                  setTimeout(_flushCallback, 0);
                  throw e;
                }
              }
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            exports.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame2 = window.requestAnimationFrame;
              var cancelAnimationFrame2 = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports.unstable_shouldYield = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last = heap.pop();
              if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node, i) {
            var index = i;
            while (true) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (parent !== void 0 && compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            while (index < length) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (left !== void 0 && compare(left, node) < 0) {
                if (right !== void 0 && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (right !== void 0 && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports.__interactionsRef = null;
          exports.__subscriberRef = null;
          {
            exports.__interactionsRef = {
              current: new Set()
            };
            exports.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = new Set();
            try {
              return callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
            }
          }
          function unstable_getCurrent() {
            {
              return exports.__interactionsRef.current;
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name,
              timestamp
            };
            var prevInteractions = exports.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports.__interactionsRef.current = interactions;
            var subscriber = exports.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports.__interactionsRef.current;
            var subscriber = exports.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = wrappedInteractions;
              subscriber = exports.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            };
            return wrapped;
          }
          var subscribers = null;
          {
            subscribers = new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped
                };
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports.__subscriberRef.current = null;
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          exports.unstable_clear = unstable_clear;
          exports.unstable_getCurrent = unstable_getCurrent;
          exports.unstable_getThreadID = unstable_getThreadID;
          exports.unstable_subscribe = unstable_subscribe;
          exports.unstable_trace = unstable_trace;
          exports.unstable_unsubscribe = unstable_unsubscribe;
          exports.unstable_wrap = unstable_wrap;
        })();
      }
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    "node_modules/scheduler/tracing.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_tracing_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React = require_react();
          var _assign = require_object_assign();
          var Scheduler = require_scheduler();
          var tracing = require_tracing();
          var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          if (!React) {
            {
              throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var FundamentalComponent = 20;
          var ScopeComponent = 21;
          var Block = 22;
          var OffscreenComponent = 23;
          var LegacyHiddenComponent = 24;
          var enableProfilerTimer = true;
          var enableFundamentalAPI = false;
          var enableNewReconciler = false;
          var warnAboutStringRefs = false;
          var allNativeEvents = new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var ROOT_ATTRIBUTE_NAME = "data-reactroot";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (isOpaqueHydratingObject(expected)) {
                return expected;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case Block:
                return describeFunctionComponentFrame(fiber.type._render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentName(owner.type);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function getIsRendering() {
            {
              return isRendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "object":
              case "string":
              case "undefined":
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = _assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  {
                    throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                  }
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          function flattenChildren(children) {
            var content = "";
            React.Children.forEach(children, function(child) {
              if (child == null) {
                return;
              }
              content += child;
            });
            return content;
          }
          function validateProps(element, props) {
            {
              if (typeof props.children === "object" && props.children !== null) {
                React.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (typeof child.type !== "string") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Only strings and numbers are supported as <option> children.");
                  }
                });
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          function getHostProps$1(element, props) {
            var hostProps = _assign({
              children: void 0
            }, props);
            var content = flattenChildren(props.children);
            if (content) {
              hostProps.children = content;
            }
            return hostProps;
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var isArray2 = Array.isArray(props[propName]);
                if (props.multiple && !isArray2) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && isArray2) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$2(element, props) {
            return _assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$3(element, props) {
            var node = element;
            if (!(props.dangerouslySetInnerHTML == null)) {
              {
                throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              }
            }
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (!(defaultValue == null)) {
                    {
                      throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                    }
                  }
                  if (Array.isArray(children)) {
                    if (!(children.length <= 1)) {
                      {
                        throw Error("<textarea> can only have at most one child.");
                      }
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          var Namespaces = {
            html: HTML_NAMESPACE,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE
          };
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === Namespaces.svg) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = _assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                }
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (!(props.children == null)) {
                {
                  throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
              }
              if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
                {
                  throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                }
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (!(props.style == null || typeof props.style === "object")) {
              {
                throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var _hasOwnProperty = Object.prototype.hasOwnProperty;
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var IS_REPLAYED = 1 << 4;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (!(typeof restoreImpl === "function")) {
              {
                throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var discreteUpdatesImpl = function(fn, a, b, c, d) {
            return fn(a, b, c, d);
          };
          var flushDiscreteUpdatesImpl = function() {
          };
          var batchedEventUpdatesImpl = batchedUpdatesImpl;
          var isInsideEventHandler = false;
          var isBatchingEventUpdates = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushDiscreteUpdatesImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, bookkeeping) {
            if (isInsideEventHandler) {
              return fn(bookkeeping);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, bookkeeping);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function batchedEventUpdates(fn, a, b) {
            if (isBatchingEventUpdates) {
              return fn(a, b);
            }
            isBatchingEventUpdates = true;
            try {
              return batchedEventUpdatesImpl(fn, a, b);
            } finally {
              isBatchingEventUpdates = false;
              finishEventHandler();
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var prevIsInsideEventHandler = isInsideEventHandler;
            isInsideEventHandler = true;
            try {
              return discreteUpdatesImpl(fn, a, b, c, d);
            } finally {
              isInsideEventHandler = prevIsInsideEventHandler;
              if (!isInsideEventHandler) {
                finishEventHandler();
              }
            }
          }
          function flushDiscreteUpdatesIfNeeded(timeStamp) {
            {
              if (!isInsideEventHandler) {
                flushDiscreteUpdatesImpl();
              }
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            discreteUpdatesImpl = _discreteUpdatesImpl;
            flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
            batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (!(!listener || typeof listener === "function")) {
              {
                throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
              }
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (!(typeof document !== "undefined")) {
                  {
                    throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                  }
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              {
                {
                  throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var PlacementAndUpdate = 6;
          var Deletion = 8;
          var ContentReset = 16;
          var Callback = 32;
          var DidCapture = 64;
          var Ref = 128;
          var Snapshot = 256;
          var Passive = 512;
          var PassiveUnmountPendingDev = 8192;
          var Hydrating = 1024;
          var HydratingAndUpdate = 1028;
          var LifecycleEffectMask = 932;
          var HostEffectMask = 2047;
          var Incomplete = 2048;
          var ShouldCapture = 4096;
          var ForceUpdateForLegacySuspense = 16384;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (!(nearestMounted !== null)) {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    {
                      throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
              }
              if (!(a.alternate === b)) {
                {
                  throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (!(a.tag === HostRoot)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText) {
                return node;
              } else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                return node;
              } else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function doesFiberContain(parentFiber, childFiber) {
            var node = childFiber;
            var parentFiberAlternate = parentFiber.alternate;
            while (node !== null) {
              if (node === parentFiber || node === parentFiberAlternate) {
                return true;
              }
              node = node.return;
            }
            return false;
          }
          var attemptUserBlockingHydration;
          function setAttemptUserBlockingHydration(fn) {
            attemptUserBlockingHydration = fn;
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = new Map();
          var queuedPointerCaptures = new Map();
          var queuedExplicitHydrationTargets = [];
          function hasQueuedDiscreteEvents() {
            return queuedDiscreteEvents.length > 0;
          }
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isReplayableDiscreteEvent(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags: eventSystemFlags | IS_REPLAYED,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            queuedDiscreteEvents.push(queuedEvent);
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                      Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                        attemptHydrationAtCurrentPriority(nearestMounted);
                      });
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            while (queuedDiscreteEvents.length > 0) {
              var nextDiscreteEvent = queuedDiscreteEvents[0];
              if (nextDiscreteEvent.blockedOn !== null) {
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) {
                  attemptUserBlockingHydration(_fiber4);
                }
                break;
              }
              var targetContainers = nextDiscreteEvent.targetContainers;
              while (targetContainers.length > 0) {
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                  nextDiscreteEvent.blockedOn = nextBlockedOn;
                  break;
                }
                targetContainers.shift();
              }
              if (nextDiscreteEvent.blockedOn === null) {
                queuedDiscreteEvents.shift();
              }
            }
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var DiscreteEvent = 0;
          var UserBlockingEvent = 1;
          var ContinuousEvent = 2;
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = new Map();
          var eventPriorities = new Map();
          var discreteEventPairsForSimpleEventPlugin = [
            "cancel",
            "cancel",
            "click",
            "click",
            "close",
            "close",
            "contextmenu",
            "contextMenu",
            "copy",
            "copy",
            "cut",
            "cut",
            "auxclick",
            "auxClick",
            "dblclick",
            "doubleClick",
            "dragend",
            "dragEnd",
            "dragstart",
            "dragStart",
            "drop",
            "drop",
            "focusin",
            "focus",
            "focusout",
            "blur",
            "input",
            "input",
            "invalid",
            "invalid",
            "keydown",
            "keyDown",
            "keypress",
            "keyPress",
            "keyup",
            "keyUp",
            "mousedown",
            "mouseDown",
            "mouseup",
            "mouseUp",
            "paste",
            "paste",
            "pause",
            "pause",
            "play",
            "play",
            "pointercancel",
            "pointerCancel",
            "pointerdown",
            "pointerDown",
            "pointerup",
            "pointerUp",
            "ratechange",
            "rateChange",
            "reset",
            "reset",
            "seeked",
            "seeked",
            "submit",
            "submit",
            "touchcancel",
            "touchCancel",
            "touchend",
            "touchEnd",
            "touchstart",
            "touchStart",
            "volumechange",
            "volumeChange"
          ];
          var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
          var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
          var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
          function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i += 2) {
              var topEvent = eventTypes[i];
              var event = eventTypes[i + 1];
              var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
              var reactName = "on" + capitalizedEvent;
              eventPriorities.set(topEvent, priority);
              topLevelEventsToReactNames.set(topEvent, reactName);
              registerTwoPhaseEvent(reactName, [topEvent]);
            }
          }
          function setEventPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i++) {
              eventPriorities.set(eventTypes[i], priority);
            }
          }
          function getEventPriorityForPluginSystem(domEventName) {
            var priority = eventPriorities.get(domEventName);
            return priority === void 0 ? ContinuousEvent : priority;
          }
          function registerSimpleEvents() {
            registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
            registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
            registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
            setEventPriorities(otherDiscreteEvents, DiscreteEvent);
          }
          var Scheduler_now = Scheduler.unstable_now;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var ImmediatePriority = 99;
          var UserBlockingPriority = 98;
          var NormalPriority = 97;
          var LowPriority = 96;
          var IdlePriority = 95;
          var NoPriority = 90;
          var initialTimeMs = Scheduler_now();
          var SyncLanePriority = 15;
          var SyncBatchedLanePriority = 14;
          var InputDiscreteHydrationLanePriority = 13;
          var InputDiscreteLanePriority = 12;
          var InputContinuousHydrationLanePriority = 11;
          var InputContinuousLanePriority = 10;
          var DefaultHydrationLanePriority = 9;
          var DefaultLanePriority = 8;
          var TransitionHydrationPriority = 7;
          var TransitionPriority = 6;
          var RetryLanePriority = 5;
          var SelectiveHydrationLanePriority = 4;
          var IdleHydrationLanePriority = 3;
          var IdleLanePriority = 2;
          var OffscreenLanePriority = 1;
          var NoLanePriority = 0;
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var SyncBatchedLane = 2;
          var InputDiscreteHydrationLane = 4;
          var InputDiscreteLanes = 24;
          var InputContinuousHydrationLane = 32;
          var InputContinuousLanes = 192;
          var DefaultHydrationLane = 256;
          var DefaultLanes = 3584;
          var TransitionHydrationLane = 4096;
          var TransitionLanes = 4186112;
          var RetryLanes = 62914560;
          var SomeRetryLane = 33554432;
          var SelectiveHydrationLane = 67108864;
          var NonIdleLanes = 134217727;
          var IdleHydrationLane = 134217728;
          var IdleLanes = 805306368;
          var OffscreenLane = 1073741824;
          var NoTimestamp = -1;
          function setCurrentUpdateLanePriority(newLanePriority) {
          }
          var return_highestLanePriority = DefaultLanePriority;
          function getHighestPriorityLanes(lanes) {
            if ((SyncLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncLanePriority;
              return SyncLane;
            }
            if ((SyncBatchedLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncBatchedLanePriority;
              return SyncBatchedLane;
            }
            if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
              return_highestLanePriority = InputDiscreteHydrationLanePriority;
              return InputDiscreteHydrationLane;
            }
            var inputDiscreteLanes = InputDiscreteLanes & lanes;
            if (inputDiscreteLanes !== NoLanes) {
              return_highestLanePriority = InputDiscreteLanePriority;
              return inputDiscreteLanes;
            }
            if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
              return_highestLanePriority = InputContinuousHydrationLanePriority;
              return InputContinuousHydrationLane;
            }
            var inputContinuousLanes = InputContinuousLanes & lanes;
            if (inputContinuousLanes !== NoLanes) {
              return_highestLanePriority = InputContinuousLanePriority;
              return inputContinuousLanes;
            }
            if ((lanes & DefaultHydrationLane) !== NoLanes) {
              return_highestLanePriority = DefaultHydrationLanePriority;
              return DefaultHydrationLane;
            }
            var defaultLanes = DefaultLanes & lanes;
            if (defaultLanes !== NoLanes) {
              return_highestLanePriority = DefaultLanePriority;
              return defaultLanes;
            }
            if ((lanes & TransitionHydrationLane) !== NoLanes) {
              return_highestLanePriority = TransitionHydrationPriority;
              return TransitionHydrationLane;
            }
            var transitionLanes = TransitionLanes & lanes;
            if (transitionLanes !== NoLanes) {
              return_highestLanePriority = TransitionPriority;
              return transitionLanes;
            }
            var retryLanes = RetryLanes & lanes;
            if (retryLanes !== NoLanes) {
              return_highestLanePriority = RetryLanePriority;
              return retryLanes;
            }
            if (lanes & SelectiveHydrationLane) {
              return_highestLanePriority = SelectiveHydrationLanePriority;
              return SelectiveHydrationLane;
            }
            if ((lanes & IdleHydrationLane) !== NoLanes) {
              return_highestLanePriority = IdleHydrationLanePriority;
              return IdleHydrationLane;
            }
            var idleLanes = IdleLanes & lanes;
            if (idleLanes !== NoLanes) {
              return_highestLanePriority = IdleLanePriority;
              return idleLanes;
            }
            if ((OffscreenLane & lanes) !== NoLanes) {
              return_highestLanePriority = OffscreenLanePriority;
              return OffscreenLane;
            }
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return_highestLanePriority = DefaultLanePriority;
            return lanes;
          }
          function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
            switch (schedulerPriorityLevel) {
              case ImmediatePriority:
                return SyncLanePriority;
              case UserBlockingPriority:
                return InputContinuousLanePriority;
              case NormalPriority:
              case LowPriority:
                return DefaultLanePriority;
              case IdlePriority:
                return IdleLanePriority;
              default:
                return NoLanePriority;
            }
          }
          function lanePriorityToSchedulerPriority(lanePriority) {
            switch (lanePriority) {
              case SyncLanePriority:
              case SyncBatchedLanePriority:
                return ImmediatePriority;
              case InputDiscreteHydrationLanePriority:
              case InputDiscreteLanePriority:
              case InputContinuousHydrationLanePriority:
              case InputContinuousLanePriority:
                return UserBlockingPriority;
              case DefaultHydrationLanePriority:
              case DefaultLanePriority:
              case TransitionHydrationPriority:
              case TransitionPriority:
              case SelectiveHydrationLanePriority:
              case RetryLanePriority:
                return NormalPriority;
              case IdleHydrationLanePriority:
              case IdleLanePriority:
              case OffscreenLanePriority:
                return IdlePriority;
              case NoLanePriority:
                return NoPriority;
              default: {
                {
                  throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                }
              }
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return_highestLanePriority = NoLanePriority;
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var nextLanePriority = NoLanePriority;
            var expiredLanes = root2.expiredLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            if (expiredLanes !== NoLanes) {
              nextLanes = expiredLanes;
              nextLanePriority = return_highestLanePriority = SyncLanePriority;
            } else {
              var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
              if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                  if (nonIdlePingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              } else {
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(unblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              getHighestPriorityLanes(wipLanes);
              var wipLanePriority = return_highestLanePriority;
              if (nextLanePriority <= wipLanePriority) {
                return wipLanes;
              } else {
                return_highestLanePriority = nextLanePriority;
              }
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            getHighestPriorityLanes(lane);
            var priority = return_highestLanePriority;
            if (priority >= InputContinuousLanePriority) {
              return currentTime + 250;
            } else if (priority >= TransitionPriority) {
              return currentTime + 5e3;
            } else {
              return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function returnNextLanesPriority() {
            return return_highestLanePriority;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function findUpdateLane(lanePriority, wipLanes) {
            switch (lanePriority) {
              case NoLanePriority:
                break;
              case SyncLanePriority:
                return SyncLane;
              case SyncBatchedLanePriority:
                return SyncBatchedLane;
              case InputDiscreteLanePriority: {
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) {
                  return findUpdateLane(InputContinuousLanePriority, wipLanes);
                }
                return _lane;
              }
              case InputContinuousLanePriority: {
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) {
                  return findUpdateLane(DefaultLanePriority, wipLanes);
                }
                return _lane2;
              }
              case DefaultLanePriority: {
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                  if (_lane3 === NoLane) {
                    _lane3 = pickArbitraryLane(DefaultLanes);
                  }
                }
                return _lane3;
              }
              case TransitionPriority:
              case RetryLanePriority:
                break;
              case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) {
                  lane = pickArbitraryLane(IdleLanes);
                }
                return lane;
            }
            {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
          function findTransitionLane(wipLanes, pendingLanes) {
            var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(TransitionLanes);
              }
            }
            return lane;
          }
          function findRetryLane(wipLanes) {
            var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(RetryLanes);
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function getLowestPriorityLane(lanes) {
            var index2 = 31 - clz32(lanes);
            return index2 < 0 ? NoLanes : 1 << index2;
          }
          function getEqualOrHigherPriorityLanes(lanes) {
            return (getLowestPriorityLane(lanes) << 1) - 1;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            var higherPriorityLanes = updateLane - 1;
            root2.suspendedLanes &= higherPriorityLanes;
            root2.pingedLanes &= higherPriorityLanes;
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markDiscreteUpdatesExpired(root2) {
            root2.expiredLanes |= InputDiscreteLanes & root2.pendingLanes;
          }
          function hasDiscreteLanes(lanes) {
            return (lanes & InputDiscreteLanes) !== NoLanes;
          }
          function markRootMutableRead(root2, updateLane) {
            root2.mutableReadLanes |= updateLane & root2.pendingLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = 0;
            root2.pingedLanes = 0;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] |= entangledLanes;
              lanes &= ~lane;
            }
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(lanes) {
            if (lanes === 0) {
              return 32;
            }
            return 31 - (log(lanes) / LN2 | 0) | 0;
          }
          var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriorityForPluginSystem(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
              case ContinuousEvent:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
            }
            discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
          }
          function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            var allowReplay = true;
            {
              allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
            }
            if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }
            var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              if (allowReplay) {
                clearIfContinuousEvent(domEventName, nativeEvent);
              }
              return;
            }
            if (allowReplay) {
              if (isReplayableDiscreteEvent(domEventName)) {
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
              }
              if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                return;
              }
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
            return null;
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            _assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = _assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = _assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = _assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = _assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = _assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = _assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = _assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = _assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = _assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = _assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = _assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = _assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            {
              if (rootContainerElement[listeningMarker]) {
                return;
              }
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement, null);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement, null);
              });
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
            var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
            var target = rootContainerElement;
            if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
              target = rootContainerElement.ownerDocument;
            }
            if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
              if (domEventName !== "scroll") {
                return;
              }
              eventSystemFlags |= IS_NON_DELEGATED;
              target = targetElement;
            }
            var listenerSet = getEventListenerSet(target);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              if (isCapturePhaseListener) {
                eventSystemFlags |= IS_CAPTURE_PHASE;
              }
              addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedEventUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var HTML_NAMESPACE$1 = Namespaces.html;
          var warnedUnknownTags;
          var suppressHydrationWarning;
          var validatePropertiesInDevelopment;
          var warnForTextDifference;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeMarkupForTextOrAttribute;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
            normalizeMarkupForTextOrAttribute = function(markup) {
              var markupString = typeof markup === "string" ? markup : "" + markup;
              return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
            };
            warnForTextDifference = function(serverText, clientText) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
              var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
              if (normalizedServerText === normalizedClientText) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            };
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script></script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "option":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
                nextProp.toString();
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "data-reactroot":
                    break;
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForUnmatchedText(textNode, text) {
            {
              warnForTextDifference(textNode.nodeValue, text);
            }
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1;
          {
            SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          }
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function shouldAutoFocusHostComponent(type, props) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
            }
            return false;
          }
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            return shouldAutoFocusHostComponent(type, props);
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            if (shouldAutoFocusHostComponent(type, newProps)) {
              domElement.focus();
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps);
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              var body = container.body;
              if (body != null) {
                body.textContent = "";
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            return diffHydratedProperties(instance, type, props, parentNamespace);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
            {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotHydrateContainerInstance(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
          function didNotFindHydratableContainerInstance(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableContainerTextInstance(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              ;
          }
          var clientId = 0;
          function makeClientIdInDEV(warnOnAccessInDEV) {
            var id = "r:" + (clientId++).toString(36);
            return {
              toString: function() {
                warnOnAccessInDEV();
                return id;
              },
              valueOf: function() {
                warnOnAccessInDEV();
                return id;
              }
            };
          }
          function isOpaqueHydratingObject(value) {
            return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
          }
          function makeOpaqueHydratingObject(attemptToReadValue) {
            return {
              $$typeof: REACT_OPAQUE_ID_TYPE,
              toString: attemptToReadValue,
              valueOf: attemptToReadValue
            };
          }
          function preparePortalMount(portalInstance) {
            {
              listenToAllSupportedEvents(portalInstance);
            }
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            {
              {
                throw Error("getNodeFromInstance: Invalid argument.");
              }
            }
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (!(contextStackCursor.current === emptyContextObject)) {
                {
                  throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentName(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  {
                    throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                  }
                }
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return _assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                {
                  throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                {
                  throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              {
                {
                  throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          var LegacyRoot = 0;
          var BlockingRoot = 1;
          var ConcurrentRoot = 2;
          var rendererID = null;
          var injectedHook = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            return true;
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, priorityLevel) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  injectedHook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var fakeCallbackNode = {};
          var ImmediatePriority$1 = 99;
          var UserBlockingPriority$2 = 98;
          var NormalPriority$1 = 97;
          var LowPriority$1 = 96;
          var IdlePriority$1 = 95;
          var NoPriority$1 = 90;
          var shouldYield = Scheduler_shouldYield;
          var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
          };
          var syncQueue = null;
          var immediateQueueCallbackNode = null;
          var isFlushingSyncQueue = false;
          var initialTimeMs$1 = Scheduler_now$1();
          var now = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
            return Scheduler_now$1() - initialTimeMs$1;
          };
          function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
              case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
              case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
              case Scheduler_NormalPriority:
                return NormalPriority$1;
              case Scheduler_LowPriority:
                return LowPriority$1;
              case Scheduler_IdlePriority:
                return IdlePriority$1;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
              case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
              case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
              case NormalPriority$1:
                return Scheduler_NormalPriority;
              case LowPriority$1:
                return Scheduler_LowPriority;
              case IdlePriority$1:
                return Scheduler_IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function runWithPriority$1(reactPriorityLevel, fn) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_runWithPriority(priorityLevel, fn);
          }
          function scheduleCallback(reactPriorityLevel, callback, options2) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_scheduleCallback(priorityLevel, callback, options2);
          }
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
              immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
            } else {
              syncQueue.push(callback);
            }
            return fakeCallbackNode;
          }
          function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
              Scheduler_cancelCallback(callbackNode);
            }
          }
          function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
              var node = immediateQueueCallbackNode;
              immediateQueueCallbackNode = null;
              Scheduler_cancelCallback(node);
            }
            flushSyncCallbackQueueImpl();
          }
          function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              {
                try {
                  var _isSync2 = true;
                  var _queue = syncQueue;
                  runWithPriority$1(ImmediatePriority$1, function() {
                    for (; i < _queue.length; i++) {
                      var callback = _queue[i];
                      do {
                        callback = callback(_isSync2);
                      } while (callback !== null);
                    }
                  });
                  syncQueue = null;
                } catch (error2) {
                  if (syncQueue !== null) {
                    syncQueue = syncQueue.slice(i + 1);
                  }
                  Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                  throw error2;
                } finally {
                  isFlushingSyncQueue = false;
                }
              }
            }
          }
          var ReactVersion = "17.0.2";
          var NoMode = 0;
          var StrictMode = 1;
          var BlockingMode = 2;
          var ConcurrentMode = 4;
          var ProfileMode = 8;
          var DebugTracingMode = 16;
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = 0;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = new Map();
            var didWarnAboutLegacyContext = new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = _assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var MAX_SIGNED_31_BIT_INT = 1073741823;
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastContextWithAllBitsObserved = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, nextValue) {
            var context = providerFiber.type._context;
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            var context = providerFiber.type._context;
            {
              context._currentValue = currentValue;
            }
          }
          function calculateChangedBits(context, newValue, oldValue) {
            if (objectIs(oldValue, newValue)) {
              return 0;
            } else {
              var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
              {
                if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                  error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
                }
              }
              return changedBits | 0;
            }
          }
          function scheduleWorkOnParentPath(parent, renderLanes2) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              } else {
                break;
              }
              node = node.return;
            }
          }
          function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                    if (fiber.tag === ClassComponent) {
                      var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                      update.tag = ForceUpdate;
                      enqueueUpdate(fiber, update);
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleWorkOnParentPath(fiber.return, renderLanes2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
          function readContext(context, observedBits) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            if (lastContextWithAllBitsObserved === context)
              ;
            else if (observedBits === false || observedBits === 0)
              ;
            else {
              var resolvedObservedBits;
              if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
              } else {
                resolvedObservedBits = observedBits;
              }
              var contextItem = {
                context,
                observedBits: resolvedObservedBits,
                next: null
              };
              if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) {
                  {
                    throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                  }
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem,
                  responders: null
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return context._currentValue;
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return _assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (!(typeof callback === "function")) {
              {
                throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
              }
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var isArray = Array.isArray;
          var emptyRefsObject = new React.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = new Set();
            didWarnAboutUninitializedState = new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
            didWarnAboutDirectlyAssigningPropsToState = new Set();
            didWarnAboutUndefinedDerivedState = new Set();
            didWarnAboutContextTypeAndContextTypes = new Set();
            didWarnAboutInvalidateContextType = new Set();
            var didWarnOnInvalidCallback = new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentName(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                {
                  {
                    throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                  }
                }
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  reenableLogs();
                }
              }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentName(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  new ctor(props, context);
                } finally {
                  reenableLogs();
                }
              }
            }
            var instance = new ctor(props, context);
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentName(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentName(workInProgress2.type) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (!(typeof child._store === "object")) {
                {
                  throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              child._store.validated = true;
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          var isArray$1 = Array.isArray;
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentName(returnFiber.type) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (!(ownerFiber.tag === ClassComponent)) {
                    {
                      throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    }
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  {
                    throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = inst.refs;
                  if (refs === emptyRefsObject) {
                    refs = inst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (!(typeof mixedRef === "string")) {
                  {
                    throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                  }
                }
                if (!element._owner) {
                  {
                    throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                  }
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== "textarea") {
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
              childToDelete.nextEffect = null;
              childToDelete.flags = Deletion;
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags = Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags = Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              if (current2 !== null) {
                if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                      }
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (!(typeof iteratorFn === "function")) {
                {
                  throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (!(newChildren != null)) {
                {
                  throw Error("An iterable object provided no iterator.");
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  switch (child.tag) {
                    case Fragment: {
                      if (element.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element._source;
                          existing._debugOwner = element._owner;
                        }
                        return existing;
                      }
                      break;
                    }
                    case Block:
                    default: {
                      if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing3 = useFiber(child, element.props);
                        _existing3.ref = coerceRef(returnFiber, child, element);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element._source;
                          _existing3._debugOwner = element._owner;
                        }
                        return _existing3;
                      }
                      break;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              var isObject = typeof newChild === "object" && newChild !== null;
              if (isObject) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                }
              }
              if (typeof newChild === "string" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              if (isArray$1(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (isObject) {
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode;
                      if (instance.render._isMockFunction) {
                        break;
                      }
                    }
                  }
                  case Block:
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    {
                      {
                        throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (!(current2 === null || workInProgress2.child === current2.child)) {
              {
                throw Error("Resuming work not yet implemented.");
              }
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (!(c !== NO_CONTEXT)) {
              {
                throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            if (props.fallback === void 0) {
              return false;
            }
            if (props.unstable_avoidThisFallback !== true) {
              return true;
            }
            if (hasInvisibleParent) {
              return false;
            }
            return true;
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Layout = 2;
          var Passive$1 = 4;
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
          }
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                  break;
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            childToDelete.flags = Deletion;
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                return false;
              }
              default:
                return false;
            }
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            {
              if (shouldUpdate) {
                var returnFiber = hydrationParentFiber;
                if (returnFiber !== null) {
                  switch (returnFiber.tag) {
                    case HostRoot: {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }
                    case HostComponent: {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              {
                throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            var type = fiber.type;
            if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
              var nextInstance = nextHydratableInstance;
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
          }
          function getIsHydrating() {
            return isHydrating;
          }
          var workInProgressSources = [];
          var rendererSigil$1;
          {
            rendererSigil$1 = {};
          }
          function markSourceAsDirty(mutableSource) {
            workInProgressSources.push(mutableSource);
          }
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function getWorkInProgressVersion(mutableSource) {
            {
              return mutableSource._workInProgressVersionPrimary;
            }
          }
          function setWorkInProgressVersion(mutableSource, version) {
            {
              mutableSource._workInProgressVersionPrimary = version;
            }
            workInProgressSources.push(mutableSource);
          }
          function warnAboutMultipleRenderersDEV(mutableSource) {
            {
              {
                if (mutableSource._currentPrimaryRenderer == null) {
                  mutableSource._currentPrimaryRenderer = rendererSigil$1;
                } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                  error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
                }
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnAboutUseOpaqueIdentifier;
          {
            didWarnAboutUseOpaqueIdentifier = {};
            didWarnAboutMismatchedHooksForComponent = new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentName(currentlyRenderingFiber$1.type);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                  }
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
            }
            didScheduleRenderPhaseUpdate = false;
            if (!!didRenderTooFewHooks) {
              {
                throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
              }
            }
            return children;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.flags &= ~(Passive | Update);
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (!(nextCurrentHook !== null)) {
                {
                  throw Error("Rendered more hooks than during the previous render.");
                }
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update.action,
                      eagerReducer: update.eagerReducer,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.eagerReducer === reducer) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function readFromUnsubcribedMutableSource(root2, source, getSnapshot) {
            {
              warnAboutMultipleRenderersDEV(source);
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var isSafeToReadFromSource = false;
            var currentRenderVersion = getWorkInProgressVersion(source);
            if (currentRenderVersion !== null) {
              isSafeToReadFromSource = currentRenderVersion === version;
            } else {
              isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root2.mutableReadLanes);
              if (isSafeToReadFromSource) {
                setWorkInProgressVersion(source, version);
              }
            }
            if (isSafeToReadFromSource) {
              var snapshot = getSnapshot(source._source);
              {
                if (typeof snapshot === "function") {
                  error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              return snapshot;
            } else {
              markSourceAsDirty(source);
              {
                {
                  throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
                }
              }
            }
          }
          function useMutableSource(hook, source, getSnapshot, subscribe) {
            var root2 = getWorkInProgressRoot();
            if (!(root2 !== null)) {
              {
                throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var dispatcher = ReactCurrentDispatcher$1.current;
            var _dispatcher$useState = dispatcher.useState(function() {
              return readFromUnsubcribedMutableSource(root2, source, getSnapshot);
            }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
            var snapshot = currentSnapshot;
            var stateHook = workInProgressHook;
            var memoizedState = hook.memoizedState;
            var refs = memoizedState.refs;
            var prevGetSnapshot = refs.getSnapshot;
            var prevSource = memoizedState.source;
            var prevSubscribe = memoizedState.subscribe;
            var fiber = currentlyRenderingFiber$1;
            hook.memoizedState = {
              refs,
              source,
              subscribe
            };
            dispatcher.useEffect(function() {
              refs.getSnapshot = getSnapshot;
              refs.setSnapshot = setSnapshot;
              var maybeNewVersion = getVersion(source._source);
              if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                {
                  if (typeof maybeNewSnapshot === "function") {
                    error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                  }
                }
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                  setSnapshot(maybeNewSnapshot);
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                }
                markRootEntangled(root2, root2.mutableReadLanes);
              }
            }, [getSnapshot, source, subscribe]);
            dispatcher.useEffect(function() {
              var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                  latestSetSnapshot(latestGetSnapshot(source._source));
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                } catch (error2) {
                  latestSetSnapshot(function() {
                    throw error2;
                  });
                }
              };
              var unsubscribe = subscribe(source._source, handleChange);
              {
                if (typeof unsubscribe !== "function") {
                  error("Mutable source subscribe function must return an unsubscribe function.");
                }
              }
              return unsubscribe;
            }, [source, subscribe]);
            if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
              var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
              };
              newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
              stateHook.queue = newQueue;
              stateHook.baseQueue = null;
              snapshot = readFromUnsubcribedMutableSource(root2, source, getSnapshot);
              stateHook.memoizedState = stateHook.baseState = snapshot;
            }
            return snapshot;
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = {
              refs: {
                getSnapshot,
                setSnapshot: null
              },
              source,
              subscribe
            };
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            var hook = updateWorkInProgressHook();
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            hook.memoizedState = ref;
            return ref;
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function updateEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            return mountEffectImpl(Update, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function updateDeferredValue(value) {
            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function rerenderDeferredValue(value) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function startTransition(setPending, callback) {
            var priorityLevel = getCurrentPriorityLevel();
            {
              runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
                setPending(true);
              });
              runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;
                try {
                  setPending(false);
                  callback();
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition;
                }
              });
            }
          }
          function mountTransition() {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start = startTransition.bind(null, setPending);
            mountRef(start);
            return [start, isPending];
          }
          function updateTransition() {
            var _updateState2 = updateState(), isPending = _updateState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          function rerenderTransition() {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function warnOnOpaqueIdentifierAccessInDEV(fiber) {
            {
              var name = getComponentName(fiber.type) || "Unknown";
              if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
                error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                didWarnAboutUseOpaqueIdentifier[name] = true;
              }
            }
          }
          function mountOpaqueIdentifier() {
            var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
            if (getIsHydrating()) {
              var didUpgrade = false;
              var fiber = currentlyRenderingFiber$1;
              var readValue = function() {
                if (!didUpgrade) {
                  didUpgrade = true;
                  {
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                  }
                }
                {
                  {
                    throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                  }
                }
              };
              var id = makeOpaqueHydratingObject(readValue);
              var setId = mountState(id)[1];
              if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                  setId(makeId());
                }, void 0, null);
              }
              return id;
            } else {
              var _id = makeId();
              mountState(_id);
              return _id;
            }
          }
          function updateOpaqueIdentifier() {
            var id = updateState()[0];
            return id;
          }
          function rerenderOpaqueIdentifier() {
            var id = rerenderState()[0];
            return id;
          }
          function dispatchAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
            var alternate = fiber.alternate;
            if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
              didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            } else {
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.eagerReducer = lastRenderedReducer;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              {
                if (typeof jest !== "undefined") {
                  warnIfNotScopedWithMatchingAct(fiber);
                  warnIfNotCurrentlyActingUpdatesInDev(fiber);
                }
              }
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useOpaqueIdentifier: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var profilerStartTime = -1;
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
              }
            }
            var currentChild = current2.child;
            if (!includesSomeLane(updateLanes, renderLanes2)) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes2, updateLanes)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                {
                  markSpawnedWork(OffscreenLane);
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes
                };
                workInProgress2.memoizedState = _nextState;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          var updateLegacyHiddenComponent = updateOffscreenComponent;
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.render();
                  } finally {
                    reenableLogs();
                  }
                }
                setIsRendering(false);
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            var updateQueue = workInProgress2.updateQueue;
            if (!(current2 !== null && updateQueue !== null)) {
              {
                throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState !== null ? prevState.element : null;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var nextChildren = nextState.element;
            if (nextChildren === prevChildren) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var root2 = workInProgress2.stateNode;
            if (root2.hydrate && enterHydrationState(workInProgress2)) {
              {
                var mutableSourceEagerHydrationData = root2.mutableSourceEagerHydrationData;
                if (mutableSourceEagerHydrationData != null) {
                  for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                    var mutableSource = mutableSourceEagerHydrationData[i];
                    var version = mutableSourceEagerHydrationData[i + 1];
                    setWorkInProgressVersion(mutableSource, version);
                  }
                }
              }
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
              resetHydrationState();
            }
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component));
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes2);
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            {
              {
                throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
              }
            }
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              var getDerivedStateFromProps = Component.getDerivedStateFromProps;
              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
              }
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || workInProgress2._debugID || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              if (nextProps.fallback !== void 0) {
                tryToClaimNextHydratableInstance(workInProgress2);
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.lanes = SomeRetryLane;
                {
                  markSpawnedWork(SomeRetryLane);
                }
                return _fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                if (showFallback) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _nextPrimaryChildren2 = nextProps.children;
                  var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                  var _primaryChildFragment3 = workInProgress2.child;
                  var prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                  _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment;
                } else {
                  var _nextPrimaryChildren3 = nextProps.children;
                  var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment4;
                }
              } else {
                if (showFallback) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _nextPrimaryChildren4 = nextProps.children;
                  var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                  var _primaryChildFragment5 = workInProgress2.child;
                  var _prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                  _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren5 = nextProps.children;
                  var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment6;
                }
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              currentFallbackChildFragment.nextEffect = null;
              currentFallbackChildFragment.flags = Deletion;
              workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              var progressedLastEffect = primaryChildFragment.lastEffect;
              if (progressedLastEffect !== null) {
                workInProgress2.firstEffect = primaryChildFragment.firstEffect;
                workInProgress2.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
              } else {
                workInProgress2.firstEffect = workInProgress2.lastEffect = null;
              }
            } else {
              primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function scheduleWorkOnFiber(fiber, renderLanes2) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleWorkOnParentPath(fiber.return, renderLanes2);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleWorkOnFiber(node, renderLanes2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleWorkOnFiber(node, renderLanes2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isArray2 = Array.isArray(childSlot);
              var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
              if (isArray2 || isIterable) {
                var type = isArray2 ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (Array.isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode,
                lastEffect: lastEffectBeforeRendering
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
              renderState.lastEffect = lastEffectBeforeRendering;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, newValue);
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              var changedBits = calculateChangedBits(context, newValue, oldValue);
              if (changedBits === 0) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context, newProps.unstable_observedBits);
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              return null;
            } else {
              cloneChildFibers(current2, workInProgress2);
              return workInProgress2.child;
            }
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = current2;
                returnFiber.lastEffect = current2;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current2;
              }
              current2.nextEffect = null;
              current2.flags = Deletion;
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            var updateLanes = workInProgress2.lanes;
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else if (!includesSomeLane(renderLanes2, updateLanes)) {
                didReceiveUpdate = false;
                switch (workInProgress2.tag) {
                  case HostRoot:
                    pushHostRootContext(workInProgress2);
                    resetHydrationState();
                    break;
                  case HostComponent:
                    pushHostContext(workInProgress2);
                    break;
                  case ClassComponent: {
                    var Component = workInProgress2.type;
                    if (isContextProvider(Component)) {
                      pushContextProvider(workInProgress2);
                    }
                    break;
                  }
                  case HostPortal:
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                    break;
                  case ContextProvider: {
                    var newValue = workInProgress2.memoizedProps.value;
                    pushProvider(workInProgress2, newValue);
                    break;
                  }
                  case Profiler:
                    {
                      var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                      if (hasChildWork) {
                        workInProgress2.flags |= Update;
                      }
                      var stateNode = workInProgress2.stateNode;
                      stateNode.effectDuration = 0;
                      stateNode.passiveEffectDuration = 0;
                    }
                    break;
                  case SuspenseComponent: {
                    var state = workInProgress2.memoizedState;
                    if (state !== null) {
                      var primaryChildFragment = workInProgress2.child;
                      var primaryChildLanes = primaryChildFragment.childLanes;
                      if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                        return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                      } else {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                        if (child !== null) {
                          return child.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }
                    break;
                  }
                  case SuspenseListComponent: {
                    var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                    var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                      }
                      workInProgress2.flags |= DidCapture;
                    }
                    var renderState = workInProgress2.memoizedState;
                    if (renderState !== null) {
                      renderState.rendering = null;
                      renderState.tail = null;
                      renderState.lastEffect = null;
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                    if (_hasChildWork) {
                      break;
                    } else {
                      return null;
                    }
                  }
                  case OffscreenComponent:
                  case LegacyHiddenComponent: {
                    workInProgress2.lanes = NoLanes;
                    return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                  }
                }
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else {
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
              }
              case FunctionComponent: {
                var _Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component3 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
              case LegacyHiddenComponent: {
                return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress2.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else if (!fiberRoot.hydrate) {
                    workInProgress2.flags |= Snapshot;
                  }
                }
                updateHostContainer(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2);
                  }
                } else {
                  var prevState = current2.memoizedState;
                  prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThennables = suspended.updateQueue;
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables;
                            workInProgress2.flags |= Update;
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null;
                          }
                          workInProgress2.lastEffect = renderState.lastEffect;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThennables = _suspended.updateQueue;
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.lastEffect = workInProgress2.lastEffect;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                return null;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block:
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                if (current2 !== null) {
                  var _nextState = workInProgress2.memoizedState;
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  var nextIsHidden = _nextState !== null;
                  if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function unwindWork(workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if (!((_flags & DidCapture) === NoFlags)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                popProvider(interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          function createCapturedValue(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentName(source.type) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                var errorBoundaryName = getComponentName(boundary.type);
                if (errorBoundaryName) {
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                } else {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                  logCapturedError(fiber, errorInfo);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                    }
                  }
                }
              };
            } else {
              update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              wakeable.then(ping, ping);
            }
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              if ((sourceFiber.mode & BlockingMode) === NoMode) {
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                  sourceFiber.updateQueue = currentSource.updateQueue;
                  sourceFiber.memoizedState = currentSource.memoizedState;
                  sourceFiber.lanes = currentSource.lanes;
                } else {
                  sourceFiber.updateQueue = null;
                  sourceFiber.memoizedState = null;
                }
              }
              var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
              var _workInProgress = returnFiber;
              do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                  var wakeables = _workInProgress.updateQueue;
                  if (wakeables === null) {
                    var updateQueue = new Set();
                    updateQueue.add(wakeable);
                    _workInProgress.updateQueue = updateQueue;
                  } else {
                    wakeables.add(wakeable);
                  }
                  if ((_workInProgress.mode & BlockingMode) === NoMode) {
                    _workInProgress.flags |= DidCapture;
                    sourceFiber.flags |= ForceUpdateForLegacySuspense;
                    sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                    if (sourceFiber.tag === ClassComponent) {
                      var currentSourceFiber = sourceFiber.alternate;
                      if (currentSourceFiber === null) {
                        sourceFiber.tag = IncompleteClassComponent;
                      } else {
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update);
                      }
                    }
                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                    return;
                  }
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  _workInProgress.flags |= ShouldCapture;
                  _workInProgress.lanes = rootRenderLanes;
                  return;
                }
                _workInProgress = _workInProgress.return;
              } while (_workInProgress !== null);
              value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
            }
            renderDidError();
            value = createCapturedValue(value, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update2);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
          }
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            {
              instance.componentWillUnmount();
            }
          };
          function safelyCallComponentWillUnmount(current2, instance) {
            {
              invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
              if (hasCaughtError()) {
                var unmountError = clearCaughtError();
                captureCommitPhaseError(current2, unmountError);
              }
            }
          }
          function safelyDetachRef(current2) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                {
                  invokeGuardedCallback(null, ref, null, null);
                  if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current2, refError);
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, destroy) {
            {
              invokeGuardedCallback(null, destroy, null);
              if (hasCaughtError()) {
                var error2 = clearCaughtError();
                captureCommitPhaseError(current2, error2);
              }
            }
          }
          function commitBeforeMutationLifeCycles(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                return;
              }
              case ClassComponent: {
                if (finishedWork.flags & Snapshot) {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                }
                return;
              }
              case HostRoot: {
                {
                  if (finishedWork.flags & Snapshot) {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                }
                return;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitHookEffectListUnmount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    destroy();
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var create = effect.create;
                  effect.destroy = create();
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function schedulePassiveEffects(finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                  enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                  enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
              } while (effect !== firstEffect);
            }
          }
          function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                schedulePassiveEffects(finishedWork);
                return;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                return;
              }
              case HostText: {
                return;
              }
              case HostPortal: {
                return;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  if (typeof onRender === "function") {
                    {
                      onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case FundamentalComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } else if (node.tag === HostText) {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                ref(instanceToUse);
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function commitDetachRef(current2) {
            var currentRef = current2.ref;
            if (currentRef !== null) {
              if (typeof currentRef === "function") {
                currentRef(null);
              } else {
                currentRef.current = null;
              }
            }
          }
          function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
            onCommitUnmount(current2);
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                var updateQueue = current2.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                      if (destroy !== void 0) {
                        if ((tag & Passive$1) !== NoFlags$1) {
                          enqueuePendingPassiveHookEffectUnmount(current2, effect);
                        } else {
                          {
                            safelyCallDestroy(current2, destroy);
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
                return;
              }
              case ClassComponent: {
                safelyDetachRef(current2);
                var instance = current2.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current2, instance);
                }
                return;
              }
              case HostComponent: {
                safelyDetachRef(current2);
                return;
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current2);
                }
                return;
              }
              case FundamentalComponent: {
                return;
              }
              case DehydratedFragment: {
                return;
              }
              case ScopeComponent: {
                return;
              }
            }
          }
          function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
            var node = root2;
            while (true) {
              commitUnmount(finishedRoot, node);
              if (node.child !== null && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === root2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === root2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function detachFiberMutation(fiber) {
            fiber.alternate = null;
            fiber.child = null;
            fiber.dependencies = null;
            fiber.firstEffect = null;
            fiber.lastEffect = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.return = null;
            fiber.updateQueue = null;
            {
              fiber._debugOwner = null;
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            var parent;
            var isContainer;
            var parentStateNode = parentFiber.stateNode;
            switch (parentFiber.tag) {
              case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
              case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case FundamentalComponent:
              default: {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            if (isContainer) {
              insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
            } else {
              insertOrAppendPlacementNode(finishedWork, before, parent);
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
            var node = current2;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
              if (!currentParentIsValid) {
                var parent = node.return;
                findParent:
                  while (true) {
                    if (!(parent !== null)) {
                      {
                        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    var parentStateNode = parent.stateNode;
                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }
                    parent = parent.return;
                  }
                currentParentIsValid = true;
              }
              if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node.stateNode);
                } else {
                  removeChild(currentParent, node.stateNode);
                }
              } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                  currentParent = node.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else {
                commitUnmount(finishedRoot, node);
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              }
              if (node === current2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === current2) {
                  return;
                }
                node = node.return;
                if (node.tag === HostPortal) {
                  currentParentIsValid = false;
                }
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
            {
              unmountHostComponents(finishedRoot, current2);
            }
            var alternate = current2.alternate;
            detachFiberMutation(current2);
            if (alternate !== null) {
              detachFiberMutation(alternate);
            }
          }
          function commitWork(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }
              case ClassComponent: {
                return;
              }
              case HostComponent: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                  }
                }
                return;
              }
              case HostText: {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot: {
                {
                  var _root = finishedWork.stateNode;
                  if (_root.hydrate) {
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                  }
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case IncompleteClassComponent: {
                return;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
              }
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState !== null) {
              markCommitTimeOfFallback();
              {
                var primaryChildParent = finishedWork.child;
                hideOrUnhideAllChildren(primaryChildParent, true);
              }
            }
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  {
                    if (wakeable.__reactDoNotTraceInteractions !== true) {
                      retry = tracing.unstable_wrap(retry);
                    }
                  }
                  retryCache.add(wakeable);
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
            if (current2 !== null) {
              var oldState = current2.memoizedState;
              if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
              }
            }
            return false;
          }
          function commitResetTextContent(current2) {
            resetTextContent(current2.stateNode);
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor$1 = Symbol.for;
            COMPONENT_TYPE = symbolFor$1("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor$1("selector.role");
            TEST_NAME_TYPE = symbolFor$1("selector.test_id");
            TEXT_TYPE = symbolFor$1("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
          var NoContext = 0;
          var BatchedContext = 1;
          var EventContext = 2;
          var DiscreteEventContext = 4;
          var LegacyUnbatchedContext = 8;
          var RenderContext = 16;
          var CommitContext = 32;
          var RetryAfterError = 64;
          var RootIncomplete = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootIncomplete;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var mostRecentlyUpdatedRoot = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var nextEffect = null;
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsRenderPriority = NoPriority$1;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveHookEffectsMount = [];
          var pendingPassiveHookEffectsUnmount = [];
          var rootsWithPendingDiscreteUpdates = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var spawnedWorkDuringRender = null;
          var currentEventTime = NoTimestamp;
          var currentEventWipLanes = NoLanes;
          var currentEventPendingLanes = NoLanes;
          var isFlushingPassiveEffects = false;
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (currentEventPendingLanes !== NoLanes) {
                currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
              }
              return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
            }
            var schedulerPriority = getCurrentPriorityLevel();
            var lane;
            if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
              lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
            } else {
              var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
              lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
            }
            return lane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            return findRetryLane(currentEventWipLanes);
          }
          function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates();
            warnAboutRenderPhaseUpdatesInDEV(fiber);
            var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
            if (root2 === null) {
              warnAboutUpdateOnUnmountedFiberInDEV(fiber);
              return null;
            }
            markRootUpdated(root2, lane, eventTime);
            if (root2 === workInProgressRoot) {
              {
                workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            var priorityLevel = getCurrentPriorityLevel();
            if (lane === SyncLane) {
              if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                schedulePendingInteractions(root2, lane);
                performSyncWorkOnRoot(root2);
              } else {
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, lane);
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            } else {
              if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                if (rootsWithPendingDiscreteUpdates === null) {
                  rootsWithPendingDiscreteUpdates = new Set([root2]);
                } else {
                  rootsWithPendingDiscreteUpdates.add(root2);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, lane);
            }
            mostRecentlyUpdatedRoot = root2;
          }
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            var newCallbackPriority = returnNextLanesPriority();
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root2.callbackNode = null;
                root2.callbackPriority = NoLanePriority;
              }
              return;
            }
            if (existingCallbackNode !== null) {
              var existingCallbackPriority = root2.callbackPriority;
              if (existingCallbackPriority === newCallbackPriority) {
                return;
              }
              cancelCallback(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLanePriority) {
              newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else if (newCallbackPriority === SyncBatchedLanePriority) {
              newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root2));
            } else {
              var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
              newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2) {
            currentEventTime = NoTimestamp;
            currentEventWipLanes = NoLanes;
            currentEventPendingLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var exitStatus = renderRootConcurrent(root2, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              prepareFreshStack(root2, NoLanes);
            } else if (exitStatus !== RootIncomplete) {
              if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError;
                if (root2.hydrate) {
                  root2.hydrate = false;
                  clearContainer(root2.containerInfo);
                }
                lanes = getLanesToRetrySynchronouslyOnError(root2);
                if (lanes !== NoLanes) {
                  exitStatus = renderRootSync(root2, lanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              var finishedWork = root2.current.alternate;
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootIncomplete:
              case RootFatalErrored: {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
              case RootErrored: {
                commitRoot(root2);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootCompleted: {
                commitRoot(root2);
                break;
              }
              default: {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
            }
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            var lanes;
            var exitStatus;
            if (root2 === workInProgressRoot && includesSomeLane(root2.expiredLanes, workInProgressRootRenderLanes)) {
              lanes = workInProgressRootRenderLanes;
              exitStatus = renderRootSync(root2, lanes);
              if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                lanes = getNextLanes(root2, lanes);
                exitStatus = renderRootSync(root2, lanes);
              }
            } else {
              lanes = getNextLanes(root2, NoLanes);
              exitStatus = renderRootSync(root2, lanes);
            }
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root2.hydrate) {
                root2.hydrate = false;
                clearContainer(root2.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root2);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root2, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
                }
              }
              return;
            }
            flushPendingDiscreteUpdates();
            flushPassiveEffects();
          }
          function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
              var roots = rootsWithPendingDiscreteUpdates;
              rootsWithPendingDiscreteUpdates = null;
              roots.forEach(function(root2) {
                markDiscreteUpdatesExpired(root2);
                ensureRootIsScheduled(root2, now());
              });
            }
            flushSyncCallbackQueue();
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function batchedEventUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= EventContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function discreteUpdates$1(fn, a, b, c, d) {
            var prevExecutionContext = executionContext;
            executionContext |= DiscreteEventContext;
            {
              try {
                return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            }
          }
          function unbatchedUpdates(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext &= ~BatchedContext;
            executionContext |= LegacyUnbatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function flushSync(fn, a) {
            var prevExecutionContext = executionContext;
            if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
              {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
              return fn(a);
            }
            executionContext |= BatchedContext;
            {
              try {
                if (fn) {
                  return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
                } else {
                  return void 0;
                }
              } finally {
                executionContext = prevExecutionContext;
                flushSyncCallbackQueue();
              }
            }
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            workInProgress = createWorkInProgress(root2.current, null);
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootIncomplete;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            {
              spawnedWorkDuringRender = null;
            }
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function pushInteractions(root2) {
            {
              var prevInteractions = tracing.__interactionsRef.current;
              tracing.__interactionsRef.current = root2.memoizedInteractions;
              return prevInteractions;
            }
          }
          function popInteractions(prevInteractions) {
            {
              tracing.__interactionsRef.current = prevInteractions;
            }
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
              workInProgressRootExitStatus = RootErrored;
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              return RootIncomplete;
            } else {
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = completedWork.firstEffect;
                  }
                  if (completedWork.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                    }
                    returnFiber.lastEffect = completedWork.lastEffect;
                  }
                  var flags = completedWork.flags;
                  if (flags > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork;
                    } else {
                      returnFiber.firstEffect = completedWork;
                    }
                    returnFiber.lastEffect = completedWork;
                  }
                }
              } else {
                var _next = unwindWork(completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.firstEffect = returnFiber.lastEffect = null;
                  returnFiber.flags |= Incomplete;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function resetChildLanes(completedWork) {
            if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
              return;
            }
            var newChildLanes = NoLanes;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) {
                  actualDuration += child.actualDuration;
                }
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) {
                  treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
              }
            }
            completedWork.childLanes = newChildLanes;
          }
          function commitRoot(root2) {
            var renderPriorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root2, renderPriorityLevel));
            return null;
          }
          function commitRootImpl(root2, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            if (finishedWork === null) {
              return null;
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (!(finishedWork !== root2.current)) {
              {
                throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            root2.callbackNode = null;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (rootsWithPendingDiscreteUpdates !== null) {
              if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root2)) {
                rootsWithPendingDiscreteUpdates.delete(root2);
              }
            }
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            var firstEffect;
            if (finishedWork.flags > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
              } else {
                firstEffect = finishedWork;
              }
            } else {
              firstEffect = finishedWork.firstEffect;
            }
            if (firstEffect !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var prevInteractions = pushInteractions(root2);
              ReactCurrentOwner$2.current = null;
              focusedInstanceHandle = prepareForCommit(root2.containerInfo);
              shouldFireAfterActiveInstanceBlur = false;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              focusedInstanceHandle = null;
              {
                recordCommitTime();
              }
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitLayoutEffects, null, root2, lanes);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              nextEffect = null;
              requestPaint();
              {
                popInteractions(prevInteractions);
              }
              executionContext = prevExecutionContext;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
              pendingPassiveEffectsRenderPriority = renderPriorityLevel;
            } else {
              nextEffect = firstEffect;
              while (nextEffect !== null) {
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) {
                  detachFiberAfterEffects(nextEffect);
                }
                nextEffect = nextNextEffect;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes !== NoLanes) {
              {
                if (spawnedWorkDuringRender !== null) {
                  var expirationTimes = spawnedWorkDuringRender;
                  spawnedWorkDuringRender = null;
                  for (var i = 0; i < expirationTimes.length; i++) {
                    scheduleInteractions(root2, expirationTimes[i], root2.memoizedInteractions);
                  }
                }
                schedulePendingInteractions(root2, remainingLanes);
              }
            } else {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                finishPendingInteractions(root2, lanes);
              }
            }
            if (remainingLanes === SyncLane) {
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var _error3 = firstUncaughtError;
              firstUncaughtError = null;
              throw _error3;
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
              return null;
            }
            flushSyncCallbackQueue();
            return null;
          }
          function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
              var current2 = nextEffect.alternate;
              if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                  if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                } else {
                  if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                }
              }
              var flags = nextEffect.flags;
              if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current2, nextEffect);
                resetCurrentFiber();
              }
              if ((flags & Passive) !== NoFlags) {
                if (!rootDoesHavePassiveEffects) {
                  rootDoesHavePassiveEffects = true;
                  scheduleCallback(NormalPriority$1, function() {
                    flushPassiveEffects();
                    return null;
                  });
                }
              }
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitMutationEffects(root2, renderPriorityLevel) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & ContentReset) {
                commitResetTextContent(nextEffect);
              }
              if (flags & Ref) {
                var current2 = nextEffect.alternate;
                if (current2 !== null) {
                  commitDetachRef(current2);
                }
              }
              var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
              switch (primaryFlags) {
                case Placement: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  break;
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
                case Hydrating: {
                  nextEffect.flags &= ~Hydrating;
                  break;
                }
                case HydratingAndUpdate: {
                  nextEffect.flags &= ~Hydrating;
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
                case Update: {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }
                case Deletion: {
                  commitDeletion(root2, nextEffect);
                  break;
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitLayoutEffects(root2, committedLanes) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & (Update | Callback)) {
                var current2 = nextEffect.alternate;
                commitLifeCycles(root2, current2, nextEffect);
              }
              {
                if (flags & Ref) {
                  commitAttachRef(nextEffect);
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
              var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
              pendingPassiveEffectsRenderPriority = NoPriority$1;
              {
                return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
              }
            }
            return false;
          }
          function enqueuePendingPassiveHookEffectMount(fiber, effect) {
            pendingPassiveHookEffectsMount.push(effect, fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
            pendingPassiveHookEffectsUnmount.push(effect, fiber);
            {
              fiber.flags |= PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags |= PassiveUnmountPendingDev;
              }
            }
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function invokePassiveEffectCreate(effect) {
            var create = effect.create;
            effect.destroy = create();
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Cannot flush passive effects while already rendering.");
              }
            }
            {
              isFlushingPassiveEffects = true;
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            var unmountEffects = pendingPassiveHookEffectsUnmount;
            pendingPassiveHookEffectsUnmount = [];
            for (var i = 0; i < unmountEffects.length; i += 2) {
              var _effect = unmountEffects[i];
              var fiber = unmountEffects[i + 1];
              var destroy = _effect.destroy;
              _effect.destroy = void 0;
              {
                fiber.flags &= ~PassiveUnmountPendingDev;
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.flags &= ~PassiveUnmountPendingDev;
                }
              }
              if (typeof destroy === "function") {
                {
                  setCurrentFiber(fiber);
                  {
                    invokeGuardedCallback(null, destroy, null);
                  }
                  if (hasCaughtError()) {
                    if (!(fiber !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(fiber, error2);
                  }
                  resetCurrentFiber();
                }
              }
            }
            var mountEffects = pendingPassiveHookEffectsMount;
            pendingPassiveHookEffectsMount = [];
            for (var _i = 0; _i < mountEffects.length; _i += 2) {
              var _effect2 = mountEffects[_i];
              var _fiber = mountEffects[_i + 1];
              {
                setCurrentFiber(_fiber);
                {
                  invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
                }
                if (hasCaughtError()) {
                  if (!(_fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error4 = clearCaughtError();
                  captureCommitPhaseError(_fiber, _error4);
                }
                resetCurrentFiber();
              }
            }
            var effect = root2.current.firstEffect;
            while (effect !== null) {
              var nextNextEffect = effect.nextEffect;
              effect.nextEffect = null;
              if (effect.flags & Deletion) {
                detachFiberAfterEffects(effect);
              }
              effect = nextNextEffect;
            }
            {
              popInteractions(prevInteractions);
              finishPendingInteractions(root2, lanes);
            }
            {
              isFlushingPassiveEffects = false;
            }
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValue(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            enqueueUpdate(rootFiber, update);
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, SyncLane);
            }
          }
          function captureCommitPhaseError(sourceFiber, error2) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
              return;
            }
            var fiber = sourceFiber.return;
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error2, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  enqueueUpdate(fiber, update);
                  var eventTime = requestEventTime();
                  var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                    schedulePendingInteractions(root2, SyncLane);
                  } else {
                    if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                      try {
                        instance.componentDidCatch(error2, errorInfo);
                      } catch (errorToIgnore) {
                      }
                    }
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, pingedLanes);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, retryLane);
            }
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            {
              retryCache = boundaryFiber.stateNode;
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              {
                {
                  throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                }
              }
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var didWarnStateUpdateForUnmountedComponent = null;
          function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
              var tag = fiber.tag;
              if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForUnmountedComponent !== null) {
                if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForUnmountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
              }
              if (isFlushingPassiveEffects)
                ;
              else {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  throw replayError;
                } else {
                  throw originalError;
                }
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          var IsThisRendererActing = {
            current: false
          };
          function warnIfNotScopedWithMatchingAct(fiber) {
            {
              if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
              if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              }
            }
          }
          function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
              if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
          var didWarnAboutUnmockedScheduler = false;
          function warnIfUnmockedScheduler(fiber) {
            {
              if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
                if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                  didWarnAboutUnmockedScheduler = true;
                  error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
                }
              }
            }
          }
          function computeThreadID(root2, lane) {
            return lane * 1e3 + root2.interactionThreadID;
          }
          function markSpawnedWork(lane) {
            if (spawnedWorkDuringRender === null) {
              spawnedWorkDuringRender = [lane];
            } else {
              spawnedWorkDuringRender.push(lane);
            }
          }
          function scheduleInteractions(root2, lane, interactions) {
            if (interactions.size > 0) {
              var pendingInteractionMap = root2.pendingInteractionMap;
              var pendingInteractions = pendingInteractionMap.get(lane);
              if (pendingInteractions != null) {
                interactions.forEach(function(interaction) {
                  if (!pendingInteractions.has(interaction)) {
                    interaction.__count++;
                  }
                  pendingInteractions.add(interaction);
                });
              } else {
                pendingInteractionMap.set(lane, new Set(interactions));
                interactions.forEach(function(interaction) {
                  interaction.__count++;
                });
              }
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lane);
                subscriber.onWorkScheduled(interactions, threadID);
              }
            }
          }
          function schedulePendingInteractions(root2, lane) {
            scheduleInteractions(root2, lane, tracing.__interactionsRef.current);
          }
          function startWorkOnPendingInteractions(root2, lanes) {
            var interactions = new Set();
            root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
              if (includesSomeLane(lanes, scheduledLane)) {
                scheduledInteractions.forEach(function(interaction) {
                  return interactions.add(interaction);
                });
              }
            });
            root2.memoizedInteractions = interactions;
            if (interactions.size > 0) {
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lanes);
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error2) {
                  scheduleCallback(ImmediatePriority$1, function() {
                    throw error2;
                  });
                }
              }
            }
          }
          function finishPendingInteractions(root2, committedLanes) {
            var remainingLanesAfterCommit = root2.pendingLanes;
            var subscriber;
            try {
              subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null && root2.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root2, committedLanes);
                subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
              }
            } catch (error2) {
              scheduleCallback(ImmediatePriority$1, function() {
                throw error2;
              });
            } finally {
              var pendingInteractionMap = root2.pendingInteractionMap;
              pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                  pendingInteractionMap.delete(lane);
                  scheduledInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      try {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      } catch (error2) {
                        scheduleCallback(ImmediatePriority$1, function() {
                          throw error2;
                        });
                      }
                    }
                  });
                }
              });
            }
          }
          function shouldForceFlushFallbacksInDEV() {
            return actingUpdatesScopeDepth > 0;
          }
          var actingUpdatesScopeDepth = 0;
          function detachFiberAfterEffects(fiber) {
            fiber.sibling = null;
            fiber.stateNode = null;
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              new Map([[nonExtensibleObject, null]]);
              new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          var debugCounter = 1;
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugID = debugCounter++;
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugID = current2._debugID;
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.nextEffect = null;
              workInProgress2.firstEffect = null;
              workInProgress2.lastEffect = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= Placement;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode | BlockingMode | StrictMode;
            } else if (tag === BlockingRoot) {
              mode = BlockingMode | StrictMode;
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= DebugTracingMode;
                    break;
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictMode;
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                    return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
                  case REACT_SCOPE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                        case REACT_BLOCK_TYPE:
                          fiberTag = Block;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentName(owner.type) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    {
                      {
                        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                      }
                    }
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" as a prop');
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.type = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.type = REACT_SUSPENSE_TYPE;
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_SUSPENSE_LIST_TYPE;
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_OFFSCREEN_TYPE;
            }
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
            var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_LEGACY_HIDDEN_TYPE;
            }
            fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            fiber.type = "DELETED";
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.nextEffect = source.nextEffect;
            target.firstEffect = source.firstEffect;
            target.lastEffect = source.lastEffect;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugID = source._debugID;
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.hydrate = hydrate2;
            this.callbackNode = null;
            this.callbackPriority = NoLanePriority;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.interactionThreadID = tracing.unstable_getThreadID();
              this.memoizedInteractions = new Set();
              this.pendingInteractionMap = new Map();
            }
            {
              switch (tag) {
                case BlockingRoot:
                  this._debugRootType = "createBlockingRoot()";
                  break;
                case ConcurrentRoot:
                  this._debugRootType = "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = "createLegacyRoot()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
            var uninitializedFiber = createHostRootFiber(tag);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }
                } else {
                  {
                    {
                      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                    }
                  }
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag, hydrate2);
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            {
              if (typeof jest !== "undefined") {
                warnIfUnmockedScheduler(current$1);
                warnIfNotScopedWithMatchingAct(current$1);
              }
            }
            var lane = requestUpdateLane(current$1);
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            enqueueUpdate(current$1, update);
            scheduleUpdateOnFiber(current$1, lane, eventTime);
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptUserBlockingHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = InputDiscreteHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function runWithPriority$2(priority, fn) {
            try {
              setCurrentUpdateLanePriority(priority);
              return fn();
            } finally {
            }
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.tag === FundamentalComponent) {
              return hostFiber.stateNode.instance;
            }
            return hostFiber.stateNode;
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === path.length) {
                if (Array.isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (Array.isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            scheduleUpdate = function(fiber) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools
            });
          }
          function ReactDOMRoot(container, options2) {
            this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
          }
          function ReactDOMBlockingRoot(container, tag, options2) {
            this._internalRoot = createRootImpl(container, tag, options2);
          }
          ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            var container = root2.containerInfo;
            updateContainer(null, root2, null, function() {
              unmarkContainerAsRoot(container);
            });
          };
          function createRootImpl(container, tag, options2) {
            var hydrate2 = options2 != null && options2.hydrate === true;
            var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
            var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
            var root2 = createContainer(container, tag, hydrate2);
            markContainerAsRoot(root2.current, container);
            var containerNodeType = container.nodeType;
            {
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
            }
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return root2;
          }
          function createLegacyRoot(container, options2) {
            return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          var warnedAboutHydrateAPI = false;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement = getReactRootElementInContainer(container);
            return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
          }
          function legacyCreateRootFromDOMContainer(container, forceHydrate) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
            if (!shouldHydrate) {
              var warned = false;
              var rootSibling;
              while (rootSibling = container.lastChild) {
                {
                  if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                  }
                }
                container.removeChild(rootSibling);
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
              }
            }
            return createLegacyRoot(container, shouldHydrate ? {
              hydrate: true
            } : void 0);
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var root2 = container._reactRootContainer;
            var fiberRoot;
            if (!root2) {
              root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  originalCallback.call(instance);
                };
              }
              unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
              });
            } else {
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  _originalCallback.call(instance);
                };
              }
              updateContainer(children, fiberRoot, parentComponent, callback);
            }
            return getPublicRootInstance(fiberRoot);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            if (!isValidContainer(containerNode)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            if (!(parentComponent != null && has(parentComponent))) {
              {
                throw Error("parentComponent must be a valid React Component");
              }
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainer(container)) {
              {
                throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setAttemptHydrationAtPriority(runWithPriority$2);
          var didWarnAboutUnstableCreatePortal = false;
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          function unstable_createPortal(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            {
              if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
              }
            }
            return createPortal$1(children, container, key);
          }
          var Internals = {
            Events: [
              getInstanceFromNode,
              getNodeFromInstance,
              getFiberCurrentPropsFromNode,
              enqueueStateRestore,
              restoreStateIfNeeded,
              flushPassiveEffects,
              IsThisRendererActing
            ]
          };
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync;
          exports.hydrate = hydrate;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_createPortal = unstable_createPortal;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // src/serviceWorker.js
  var serviceWorker_exports = {};
  __export(serviceWorker_exports, {
    register: () => register,
    unregister: () => unregister
  });
  function register(config) {
    if (false) {
      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
      if (publicUrl.origin !== window.location.origin) {
        return;
      }
      window.addEventListener("load", () => {
        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;
        if (isLocalhost) {
          checkValidServiceWorker(swUrl, config);
          navigator.serviceWorker.ready.then(() => {
            console.log("This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA");
          });
        } else {
          registerValidSW(swUrl, config);
        }
      });
    }
  }
  function unregister() {
    if ("serviceWorker" in navigator) {
      navigator.serviceWorker.ready.then((registration) => {
        registration.unregister();
      }).catch((error) => {
        console.error(error.message);
      });
    }
  }
  var isLocalhost;
  var init_serviceWorker = __esm({
    "src/serviceWorker.js"() {
      isLocalhost = Boolean(window.location.hostname === "localhost" || window.location.hostname === "[::1]" || window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));
    }
  });

  // node_modules/@rescript/std/lib/js/caml_array.js
  var require_caml_array = __commonJS({
    "node_modules/@rescript/std/lib/js/caml_array.js"(exports) {
      "use strict";
      function sub(x, offset, len2) {
        var result = new Array(len2);
        var j = 0;
        var i = offset;
        while (j < len2) {
          result[j] = x[i];
          j = j + 1 | 0;
          i = i + 1 | 0;
        }
        ;
        return result;
      }
      function len(_acc, _l) {
        while (true) {
          var l = _l;
          var acc = _acc;
          if (!l) {
            return acc;
          }
          _l = l.tl;
          _acc = l.hd.length + acc | 0;
          continue;
        }
        ;
      }
      function fill(arr, _i, _l) {
        while (true) {
          var l = _l;
          var i = _i;
          if (!l) {
            return;
          }
          var x = l.hd;
          var l$1 = x.length;
          var k = i;
          var j = 0;
          while (j < l$1) {
            arr[k] = x[j];
            k = k + 1 | 0;
            j = j + 1 | 0;
          }
          ;
          _l = l.tl;
          _i = k;
          continue;
        }
        ;
      }
      function concat(l) {
        var v = len(0, l);
        var result = new Array(v);
        fill(result, 0, l);
        return result;
      }
      function set(xs, index, newval) {
        if (index < 0 || index >= xs.length) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "index out of bounds",
            Error: new Error()
          };
        }
        xs[index] = newval;
      }
      function get(xs, index) {
        if (index < 0 || index >= xs.length) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "index out of bounds",
            Error: new Error()
          };
        }
        return xs[index];
      }
      function make(len2, init) {
        var b = new Array(len2);
        for (var i = 0; i < len2; ++i) {
          b[i] = init;
        }
        return b;
      }
      function make_float(len2) {
        var b = new Array(len2);
        for (var i = 0; i < len2; ++i) {
          b[i] = 0;
        }
        return b;
      }
      function blit(a1, i1, a2, i2, len2) {
        if (i2 <= i1) {
          for (var j = 0; j < len2; ++j) {
            a2[j + i2 | 0] = a1[j + i1 | 0];
          }
          return;
        }
        for (var j$1 = len2 - 1 | 0; j$1 >= 0; --j$1) {
          a2[j$1 + i2 | 0] = a1[j$1 + i1 | 0];
        }
      }
      function dup(prim) {
        return prim.slice(0);
      }
      exports.dup = dup;
      exports.sub = sub;
      exports.concat = concat;
      exports.make = make;
      exports.make_float = make_float;
      exports.blit = blit;
      exports.get = get;
      exports.set = set;
    }
  });

  // node_modules/@rescript/std/lib/js/curry.js
  var require_curry = __commonJS({
    "node_modules/@rescript/std/lib/js/curry.js"(exports) {
      "use strict";
      var Caml_array = require_caml_array();
      function app(_f, _args) {
        while (true) {
          var args = _args;
          var f = _f;
          var init_arity = f.length;
          var arity = init_arity === 0 ? 1 : init_arity;
          var len = args.length;
          var d = arity - len | 0;
          if (d === 0) {
            return f.apply(null, args);
          }
          if (d >= 0) {
            return function(f2, args2) {
              return function(x) {
                return app(f2, args2.concat([x]));
              };
            }(f, args);
          }
          _args = Caml_array.sub(args, arity, -d | 0);
          _f = f.apply(null, Caml_array.sub(args, 0, arity));
          continue;
        }
        ;
      }
      function _1(o, a0) {
        var arity = o.length;
        if (arity === 1) {
          return o(a0);
        } else {
          switch (arity) {
            case 1:
              return o(a0);
            case 2:
              return function(param) {
                return o(a0, param);
              };
            case 3:
              return function(param, param$1) {
                return o(a0, param, param$1);
              };
            case 4:
              return function(param, param$1, param$2) {
                return o(a0, param, param$1, param$2);
              };
            case 5:
              return function(param, param$1, param$2, param$3) {
                return o(a0, param, param$1, param$2, param$3);
              };
            case 6:
              return function(param, param$1, param$2, param$3, param$4) {
                return o(a0, param, param$1, param$2, param$3, param$4);
              };
            case 7:
              return function(param, param$1, param$2, param$3, param$4, param$5) {
                return o(a0, param, param$1, param$2, param$3, param$4, param$5);
              };
            default:
              return app(o, [a0]);
          }
        }
      }
      function __1(o) {
        var arity = o.length;
        if (arity === 1) {
          return o;
        } else {
          return function(a0) {
            return _1(o, a0);
          };
        }
      }
      function _2(o, a0, a1) {
        var arity = o.length;
        if (arity === 2) {
          return o(a0, a1);
        } else {
          switch (arity) {
            case 1:
              return app(o(a0), [a1]);
            case 2:
              return o(a0, a1);
            case 3:
              return function(param) {
                return o(a0, a1, param);
              };
            case 4:
              return function(param, param$1) {
                return o(a0, a1, param, param$1);
              };
            case 5:
              return function(param, param$1, param$2) {
                return o(a0, a1, param, param$1, param$2);
              };
            case 6:
              return function(param, param$1, param$2, param$3) {
                return o(a0, a1, param, param$1, param$2, param$3);
              };
            case 7:
              return function(param, param$1, param$2, param$3, param$4) {
                return o(a0, a1, param, param$1, param$2, param$3, param$4);
              };
            default:
              return app(o, [
                a0,
                a1
              ]);
          }
        }
      }
      function __2(o) {
        var arity = o.length;
        if (arity === 2) {
          return o;
        } else {
          return function(a0, a1) {
            return _2(o, a0, a1);
          };
        }
      }
      function _3(o, a0, a1, a2) {
        var arity = o.length;
        if (arity === 3) {
          return o(a0, a1, a2);
        } else {
          switch (arity) {
            case 1:
              return app(o(a0), [
                a1,
                a2
              ]);
            case 2:
              return app(o(a0, a1), [a2]);
            case 3:
              return o(a0, a1, a2);
            case 4:
              return function(param) {
                return o(a0, a1, a2, param);
              };
            case 5:
              return function(param, param$1) {
                return o(a0, a1, a2, param, param$1);
              };
            case 6:
              return function(param, param$1, param$2) {
                return o(a0, a1, a2, param, param$1, param$2);
              };
            case 7:
              return function(param, param$1, param$2, param$3) {
                return o(a0, a1, a2, param, param$1, param$2, param$3);
              };
            default:
              return app(o, [
                a0,
                a1,
                a2
              ]);
          }
        }
      }
      function __3(o) {
        var arity = o.length;
        if (arity === 3) {
          return o;
        } else {
          return function(a0, a1, a2) {
            return _3(o, a0, a1, a2);
          };
        }
      }
      function _4(o, a0, a1, a2, a3) {
        var arity = o.length;
        if (arity === 4) {
          return o(a0, a1, a2, a3);
        } else {
          switch (arity) {
            case 1:
              return app(o(a0), [
                a1,
                a2,
                a3
              ]);
            case 2:
              return app(o(a0, a1), [
                a2,
                a3
              ]);
            case 3:
              return app(o(a0, a1, a2), [a3]);
            case 4:
              return o(a0, a1, a2, a3);
            case 5:
              return function(param) {
                return o(a0, a1, a2, a3, param);
              };
            case 6:
              return function(param, param$1) {
                return o(a0, a1, a2, a3, param, param$1);
              };
            case 7:
              return function(param, param$1, param$2) {
                return o(a0, a1, a2, a3, param, param$1, param$2);
              };
            default:
              return app(o, [
                a0,
                a1,
                a2,
                a3
              ]);
          }
        }
      }
      function __4(o) {
        var arity = o.length;
        if (arity === 4) {
          return o;
        } else {
          return function(a0, a1, a2, a3) {
            return _4(o, a0, a1, a2, a3);
          };
        }
      }
      function _5(o, a0, a1, a2, a3, a4) {
        var arity = o.length;
        if (arity === 5) {
          return o(a0, a1, a2, a3, a4);
        } else {
          switch (arity) {
            case 1:
              return app(o(a0), [
                a1,
                a2,
                a3,
                a4
              ]);
            case 2:
              return app(o(a0, a1), [
                a2,
                a3,
                a4
              ]);
            case 3:
              return app(o(a0, a1, a2), [
                a3,
                a4
              ]);
            case 4:
              return app(o(a0, a1, a2, a3), [a4]);
            case 5:
              return o(a0, a1, a2, a3, a4);
            case 6:
              return function(param) {
                return o(a0, a1, a2, a3, a4, param);
              };
            case 7:
              return function(param, param$1) {
                return o(a0, a1, a2, a3, a4, param, param$1);
              };
            default:
              return app(o, [
                a0,
                a1,
                a2,
                a3,
                a4
              ]);
          }
        }
      }
      function __5(o) {
        var arity = o.length;
        if (arity === 5) {
          return o;
        } else {
          return function(a0, a1, a2, a3, a4) {
            return _5(o, a0, a1, a2, a3, a4);
          };
        }
      }
      function _6(o, a0, a1, a2, a3, a4, a5) {
        var arity = o.length;
        if (arity === 6) {
          return o(a0, a1, a2, a3, a4, a5);
        } else {
          switch (arity) {
            case 1:
              return app(o(a0), [
                a1,
                a2,
                a3,
                a4,
                a5
              ]);
            case 2:
              return app(o(a0, a1), [
                a2,
                a3,
                a4,
                a5
              ]);
            case 3:
              return app(o(a0, a1, a2), [
                a3,
                a4,
                a5
              ]);
            case 4:
              return app(o(a0, a1, a2, a3), [
                a4,
                a5
              ]);
            case 5:
              return app(o(a0, a1, a2, a3, a4), [a5]);
            case 6:
              return o(a0, a1, a2, a3, a4, a5);
            case 7:
              return function(param) {
                return o(a0, a1, a2, a3, a4, a5, param);
              };
            default:
              return app(o, [
                a0,
                a1,
                a2,
                a3,
                a4,
                a5
              ]);
          }
        }
      }
      function __6(o) {
        var arity = o.length;
        if (arity === 6) {
          return o;
        } else {
          return function(a0, a1, a2, a3, a4, a5) {
            return _6(o, a0, a1, a2, a3, a4, a5);
          };
        }
      }
      function _7(o, a0, a1, a2, a3, a4, a5, a6) {
        var arity = o.length;
        if (arity === 7) {
          return o(a0, a1, a2, a3, a4, a5, a6);
        } else {
          switch (arity) {
            case 1:
              return app(o(a0), [
                a1,
                a2,
                a3,
                a4,
                a5,
                a6
              ]);
            case 2:
              return app(o(a0, a1), [
                a2,
                a3,
                a4,
                a5,
                a6
              ]);
            case 3:
              return app(o(a0, a1, a2), [
                a3,
                a4,
                a5,
                a6
              ]);
            case 4:
              return app(o(a0, a1, a2, a3), [
                a4,
                a5,
                a6
              ]);
            case 5:
              return app(o(a0, a1, a2, a3, a4), [
                a5,
                a6
              ]);
            case 6:
              return app(o(a0, a1, a2, a3, a4, a5), [a6]);
            case 7:
              return o(a0, a1, a2, a3, a4, a5, a6);
            default:
              return app(o, [
                a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6
              ]);
          }
        }
      }
      function __7(o) {
        var arity = o.length;
        if (arity === 7) {
          return o;
        } else {
          return function(a0, a1, a2, a3, a4, a5, a6) {
            return _7(o, a0, a1, a2, a3, a4, a5, a6);
          };
        }
      }
      function _8(o, a0, a1, a2, a3, a4, a5, a6, a7) {
        var arity = o.length;
        if (arity === 8) {
          return o(a0, a1, a2, a3, a4, a5, a6, a7);
        } else {
          switch (arity) {
            case 1:
              return app(o(a0), [
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7
              ]);
            case 2:
              return app(o(a0, a1), [
                a2,
                a3,
                a4,
                a5,
                a6,
                a7
              ]);
            case 3:
              return app(o(a0, a1, a2), [
                a3,
                a4,
                a5,
                a6,
                a7
              ]);
            case 4:
              return app(o(a0, a1, a2, a3), [
                a4,
                a5,
                a6,
                a7
              ]);
            case 5:
              return app(o(a0, a1, a2, a3, a4), [
                a5,
                a6,
                a7
              ]);
            case 6:
              return app(o(a0, a1, a2, a3, a4, a5), [
                a6,
                a7
              ]);
            case 7:
              return app(o(a0, a1, a2, a3, a4, a5, a6), [a7]);
            default:
              return app(o, [
                a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7
              ]);
          }
        }
      }
      function __8(o) {
        var arity = o.length;
        if (arity === 8) {
          return o;
        } else {
          return function(a0, a1, a2, a3, a4, a5, a6, a7) {
            return _8(o, a0, a1, a2, a3, a4, a5, a6, a7);
          };
        }
      }
      exports.app = app;
      exports._1 = _1;
      exports.__1 = __1;
      exports._2 = _2;
      exports.__2 = __2;
      exports._3 = _3;
      exports.__3 = __3;
      exports._4 = _4;
      exports.__4 = __4;
      exports._5 = _5;
      exports.__5 = __5;
      exports._6 = _6;
      exports.__6 = __6;
      exports._7 = _7;
      exports.__7 = __7;
      exports._8 = _8;
      exports.__8 = __8;
    }
  });

  // node_modules/@rescript/std/lib/js/caml.js
  var require_caml = __commonJS({
    "node_modules/@rescript/std/lib/js/caml.js"(exports) {
      "use strict";
      function caml_int_compare(x, y) {
        if (x < y) {
          return -1;
        } else if (x === y) {
          return 0;
        } else {
          return 1;
        }
      }
      function caml_bool_compare(x, y) {
        if (x) {
          if (y) {
            return 0;
          } else {
            return 1;
          }
        } else if (y) {
          return -1;
        } else {
          return 0;
        }
      }
      function caml_float_compare(x, y) {
        if (x === y) {
          return 0;
        } else if (x < y) {
          return -1;
        } else if (x > y || x === x) {
          return 1;
        } else if (y === y) {
          return -1;
        } else {
          return 0;
        }
      }
      function caml_string_compare(s1, s2) {
        if (s1 === s2) {
          return 0;
        } else if (s1 < s2) {
          return -1;
        } else {
          return 1;
        }
      }
      function caml_bool_min(x, y) {
        if (x) {
          return y;
        } else {
          return x;
        }
      }
      function caml_int_min(x, y) {
        if (x < y) {
          return x;
        } else {
          return y;
        }
      }
      function caml_float_min(x, y) {
        if (x < y) {
          return x;
        } else {
          return y;
        }
      }
      function caml_string_min(x, y) {
        if (x < y) {
          return x;
        } else {
          return y;
        }
      }
      function caml_int32_min(x, y) {
        if (x < y) {
          return x;
        } else {
          return y;
        }
      }
      function caml_bool_max(x, y) {
        if (x) {
          return x;
        } else {
          return y;
        }
      }
      function caml_int_max(x, y) {
        if (x > y) {
          return x;
        } else {
          return y;
        }
      }
      function caml_float_max(x, y) {
        if (x > y) {
          return x;
        } else {
          return y;
        }
      }
      function caml_string_max(x, y) {
        if (x > y) {
          return x;
        } else {
          return y;
        }
      }
      function caml_int32_max(x, y) {
        if (x > y) {
          return x;
        } else {
          return y;
        }
      }
      function i64_eq(x, y) {
        if (x[1] === y[1]) {
          return x[0] === y[0];
        } else {
          return false;
        }
      }
      function i64_ge(param, param$1) {
        var other_hi = param$1[0];
        var hi = param[0];
        if (hi > other_hi) {
          return true;
        } else if (hi < other_hi) {
          return false;
        } else {
          return param[1] >= param$1[1];
        }
      }
      function i64_neq(x, y) {
        return !i64_eq(x, y);
      }
      function i64_lt(x, y) {
        return !i64_ge(x, y);
      }
      function i64_gt(x, y) {
        if (x[0] > y[0]) {
          return true;
        } else if (x[0] < y[0]) {
          return false;
        } else {
          return x[1] > y[1];
        }
      }
      function i64_le(x, y) {
        return !i64_gt(x, y);
      }
      function i64_min(x, y) {
        if (i64_ge(x, y)) {
          return y;
        } else {
          return x;
        }
      }
      function i64_max(x, y) {
        if (i64_gt(x, y)) {
          return x;
        } else {
          return y;
        }
      }
      exports.caml_int_compare = caml_int_compare;
      exports.caml_bool_compare = caml_bool_compare;
      exports.caml_float_compare = caml_float_compare;
      exports.caml_string_compare = caml_string_compare;
      exports.caml_bool_min = caml_bool_min;
      exports.caml_int_min = caml_int_min;
      exports.caml_float_min = caml_float_min;
      exports.caml_string_min = caml_string_min;
      exports.caml_int32_min = caml_int32_min;
      exports.caml_bool_max = caml_bool_max;
      exports.caml_int_max = caml_int_max;
      exports.caml_float_max = caml_float_max;
      exports.caml_string_max = caml_string_max;
      exports.caml_int32_max = caml_int32_max;
      exports.i64_eq = i64_eq;
      exports.i64_neq = i64_neq;
      exports.i64_lt = i64_lt;
      exports.i64_gt = i64_gt;
      exports.i64_le = i64_le;
      exports.i64_ge = i64_ge;
      exports.i64_min = i64_min;
      exports.i64_max = i64_max;
    }
  });

  // node_modules/@rescript/std/lib/js/js_int.js
  var require_js_int = __commonJS({
    "node_modules/@rescript/std/lib/js/js_int.js"(exports) {
      "use strict";
      function equal(x, y) {
        return x === y;
      }
      var max = 2147483647;
      var min = -2147483648;
      exports.equal = equal;
      exports.max = max;
      exports.min = min;
    }
  });

  // node_modules/@rescript/std/lib/js/js_math.js
  var require_js_math = __commonJS({
    "node_modules/@rescript/std/lib/js/js_math.js"(exports) {
      "use strict";
      var Js_int = require_js_int();
      function unsafe_ceil(prim) {
        return Math.ceil(prim);
      }
      function ceil_int(f) {
        if (f > Js_int.max) {
          return Js_int.max;
        } else if (f < Js_int.min) {
          return Js_int.min;
        } else {
          return Math.ceil(f);
        }
      }
      function unsafe_floor(prim) {
        return Math.floor(prim);
      }
      function floor_int(f) {
        if (f > Js_int.max) {
          return Js_int.max;
        } else if (f < Js_int.min) {
          return Js_int.min;
        } else {
          return Math.floor(f);
        }
      }
      function random_int(min, max) {
        return floor_int(Math.random() * (max - min | 0)) + min | 0;
      }
      var ceil = ceil_int;
      var floor = floor_int;
      exports.unsafe_ceil = unsafe_ceil;
      exports.ceil_int = ceil_int;
      exports.ceil = ceil;
      exports.unsafe_floor = unsafe_floor;
      exports.floor_int = floor_int;
      exports.floor = floor;
      exports.random_int = random_int;
    }
  });

  // node_modules/@rescript/std/lib/js/caml_option.js
  var require_caml_option = __commonJS({
    "node_modules/@rescript/std/lib/js/caml_option.js"(exports) {
      "use strict";
      function isNested(x) {
        return x.BS_PRIVATE_NESTED_SOME_NONE !== void 0;
      }
      function some(x) {
        if (x === void 0) {
          return {
            BS_PRIVATE_NESTED_SOME_NONE: 0
          };
        } else if (x !== null && x.BS_PRIVATE_NESTED_SOME_NONE !== void 0) {
          return {
            BS_PRIVATE_NESTED_SOME_NONE: x.BS_PRIVATE_NESTED_SOME_NONE + 1 | 0
          };
        } else {
          return x;
        }
      }
      function nullable_to_opt(x) {
        if (x == null) {
          return;
        } else {
          return some(x);
        }
      }
      function undefined_to_opt(x) {
        if (x === void 0) {
          return;
        } else {
          return some(x);
        }
      }
      function null_to_opt(x) {
        if (x === null) {
          return;
        } else {
          return some(x);
        }
      }
      function valFromOption(x) {
        if (!(x !== null && x.BS_PRIVATE_NESTED_SOME_NONE !== void 0)) {
          return x;
        }
        var depth = x.BS_PRIVATE_NESTED_SOME_NONE;
        if (depth === 0) {
          return;
        } else {
          return {
            BS_PRIVATE_NESTED_SOME_NONE: depth - 1 | 0
          };
        }
      }
      function option_get(x) {
        if (x === void 0) {
          return;
        } else {
          return valFromOption(x);
        }
      }
      function option_unwrap(x) {
        if (x !== void 0) {
          return x.VAL;
        } else {
          return x;
        }
      }
      exports.nullable_to_opt = nullable_to_opt;
      exports.undefined_to_opt = undefined_to_opt;
      exports.null_to_opt = null_to_opt;
      exports.valFromOption = valFromOption;
      exports.some = some;
      exports.isNested = isNested;
      exports.option_get = option_get;
      exports.option_unwrap = option_unwrap;
    }
  });

  // node_modules/@rescript/std/lib/js/belt_Array.js
  var require_belt_Array = __commonJS({
    "node_modules/@rescript/std/lib/js/belt_Array.js"(exports) {
      "use strict";
      var Caml = require_caml();
      var Curry = require_curry();
      var Js_math = require_js_math();
      var Caml_option = require_caml_option();
      function get(arr, i) {
        if (i >= 0 && i < arr.length) {
          return Caml_option.some(arr[i]);
        }
      }
      function getExn(arr, i) {
        if (!(i >= 0 && i < arr.length)) {
          throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "belt_Array.ml",
              27,
              4
            ],
            Error: new Error()
          };
        }
        return arr[i];
      }
      function set(arr, i, v) {
        if (i >= 0 && i < arr.length) {
          arr[i] = v;
          return true;
        } else {
          return false;
        }
      }
      function setExn(arr, i, v) {
        if (!(i >= 0 && i < arr.length)) {
          throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "belt_Array.ml",
              33,
              2
            ],
            Error: new Error()
          };
        }
        arr[i] = v;
      }
      function swapUnsafe(xs, i, j) {
        var tmp = xs[i];
        xs[i] = xs[j];
        xs[j] = tmp;
      }
      function shuffleInPlace(xs) {
        var len = xs.length;
        for (var i = 0; i < len; ++i) {
          swapUnsafe(xs, i, Js_math.random_int(i, len));
        }
      }
      function shuffle(xs) {
        var result = xs.slice(0);
        shuffleInPlace(result);
        return result;
      }
      function reverseInPlace(xs) {
        var len = xs.length;
        var ofs = 0;
        for (var i = 0, i_finish = len / 2 | 0; i < i_finish; ++i) {
          swapUnsafe(xs, ofs + i | 0, ((ofs + len | 0) - i | 0) - 1 | 0);
        }
      }
      function reverse(xs) {
        var len = xs.length;
        var result = new Array(len);
        for (var i = 0; i < len; ++i) {
          result[i] = xs[(len - 1 | 0) - i | 0];
        }
        return result;
      }
      function make(l, f) {
        if (l <= 0) {
          return [];
        }
        var res = new Array(l);
        for (var i = 0; i < l; ++i) {
          res[i] = f;
        }
        return res;
      }
      function makeByU(l, f) {
        if (l <= 0) {
          return [];
        }
        var res = new Array(l);
        for (var i = 0; i < l; ++i) {
          res[i] = f(i);
        }
        return res;
      }
      function makeBy(l, f) {
        return makeByU(l, Curry.__1(f));
      }
      function makeByAndShuffleU(l, f) {
        var u = makeByU(l, f);
        shuffleInPlace(u);
        return u;
      }
      function makeByAndShuffle(l, f) {
        return makeByAndShuffleU(l, Curry.__1(f));
      }
      function range(start, finish) {
        var cut = finish - start | 0;
        if (cut < 0) {
          return [];
        }
        var arr = new Array(cut + 1 | 0);
        for (var i = 0; i <= cut; ++i) {
          arr[i] = start + i | 0;
        }
        return arr;
      }
      function rangeBy(start, finish, step) {
        var cut = finish - start | 0;
        if (cut < 0 || step <= 0) {
          return [];
        }
        var nb = (cut / step | 0) + 1 | 0;
        var arr = new Array(nb);
        var cur = start;
        for (var i = 0; i < nb; ++i) {
          arr[i] = cur;
          cur = cur + step | 0;
        }
        return arr;
      }
      function zip(xs, ys) {
        var lenx = xs.length;
        var leny = ys.length;
        var len = lenx < leny ? lenx : leny;
        var s = new Array(len);
        for (var i = 0; i < len; ++i) {
          s[i] = [
            xs[i],
            ys[i]
          ];
        }
        return s;
      }
      function zipByU(xs, ys, f) {
        var lenx = xs.length;
        var leny = ys.length;
        var len = lenx < leny ? lenx : leny;
        var s = new Array(len);
        for (var i = 0; i < len; ++i) {
          s[i] = f(xs[i], ys[i]);
        }
        return s;
      }
      function zipBy(xs, ys, f) {
        return zipByU(xs, ys, Curry.__2(f));
      }
      function concat(a1, a2) {
        var l1 = a1.length;
        var l2 = a2.length;
        var a1a2 = new Array(l1 + l2 | 0);
        for (var i = 0; i < l1; ++i) {
          a1a2[i] = a1[i];
        }
        for (var i$1 = 0; i$1 < l2; ++i$1) {
          a1a2[l1 + i$1 | 0] = a2[i$1];
        }
        return a1a2;
      }
      function concatMany(arrs) {
        var lenArrs = arrs.length;
        var totalLen = 0;
        for (var i = 0; i < lenArrs; ++i) {
          totalLen = totalLen + arrs[i].length | 0;
        }
        var result = new Array(totalLen);
        totalLen = 0;
        for (var j = 0; j < lenArrs; ++j) {
          var cur = arrs[j];
          for (var k = 0, k_finish = cur.length; k < k_finish; ++k) {
            result[totalLen] = cur[k];
            totalLen = totalLen + 1 | 0;
          }
        }
        return result;
      }
      function slice(a, offset, len) {
        if (len <= 0) {
          return [];
        }
        var lena = a.length;
        var ofs = offset < 0 ? Caml.caml_int_max(lena + offset | 0, 0) : offset;
        var hasLen = lena - ofs | 0;
        var copyLength = hasLen < len ? hasLen : len;
        if (copyLength <= 0) {
          return [];
        }
        var result = new Array(copyLength);
        for (var i = 0; i < copyLength; ++i) {
          result[i] = a[ofs + i | 0];
        }
        return result;
      }
      function sliceToEnd(a, offset) {
        var lena = a.length;
        var ofs = offset < 0 ? Caml.caml_int_max(lena + offset | 0, 0) : offset;
        var len = lena - ofs | 0;
        var result = new Array(len);
        for (var i = 0; i < len; ++i) {
          result[i] = a[ofs + i | 0];
        }
        return result;
      }
      function fill(a, offset, len, v) {
        if (len <= 0) {
          return;
        }
        var lena = a.length;
        var ofs = offset < 0 ? Caml.caml_int_max(lena + offset | 0, 0) : offset;
        var hasLen = lena - ofs | 0;
        var fillLength = hasLen < len ? hasLen : len;
        if (fillLength <= 0) {
          return;
        }
        for (var i = ofs, i_finish = ofs + fillLength | 0; i < i_finish; ++i) {
          a[i] = v;
        }
      }
      function blitUnsafe(a1, srcofs1, a2, srcofs2, blitLength) {
        if (srcofs2 <= srcofs1) {
          for (var j = 0; j < blitLength; ++j) {
            a2[j + srcofs2 | 0] = a1[j + srcofs1 | 0];
          }
          return;
        }
        for (var j$1 = blitLength - 1 | 0; j$1 >= 0; --j$1) {
          a2[j$1 + srcofs2 | 0] = a1[j$1 + srcofs1 | 0];
        }
      }
      function blit(a1, ofs1, a2, ofs2, len) {
        var lena1 = a1.length;
        var lena2 = a2.length;
        var srcofs1 = ofs1 < 0 ? Caml.caml_int_max(lena1 + ofs1 | 0, 0) : ofs1;
        var srcofs2 = ofs2 < 0 ? Caml.caml_int_max(lena2 + ofs2 | 0, 0) : ofs2;
        var blitLength = Caml.caml_int_min(len, Caml.caml_int_min(lena1 - srcofs1 | 0, lena2 - srcofs2 | 0));
        if (srcofs2 <= srcofs1) {
          for (var j = 0; j < blitLength; ++j) {
            a2[j + srcofs2 | 0] = a1[j + srcofs1 | 0];
          }
          return;
        }
        for (var j$1 = blitLength - 1 | 0; j$1 >= 0; --j$1) {
          a2[j$1 + srcofs2 | 0] = a1[j$1 + srcofs1 | 0];
        }
      }
      function forEachU(a, f) {
        for (var i = 0, i_finish = a.length; i < i_finish; ++i) {
          f(a[i]);
        }
      }
      function forEach(a, f) {
        return forEachU(a, Curry.__1(f));
      }
      function mapU(a, f) {
        var l = a.length;
        var r = new Array(l);
        for (var i = 0; i < l; ++i) {
          r[i] = f(a[i]);
        }
        return r;
      }
      function map(a, f) {
        return mapU(a, Curry.__1(f));
      }
      function getByU(a, p) {
        var l = a.length;
        var i = 0;
        var r;
        while (r === void 0 && i < l) {
          var v = a[i];
          if (p(v)) {
            r = Caml_option.some(v);
          }
          i = i + 1 | 0;
        }
        ;
        return r;
      }
      function getBy(a, p) {
        return getByU(a, Curry.__1(p));
      }
      function getIndexByU(a, p) {
        var l = a.length;
        var i = 0;
        var r;
        while (r === void 0 && i < l) {
          var v = a[i];
          if (p(v)) {
            r = i;
          }
          i = i + 1 | 0;
        }
        ;
        return r;
      }
      function getIndexBy(a, p) {
        return getIndexByU(a, Curry.__1(p));
      }
      function keepU(a, f) {
        var l = a.length;
        var r = new Array(l);
        var j = 0;
        for (var i = 0; i < l; ++i) {
          var v = a[i];
          if (f(v)) {
            r[j] = v;
            j = j + 1 | 0;
          }
        }
        r.length = j;
        return r;
      }
      function keep(a, f) {
        return keepU(a, Curry.__1(f));
      }
      function keepWithIndexU(a, f) {
        var l = a.length;
        var r = new Array(l);
        var j = 0;
        for (var i = 0; i < l; ++i) {
          var v = a[i];
          if (f(v, i)) {
            r[j] = v;
            j = j + 1 | 0;
          }
        }
        r.length = j;
        return r;
      }
      function keepWithIndex(a, f) {
        return keepWithIndexU(a, Curry.__2(f));
      }
      function keepMapU(a, f) {
        var l = a.length;
        var r = new Array(l);
        var j = 0;
        for (var i = 0; i < l; ++i) {
          var v = a[i];
          var v$1 = f(v);
          if (v$1 !== void 0) {
            r[j] = Caml_option.valFromOption(v$1);
            j = j + 1 | 0;
          }
        }
        r.length = j;
        return r;
      }
      function keepMap(a, f) {
        return keepMapU(a, Curry.__1(f));
      }
      function forEachWithIndexU(a, f) {
        for (var i = 0, i_finish = a.length; i < i_finish; ++i) {
          f(i, a[i]);
        }
      }
      function forEachWithIndex(a, f) {
        return forEachWithIndexU(a, Curry.__2(f));
      }
      function mapWithIndexU(a, f) {
        var l = a.length;
        var r = new Array(l);
        for (var i = 0; i < l; ++i) {
          r[i] = f(i, a[i]);
        }
        return r;
      }
      function mapWithIndex(a, f) {
        return mapWithIndexU(a, Curry.__2(f));
      }
      function reduceU(a, x, f) {
        var r = x;
        for (var i = 0, i_finish = a.length; i < i_finish; ++i) {
          r = f(r, a[i]);
        }
        return r;
      }
      function reduce(a, x, f) {
        return reduceU(a, x, Curry.__2(f));
      }
      function reduceReverseU(a, x, f) {
        var r = x;
        for (var i = a.length - 1 | 0; i >= 0; --i) {
          r = f(r, a[i]);
        }
        return r;
      }
      function reduceReverse(a, x, f) {
        return reduceReverseU(a, x, Curry.__2(f));
      }
      function reduceReverse2U(a, b, x, f) {
        var r = x;
        var len = Caml.caml_int_min(a.length, b.length);
        for (var i = len - 1 | 0; i >= 0; --i) {
          r = f(r, a[i], b[i]);
        }
        return r;
      }
      function reduceReverse2(a, b, x, f) {
        return reduceReverse2U(a, b, x, Curry.__3(f));
      }
      function reduceWithIndexU(a, x, f) {
        var r = x;
        for (var i = 0, i_finish = a.length; i < i_finish; ++i) {
          r = f(r, a[i], i);
        }
        return r;
      }
      function reduceWithIndex(a, x, f) {
        return reduceWithIndexU(a, x, Curry.__3(f));
      }
      function everyU(arr, b) {
        var len = arr.length;
        var _i = 0;
        while (true) {
          var i = _i;
          if (i === len) {
            return true;
          }
          if (!b(arr[i])) {
            return false;
          }
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      function every(arr, f) {
        return everyU(arr, Curry.__1(f));
      }
      function someU(arr, b) {
        var len = arr.length;
        var _i = 0;
        while (true) {
          var i = _i;
          if (i === len) {
            return false;
          }
          if (b(arr[i])) {
            return true;
          }
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      function some(arr, f) {
        return someU(arr, Curry.__1(f));
      }
      function everyAux2(arr1, arr2, _i, b, len) {
        while (true) {
          var i = _i;
          if (i === len) {
            return true;
          }
          if (!b(arr1[i], arr2[i])) {
            return false;
          }
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      function every2U(a, b, p) {
        return everyAux2(a, b, 0, p, Caml.caml_int_min(a.length, b.length));
      }
      function every2(a, b, p) {
        return every2U(a, b, Curry.__2(p));
      }
      function some2U(a, b, p) {
        var _i = 0;
        var len = Caml.caml_int_min(a.length, b.length);
        while (true) {
          var i = _i;
          if (i === len) {
            return false;
          }
          if (p(a[i], b[i])) {
            return true;
          }
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      function some2(a, b, p) {
        return some2U(a, b, Curry.__2(p));
      }
      function eqU(a, b, p) {
        var lena = a.length;
        var lenb = b.length;
        if (lena === lenb) {
          return everyAux2(a, b, 0, p, lena);
        } else {
          return false;
        }
      }
      function eq(a, b, p) {
        return eqU(a, b, Curry.__2(p));
      }
      function cmpU(a, b, p) {
        var lena = a.length;
        var lenb = b.length;
        if (lena > lenb) {
          return 1;
        } else if (lena < lenb) {
          return -1;
        } else {
          var _i = 0;
          while (true) {
            var i = _i;
            if (i === lena) {
              return 0;
            }
            var c = p(a[i], b[i]);
            if (c !== 0) {
              return c;
            }
            _i = i + 1 | 0;
            continue;
          }
          ;
        }
      }
      function cmp(a, b, p) {
        return cmpU(a, b, Curry.__2(p));
      }
      function partitionU(a, f) {
        var l = a.length;
        var i = 0;
        var j = 0;
        var a1 = new Array(l);
        var a2 = new Array(l);
        for (var ii = 0; ii < l; ++ii) {
          var v = a[ii];
          if (f(v)) {
            a1[i] = v;
            i = i + 1 | 0;
          } else {
            a2[j] = v;
            j = j + 1 | 0;
          }
        }
        a1.length = i;
        a2.length = j;
        return [
          a1,
          a2
        ];
      }
      function partition(a, f) {
        return partitionU(a, Curry.__1(f));
      }
      function unzip(a) {
        var l = a.length;
        var a1 = new Array(l);
        var a2 = new Array(l);
        for (var i = 0; i < l; ++i) {
          var match = a[i];
          a1[i] = match[0];
          a2[i] = match[1];
        }
        return [
          a1,
          a2
        ];
      }
      function joinWithU(a, sep, toString) {
        var l = a.length;
        if (l === 0) {
          return "";
        }
        var lastIndex = l - 1 | 0;
        var _i = 0;
        var _res = "";
        while (true) {
          var res = _res;
          var i = _i;
          if (i === lastIndex) {
            return res + toString(a[i]);
          }
          _res = res + (toString(a[i]) + sep);
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      function joinWith(a, sep, toString) {
        return joinWithU(a, sep, Curry.__1(toString));
      }
      exports.get = get;
      exports.getExn = getExn;
      exports.set = set;
      exports.setExn = setExn;
      exports.shuffleInPlace = shuffleInPlace;
      exports.shuffle = shuffle;
      exports.reverseInPlace = reverseInPlace;
      exports.reverse = reverse;
      exports.make = make;
      exports.range = range;
      exports.rangeBy = rangeBy;
      exports.makeByU = makeByU;
      exports.makeBy = makeBy;
      exports.makeByAndShuffleU = makeByAndShuffleU;
      exports.makeByAndShuffle = makeByAndShuffle;
      exports.zip = zip;
      exports.zipByU = zipByU;
      exports.zipBy = zipBy;
      exports.unzip = unzip;
      exports.concat = concat;
      exports.concatMany = concatMany;
      exports.slice = slice;
      exports.sliceToEnd = sliceToEnd;
      exports.fill = fill;
      exports.blit = blit;
      exports.blitUnsafe = blitUnsafe;
      exports.forEachU = forEachU;
      exports.forEach = forEach;
      exports.mapU = mapU;
      exports.map = map;
      exports.getByU = getByU;
      exports.getBy = getBy;
      exports.getIndexByU = getIndexByU;
      exports.getIndexBy = getIndexBy;
      exports.keepU = keepU;
      exports.keep = keep;
      exports.keepWithIndexU = keepWithIndexU;
      exports.keepWithIndex = keepWithIndex;
      exports.keepMapU = keepMapU;
      exports.keepMap = keepMap;
      exports.forEachWithIndexU = forEachWithIndexU;
      exports.forEachWithIndex = forEachWithIndex;
      exports.mapWithIndexU = mapWithIndexU;
      exports.mapWithIndex = mapWithIndex;
      exports.partitionU = partitionU;
      exports.partition = partition;
      exports.reduceU = reduceU;
      exports.reduce = reduce;
      exports.reduceReverseU = reduceReverseU;
      exports.reduceReverse = reduceReverse;
      exports.reduceReverse2U = reduceReverse2U;
      exports.reduceReverse2 = reduceReverse2;
      exports.reduceWithIndexU = reduceWithIndexU;
      exports.reduceWithIndex = reduceWithIndex;
      exports.joinWithU = joinWithU;
      exports.joinWith = joinWith;
      exports.someU = someU;
      exports.some = some;
      exports.everyU = everyU;
      exports.every = every;
      exports.every2U = every2U;
      exports.every2 = every2;
      exports.some2U = some2U;
      exports.some2 = some2;
      exports.cmpU = cmpU;
      exports.cmp = cmp;
      exports.eqU = eqU;
      exports.eq = eq;
    }
  });

  // node_modules/@rescript/std/lib/js/belt_SortArray.js
  var require_belt_SortArray = __commonJS({
    "node_modules/@rescript/std/lib/js/belt_SortArray.js"(exports) {
      "use strict";
      var Curry = require_curry();
      var Belt_Array = require_belt_Array();
      function sortedLengthAuxMore(xs, _prec, _acc, len, lt) {
        while (true) {
          var acc = _acc;
          var prec = _prec;
          if (acc >= len) {
            return acc;
          }
          var v = xs[acc];
          if (!lt(v, prec)) {
            return acc;
          }
          _acc = acc + 1 | 0;
          _prec = v;
          continue;
        }
        ;
      }
      function strictlySortedLengthU(xs, lt) {
        var len = xs.length;
        if (len === 0 || len === 1) {
          return len;
        }
        var x0 = xs[0];
        var x1 = xs[1];
        if (lt(x0, x1)) {
          var _prec = x1;
          var _acc = 2;
          while (true) {
            var acc = _acc;
            var prec = _prec;
            if (acc >= len) {
              return acc;
            }
            var v = xs[acc];
            if (!lt(prec, v)) {
              return acc;
            }
            _acc = acc + 1 | 0;
            _prec = v;
            continue;
          }
          ;
        } else if (lt(x1, x0)) {
          return -sortedLengthAuxMore(xs, x1, 2, len, lt) | 0;
        } else {
          return 1;
        }
      }
      function strictlySortedLength(xs, lt) {
        return strictlySortedLengthU(xs, Curry.__2(lt));
      }
      function isSortedU(a, cmp) {
        var len = a.length;
        if (len === 0) {
          return true;
        } else {
          var _i = 0;
          var last_bound = len - 1 | 0;
          while (true) {
            var i = _i;
            if (i === last_bound) {
              return true;
            }
            if (cmp(a[i], a[i + 1 | 0]) > 0) {
              return false;
            }
            _i = i + 1 | 0;
            continue;
          }
          ;
        }
      }
      function isSorted(a, cmp) {
        return isSortedU(a, Curry.__2(cmp));
      }
      function merge(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
        var src1r = src1ofs + src1len | 0;
        var src2r = src2ofs + src2len | 0;
        var _i1 = src1ofs;
        var _s1 = src[src1ofs];
        var _i2 = src2ofs;
        var _s2 = src2[src2ofs];
        var _d = dstofs;
        while (true) {
          var d = _d;
          var s2 = _s2;
          var i2 = _i2;
          var s1 = _s1;
          var i1 = _i1;
          if (cmp(s1, s2) <= 0) {
            dst[d] = s1;
            var i1$1 = i1 + 1 | 0;
            if (i1$1 >= src1r) {
              return Belt_Array.blitUnsafe(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);
            }
            _d = d + 1 | 0;
            _s1 = src[i1$1];
            _i1 = i1$1;
            continue;
          }
          dst[d] = s2;
          var i2$1 = i2 + 1 | 0;
          if (i2$1 >= src2r) {
            return Belt_Array.blitUnsafe(src, i1, dst, d + 1 | 0, src1r - i1 | 0);
          }
          _d = d + 1 | 0;
          _s2 = src2[i2$1];
          _i2 = i2$1;
          continue;
        }
        ;
      }
      function unionU(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
        var src1r = src1ofs + src1len | 0;
        var src2r = src2ofs + src2len | 0;
        var _i1 = src1ofs;
        var _s1 = src[src1ofs];
        var _i2 = src2ofs;
        var _s2 = src2[src2ofs];
        var _d = dstofs;
        while (true) {
          var d = _d;
          var s2 = _s2;
          var i2 = _i2;
          var s1 = _s1;
          var i1 = _i1;
          var c = cmp(s1, s2);
          if (c < 0) {
            dst[d] = s1;
            var i1$1 = i1 + 1 | 0;
            var d$1 = d + 1 | 0;
            if (i1$1 < src1r) {
              _d = d$1;
              _s1 = src[i1$1];
              _i1 = i1$1;
              continue;
            }
            Belt_Array.blitUnsafe(src2, i2, dst, d$1, src2r - i2 | 0);
            return (d$1 + src2r | 0) - i2 | 0;
          }
          if (c === 0) {
            dst[d] = s1;
            var i1$2 = i1 + 1 | 0;
            var i2$1 = i2 + 1 | 0;
            var d$2 = d + 1 | 0;
            if (!(i1$2 < src1r && i2$1 < src2r)) {
              if (i1$2 === src1r) {
                Belt_Array.blitUnsafe(src2, i2$1, dst, d$2, src2r - i2$1 | 0);
                return (d$2 + src2r | 0) - i2$1 | 0;
              } else {
                Belt_Array.blitUnsafe(src, i1$2, dst, d$2, src1r - i1$2 | 0);
                return (d$2 + src1r | 0) - i1$2 | 0;
              }
            }
            _d = d$2;
            _s2 = src2[i2$1];
            _i2 = i2$1;
            _s1 = src[i1$2];
            _i1 = i1$2;
            continue;
          }
          dst[d] = s2;
          var i2$2 = i2 + 1 | 0;
          var d$3 = d + 1 | 0;
          if (i2$2 < src2r) {
            _d = d$3;
            _s2 = src2[i2$2];
            _i2 = i2$2;
            continue;
          }
          Belt_Array.blitUnsafe(src, i1, dst, d$3, src1r - i1 | 0);
          return (d$3 + src1r | 0) - i1 | 0;
        }
        ;
      }
      function union(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
        return unionU(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, Curry.__2(cmp));
      }
      function intersectU(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
        var src1r = src1ofs + src1len | 0;
        var src2r = src2ofs + src2len | 0;
        var _i1 = src1ofs;
        var _s1 = src[src1ofs];
        var _i2 = src2ofs;
        var _s2 = src2[src2ofs];
        var _d = dstofs;
        while (true) {
          var d = _d;
          var s2 = _s2;
          var i2 = _i2;
          var s1 = _s1;
          var i1 = _i1;
          var c = cmp(s1, s2);
          if (c < 0) {
            var i1$1 = i1 + 1 | 0;
            if (i1$1 >= src1r) {
              return d;
            }
            _s1 = src[i1$1];
            _i1 = i1$1;
            continue;
          }
          if (c === 0) {
            dst[d] = s1;
            var i1$2 = i1 + 1 | 0;
            var i2$1 = i2 + 1 | 0;
            var d$1 = d + 1 | 0;
            if (!(i1$2 < src1r && i2$1 < src2r)) {
              return d$1;
            }
            _d = d$1;
            _s2 = src2[i2$1];
            _i2 = i2$1;
            _s1 = src[i1$2];
            _i1 = i1$2;
            continue;
          }
          var i2$2 = i2 + 1 | 0;
          if (i2$2 >= src2r) {
            return d;
          }
          _s2 = src2[i2$2];
          _i2 = i2$2;
          continue;
        }
        ;
      }
      function intersect(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
        return intersectU(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, Curry.__2(cmp));
      }
      function diffU(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
        var src1r = src1ofs + src1len | 0;
        var src2r = src2ofs + src2len | 0;
        var _i1 = src1ofs;
        var _s1 = src[src1ofs];
        var _i2 = src2ofs;
        var _s2 = src2[src2ofs];
        var _d = dstofs;
        while (true) {
          var d = _d;
          var s2 = _s2;
          var i2 = _i2;
          var s1 = _s1;
          var i1 = _i1;
          var c = cmp(s1, s2);
          if (c < 0) {
            dst[d] = s1;
            var d$1 = d + 1 | 0;
            var i1$1 = i1 + 1 | 0;
            if (i1$1 >= src1r) {
              return d$1;
            }
            _d = d$1;
            _s1 = src[i1$1];
            _i1 = i1$1;
            continue;
          }
          if (c === 0) {
            var i1$2 = i1 + 1 | 0;
            var i2$1 = i2 + 1 | 0;
            if (!(i1$2 < src1r && i2$1 < src2r)) {
              if (i1$2 === src1r) {
                return d;
              } else {
                Belt_Array.blitUnsafe(src, i1$2, dst, d, src1r - i1$2 | 0);
                return (d + src1r | 0) - i1$2 | 0;
              }
            }
            _s2 = src2[i2$1];
            _i2 = i2$1;
            _s1 = src[i1$2];
            _i1 = i1$2;
            continue;
          }
          var i2$2 = i2 + 1 | 0;
          if (i2$2 < src2r) {
            _s2 = src2[i2$2];
            _i2 = i2$2;
            continue;
          }
          Belt_Array.blitUnsafe(src, i1, dst, d, src1r - i1 | 0);
          return (d + src1r | 0) - i1 | 0;
        }
        ;
      }
      function diff(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
        return diffU(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, Curry.__2(cmp));
      }
      function insertionSort(src, srcofs, dst, dstofs, len, cmp) {
        for (var i = 0; i < len; ++i) {
          var e = src[srcofs + i | 0];
          var j = (dstofs + i | 0) - 1 | 0;
          while (j >= dstofs && cmp(dst[j], e) > 0) {
            dst[j + 1 | 0] = dst[j];
            j = j - 1 | 0;
          }
          ;
          dst[j + 1 | 0] = e;
        }
      }
      function sortTo(src, srcofs, dst, dstofs, len, cmp) {
        if (len <= 5) {
          return insertionSort(src, srcofs, dst, dstofs, len, cmp);
        }
        var l1 = len / 2 | 0;
        var l2 = len - l1 | 0;
        sortTo(src, srcofs + l1 | 0, dst, dstofs + l1 | 0, l2, cmp);
        sortTo(src, srcofs, src, srcofs + l2 | 0, l1, cmp);
        return merge(src, srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs, cmp);
      }
      function stableSortInPlaceByU(a, cmp) {
        var l = a.length;
        if (l <= 5) {
          return insertionSort(a, 0, a, 0, l, cmp);
        }
        var l1 = l / 2 | 0;
        var l2 = l - l1 | 0;
        var t = new Array(l2);
        sortTo(a, l1, t, 0, l2, cmp);
        sortTo(a, 0, a, l2, l1, cmp);
        return merge(a, l2, l1, t, 0, l2, a, 0, cmp);
      }
      function stableSortInPlaceBy(a, cmp) {
        return stableSortInPlaceByU(a, Curry.__2(cmp));
      }
      function stableSortByU(a, cmp) {
        var b = a.slice(0);
        stableSortInPlaceByU(b, cmp);
        return b;
      }
      function stableSortBy(a, cmp) {
        return stableSortByU(a, Curry.__2(cmp));
      }
      function binarySearchByU(sorted, key, cmp) {
        var len = sorted.length;
        if (len === 0) {
          return -1;
        }
        var lo = sorted[0];
        var c = cmp(key, lo);
        if (c < 0) {
          return -1;
        }
        var hi = sorted[len - 1 | 0];
        var c2 = cmp(key, hi);
        if (c2 > 0) {
          return -(len + 1 | 0) | 0;
        } else {
          var _lo = 0;
          var _hi = len - 1 | 0;
          while (true) {
            var hi$1 = _hi;
            var lo$1 = _lo;
            var mid = (lo$1 + hi$1 | 0) / 2 | 0;
            var midVal = sorted[mid];
            var c$1 = cmp(key, midVal);
            if (c$1 === 0) {
              return mid;
            }
            if (c$1 < 0) {
              if (hi$1 === mid) {
                if (cmp(sorted[lo$1], key) === 0) {
                  return lo$1;
                } else {
                  return -(hi$1 + 1 | 0) | 0;
                }
              }
              _hi = mid;
              continue;
            }
            if (lo$1 === mid) {
              if (cmp(sorted[hi$1], key) === 0) {
                return hi$1;
              } else {
                return -(hi$1 + 1 | 0) | 0;
              }
            }
            _lo = mid;
            continue;
          }
          ;
        }
      }
      function binarySearchBy(sorted, key, cmp) {
        return binarySearchByU(sorted, key, Curry.__2(cmp));
      }
      var Int;
      var $$String;
      exports.Int = Int;
      exports.$$String = $$String;
      exports.strictlySortedLengthU = strictlySortedLengthU;
      exports.strictlySortedLength = strictlySortedLength;
      exports.isSortedU = isSortedU;
      exports.isSorted = isSorted;
      exports.stableSortInPlaceByU = stableSortInPlaceByU;
      exports.stableSortInPlaceBy = stableSortInPlaceBy;
      exports.stableSortByU = stableSortByU;
      exports.stableSortBy = stableSortBy;
      exports.binarySearchByU = binarySearchByU;
      exports.binarySearchBy = binarySearchBy;
      exports.unionU = unionU;
      exports.union = union;
      exports.intersectU = intersectU;
      exports.intersect = intersect;
      exports.diffU = diffU;
      exports.diff = diff;
    }
  });

  // node_modules/@rescript/std/lib/js/belt_List.js
  var require_belt_List = __commonJS({
    "node_modules/@rescript/std/lib/js/belt_List.js"(exports) {
      "use strict";
      var Curry = require_curry();
      var Belt_Array = require_belt_Array();
      var Caml_option = require_caml_option();
      var Belt_SortArray = require_belt_SortArray();
      function head(x) {
        if (x) {
          return Caml_option.some(x.hd);
        }
      }
      function headExn(x) {
        if (x) {
          return x.hd;
        }
        throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
      }
      function tail(x) {
        if (x) {
          return x.tl;
        }
      }
      function tailExn(x) {
        if (x) {
          return x.tl;
        }
        throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
      }
      function add(xs, x) {
        return {
          hd: x,
          tl: xs
        };
      }
      function get(x, n) {
        if (n < 0) {
          return;
        } else {
          var _x = x;
          var _n = n;
          while (true) {
            var n$1 = _n;
            var x$1 = _x;
            if (!x$1) {
              return;
            }
            if (n$1 === 0) {
              return Caml_option.some(x$1.hd);
            }
            _n = n$1 - 1 | 0;
            _x = x$1.tl;
            continue;
          }
          ;
        }
      }
      function getExn(x, n) {
        if (n < 0) {
          throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
        }
        var _x = x;
        var _n = n;
        while (true) {
          var n$1 = _n;
          var x$1 = _x;
          if (x$1) {
            if (n$1 === 0) {
              return x$1.hd;
            }
            _n = n$1 - 1 | 0;
            _x = x$1.tl;
            continue;
          }
          throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
        }
        ;
      }
      function partitionAux(p, _cell, _precX, _precY) {
        while (true) {
          var precY = _precY;
          var precX = _precX;
          var cell = _cell;
          if (!cell) {
            return;
          }
          var t = cell.tl;
          var h = cell.hd;
          var next = {
            hd: h,
            tl: 0
          };
          if (p(h)) {
            precX.tl = next;
            _precX = next;
            _cell = t;
            continue;
          }
          precY.tl = next;
          _precY = next;
          _cell = t;
          continue;
        }
        ;
      }
      function splitAux(_cell, _precX, _precY) {
        while (true) {
          var precY = _precY;
          var precX = _precX;
          var cell = _cell;
          if (!cell) {
            return;
          }
          var match = cell.hd;
          var nextA = {
            hd: match[0],
            tl: 0
          };
          var nextB = {
            hd: match[1],
            tl: 0
          };
          precX.tl = nextA;
          precY.tl = nextB;
          _precY = nextB;
          _precX = nextA;
          _cell = cell.tl;
          continue;
        }
        ;
      }
      function copyAuxCont(_cellX, _prec) {
        while (true) {
          var prec = _prec;
          var cellX = _cellX;
          if (!cellX) {
            return prec;
          }
          var next = {
            hd: cellX.hd,
            tl: 0
          };
          prec.tl = next;
          _prec = next;
          _cellX = cellX.tl;
          continue;
        }
        ;
      }
      function copyAuxWitFilter(f, _cellX, _prec) {
        while (true) {
          var prec = _prec;
          var cellX = _cellX;
          if (!cellX) {
            return;
          }
          var t = cellX.tl;
          var h = cellX.hd;
          if (f(h)) {
            var next = {
              hd: h,
              tl: 0
            };
            prec.tl = next;
            _prec = next;
            _cellX = t;
            continue;
          }
          _cellX = t;
          continue;
        }
        ;
      }
      function copyAuxWithFilterIndex(f, _cellX, _prec, _i) {
        while (true) {
          var i = _i;
          var prec = _prec;
          var cellX = _cellX;
          if (!cellX) {
            return;
          }
          var t = cellX.tl;
          var h = cellX.hd;
          if (f(h, i)) {
            var next = {
              hd: h,
              tl: 0
            };
            prec.tl = next;
            _i = i + 1 | 0;
            _prec = next;
            _cellX = t;
            continue;
          }
          _i = i + 1 | 0;
          _cellX = t;
          continue;
        }
        ;
      }
      function copyAuxWitFilterMap(f, _cellX, _prec) {
        while (true) {
          var prec = _prec;
          var cellX = _cellX;
          if (!cellX) {
            return;
          }
          var t = cellX.tl;
          var h = f(cellX.hd);
          if (h !== void 0) {
            var next = {
              hd: Caml_option.valFromOption(h),
              tl: 0
            };
            prec.tl = next;
            _prec = next;
            _cellX = t;
            continue;
          }
          _cellX = t;
          continue;
        }
        ;
      }
      function removeAssocAuxWithMap(_cellX, x, _prec, f) {
        while (true) {
          var prec = _prec;
          var cellX = _cellX;
          if (!cellX) {
            return false;
          }
          var t = cellX.tl;
          var h = cellX.hd;
          if (f(h[0], x)) {
            prec.tl = t;
            return true;
          }
          var next = {
            hd: h,
            tl: 0
          };
          prec.tl = next;
          _prec = next;
          _cellX = t;
          continue;
        }
        ;
      }
      function setAssocAuxWithMap(_cellX, x, k, _prec, eq2) {
        while (true) {
          var prec = _prec;
          var cellX = _cellX;
          if (!cellX) {
            return false;
          }
          var t = cellX.tl;
          var h = cellX.hd;
          if (eq2(h[0], x)) {
            prec.tl = {
              hd: [
                x,
                k
              ],
              tl: t
            };
            return true;
          }
          var next = {
            hd: h,
            tl: 0
          };
          prec.tl = next;
          _prec = next;
          _cellX = t;
          continue;
        }
        ;
      }
      function copyAuxWithMap(_cellX, _prec, f) {
        while (true) {
          var prec = _prec;
          var cellX = _cellX;
          if (!cellX) {
            return;
          }
          var next = {
            hd: f(cellX.hd),
            tl: 0
          };
          prec.tl = next;
          _prec = next;
          _cellX = cellX.tl;
          continue;
        }
        ;
      }
      function zipAux(_cellX, _cellY, _prec) {
        while (true) {
          var prec = _prec;
          var cellY = _cellY;
          var cellX = _cellX;
          if (!cellX) {
            return;
          }
          if (!cellY) {
            return;
          }
          var next = {
            hd: [
              cellX.hd,
              cellY.hd
            ],
            tl: 0
          };
          prec.tl = next;
          _prec = next;
          _cellY = cellY.tl;
          _cellX = cellX.tl;
          continue;
        }
        ;
      }
      function copyAuxWithMap2(f, _cellX, _cellY, _prec) {
        while (true) {
          var prec = _prec;
          var cellY = _cellY;
          var cellX = _cellX;
          if (!cellX) {
            return;
          }
          if (!cellY) {
            return;
          }
          var next = {
            hd: f(cellX.hd, cellY.hd),
            tl: 0
          };
          prec.tl = next;
          _prec = next;
          _cellY = cellY.tl;
          _cellX = cellX.tl;
          continue;
        }
        ;
      }
      function copyAuxWithMapI(f, _i, _cellX, _prec) {
        while (true) {
          var prec = _prec;
          var cellX = _cellX;
          var i = _i;
          if (!cellX) {
            return;
          }
          var next = {
            hd: f(i, cellX.hd),
            tl: 0
          };
          prec.tl = next;
          _prec = next;
          _cellX = cellX.tl;
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      function takeAux(_n, _cell, _prec) {
        while (true) {
          var prec = _prec;
          var cell = _cell;
          var n = _n;
          if (n === 0) {
            return true;
          }
          if (!cell) {
            return false;
          }
          var cell$1 = {
            hd: cell.hd,
            tl: 0
          };
          prec.tl = cell$1;
          _prec = cell$1;
          _cell = cell.tl;
          _n = n - 1 | 0;
          continue;
        }
        ;
      }
      function splitAtAux(_n, _cell, _prec) {
        while (true) {
          var prec = _prec;
          var cell = _cell;
          var n = _n;
          if (n === 0) {
            return cell;
          }
          if (!cell) {
            return;
          }
          var cell$1 = {
            hd: cell.hd,
            tl: 0
          };
          prec.tl = cell$1;
          _prec = cell$1;
          _cell = cell.tl;
          _n = n - 1 | 0;
          continue;
        }
        ;
      }
      function take(lst, n) {
        if (n < 0) {
          return;
        }
        if (n === 0) {
          return 0;
        }
        if (!lst) {
          return;
        }
        var cell = {
          hd: lst.hd,
          tl: 0
        };
        var has2 = takeAux(n - 1 | 0, lst.tl, cell);
        if (has2) {
          return cell;
        }
      }
      function drop(lst, n) {
        if (n < 0) {
          return;
        } else {
          var _l = lst;
          var _n = n;
          while (true) {
            var n$1 = _n;
            var l = _l;
            if (n$1 === 0) {
              return l;
            }
            if (!l) {
              return;
            }
            _n = n$1 - 1 | 0;
            _l = l.tl;
            continue;
          }
          ;
        }
      }
      function splitAt(lst, n) {
        if (n < 0) {
          return;
        }
        if (n === 0) {
          return [
            0,
            lst
          ];
        }
        if (!lst) {
          return;
        }
        var cell = {
          hd: lst.hd,
          tl: 0
        };
        var rest = splitAtAux(n - 1 | 0, lst.tl, cell);
        if (rest !== void 0) {
          return [
            cell,
            rest
          ];
        }
      }
      function concat(xs, ys) {
        if (!xs) {
          return ys;
        }
        var cell = {
          hd: xs.hd,
          tl: 0
        };
        copyAuxCont(xs.tl, cell).tl = ys;
        return cell;
      }
      function mapU(xs, f) {
        if (!xs) {
          return 0;
        }
        var cell = {
          hd: f(xs.hd),
          tl: 0
        };
        copyAuxWithMap(xs.tl, cell, f);
        return cell;
      }
      function map(xs, f) {
        return mapU(xs, Curry.__1(f));
      }
      function zipByU(l1, l2, f) {
        if (!l1) {
          return 0;
        }
        if (!l2) {
          return 0;
        }
        var cell = {
          hd: f(l1.hd, l2.hd),
          tl: 0
        };
        copyAuxWithMap2(f, l1.tl, l2.tl, cell);
        return cell;
      }
      function zipBy(l1, l2, f) {
        return zipByU(l1, l2, Curry.__2(f));
      }
      function mapWithIndexU(xs, f) {
        if (!xs) {
          return 0;
        }
        var cell = {
          hd: f(0, xs.hd),
          tl: 0
        };
        copyAuxWithMapI(f, 1, xs.tl, cell);
        return cell;
      }
      function mapWithIndex(xs, f) {
        return mapWithIndexU(xs, Curry.__2(f));
      }
      function makeByU(n, f) {
        if (n <= 0) {
          return 0;
        }
        var headX = {
          hd: f(0),
          tl: 0
        };
        var cur = headX;
        var i = 1;
        while (i < n) {
          var v = {
            hd: f(i),
            tl: 0
          };
          cur.tl = v;
          cur = v;
          i = i + 1 | 0;
        }
        ;
        return headX;
      }
      function makeBy(n, f) {
        return makeByU(n, Curry.__1(f));
      }
      function make(n, v) {
        if (n <= 0) {
          return 0;
        }
        var headX = {
          hd: v,
          tl: 0
        };
        var cur = headX;
        var i = 1;
        while (i < n) {
          var v$1 = {
            hd: v,
            tl: 0
          };
          cur.tl = v$1;
          cur = v$1;
          i = i + 1 | 0;
        }
        ;
        return headX;
      }
      function length(xs) {
        var _x = xs;
        var _acc = 0;
        while (true) {
          var acc = _acc;
          var x = _x;
          if (!x) {
            return acc;
          }
          _acc = acc + 1 | 0;
          _x = x.tl;
          continue;
        }
        ;
      }
      function fillAux(arr, _i, _x) {
        while (true) {
          var x = _x;
          var i = _i;
          if (!x) {
            return;
          }
          arr[i] = x.hd;
          _x = x.tl;
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      function fromArray(a) {
        var _i = a.length - 1 | 0;
        var _res = 0;
        while (true) {
          var res = _res;
          var i = _i;
          if (i < 0) {
            return res;
          }
          _res = {
            hd: a[i],
            tl: res
          };
          _i = i - 1 | 0;
          continue;
        }
        ;
      }
      function toArray(x) {
        var len = length(x);
        var arr = new Array(len);
        fillAux(arr, 0, x);
        return arr;
      }
      function shuffle(xs) {
        var v = toArray(xs);
        Belt_Array.shuffleInPlace(v);
        return fromArray(v);
      }
      function reverseConcat(_l1, _l2) {
        while (true) {
          var l2 = _l2;
          var l1 = _l1;
          if (!l1) {
            return l2;
          }
          _l2 = {
            hd: l1.hd,
            tl: l2
          };
          _l1 = l1.tl;
          continue;
        }
        ;
      }
      function reverse(l) {
        return reverseConcat(l, 0);
      }
      function flattenAux(_prec, _xs) {
        while (true) {
          var xs = _xs;
          var prec = _prec;
          if (xs) {
            _xs = xs.tl;
            _prec = copyAuxCont(xs.hd, prec);
            continue;
          }
          prec.tl = 0;
          return;
        }
        ;
      }
      function flatten(_xs) {
        while (true) {
          var xs = _xs;
          if (!xs) {
            return 0;
          }
          var match = xs.hd;
          if (match) {
            var cell = {
              hd: match.hd,
              tl: 0
            };
            flattenAux(copyAuxCont(match.tl, cell), xs.tl);
            return cell;
          }
          _xs = xs.tl;
          continue;
        }
        ;
      }
      function concatMany(xs) {
        var len = xs.length;
        if (len === 1) {
          return xs[0];
        }
        if (len === 0) {
          return 0;
        }
        var len$1 = xs.length;
        var v = xs[len$1 - 1 | 0];
        for (var i = len$1 - 2 | 0; i >= 0; --i) {
          v = concat(xs[i], v);
        }
        return v;
      }
      function mapReverseU(l, f) {
        var _accu = 0;
        var _xs = l;
        while (true) {
          var xs = _xs;
          var accu = _accu;
          if (!xs) {
            return accu;
          }
          _xs = xs.tl;
          _accu = {
            hd: f(xs.hd),
            tl: accu
          };
          continue;
        }
        ;
      }
      function mapReverse(l, f) {
        return mapReverseU(l, Curry.__1(f));
      }
      function forEachU(_xs, f) {
        while (true) {
          var xs = _xs;
          if (!xs) {
            return;
          }
          f(xs.hd);
          _xs = xs.tl;
          continue;
        }
        ;
      }
      function forEach(xs, f) {
        return forEachU(xs, Curry.__1(f));
      }
      function forEachWithIndexU(l, f) {
        var _xs = l;
        var _i = 0;
        while (true) {
          var i = _i;
          var xs = _xs;
          if (!xs) {
            return;
          }
          f(i, xs.hd);
          _i = i + 1 | 0;
          _xs = xs.tl;
          continue;
        }
        ;
      }
      function forEachWithIndex(l, f) {
        return forEachWithIndexU(l, Curry.__2(f));
      }
      function reduceU(_l, _accu, f) {
        while (true) {
          var accu = _accu;
          var l = _l;
          if (!l) {
            return accu;
          }
          _accu = f(accu, l.hd);
          _l = l.tl;
          continue;
        }
        ;
      }
      function reduce(l, accu, f) {
        return reduceU(l, accu, Curry.__2(f));
      }
      function reduceReverseUnsafeU(l, accu, f) {
        if (l) {
          return f(reduceReverseUnsafeU(l.tl, accu, f), l.hd);
        } else {
          return accu;
        }
      }
      function reduceReverseU(l, acc, f) {
        var len = length(l);
        if (len < 1e3) {
          return reduceReverseUnsafeU(l, acc, f);
        } else {
          return Belt_Array.reduceReverseU(toArray(l), acc, f);
        }
      }
      function reduceReverse(l, accu, f) {
        return reduceReverseU(l, accu, Curry.__2(f));
      }
      function reduceWithIndexU(l, acc, f) {
        var _l = l;
        var _acc = acc;
        var _i = 0;
        while (true) {
          var i = _i;
          var acc$1 = _acc;
          var l$1 = _l;
          if (!l$1) {
            return acc$1;
          }
          _i = i + 1 | 0;
          _acc = f(acc$1, l$1.hd, i);
          _l = l$1.tl;
          continue;
        }
        ;
      }
      function reduceWithIndex(l, acc, f) {
        return reduceWithIndexU(l, acc, Curry.__3(f));
      }
      function mapReverse2U(l1, l2, f) {
        var _l1 = l1;
        var _l2 = l2;
        var _accu = 0;
        while (true) {
          var accu = _accu;
          var l2$1 = _l2;
          var l1$1 = _l1;
          if (!l1$1) {
            return accu;
          }
          if (!l2$1) {
            return accu;
          }
          _accu = {
            hd: f(l1$1.hd, l2$1.hd),
            tl: accu
          };
          _l2 = l2$1.tl;
          _l1 = l1$1.tl;
          continue;
        }
        ;
      }
      function mapReverse2(l1, l2, f) {
        return mapReverse2U(l1, l2, Curry.__2(f));
      }
      function forEach2U(_l1, _l2, f) {
        while (true) {
          var l2 = _l2;
          var l1 = _l1;
          if (!l1) {
            return;
          }
          if (!l2) {
            return;
          }
          f(l1.hd, l2.hd);
          _l2 = l2.tl;
          _l1 = l1.tl;
          continue;
        }
        ;
      }
      function forEach2(l1, l2, f) {
        return forEach2U(l1, l2, Curry.__2(f));
      }
      function reduce2U(_l1, _l2, _accu, f) {
        while (true) {
          var accu = _accu;
          var l2 = _l2;
          var l1 = _l1;
          if (!l1) {
            return accu;
          }
          if (!l2) {
            return accu;
          }
          _accu = f(accu, l1.hd, l2.hd);
          _l2 = l2.tl;
          _l1 = l1.tl;
          continue;
        }
        ;
      }
      function reduce2(l1, l2, acc, f) {
        return reduce2U(l1, l2, acc, Curry.__3(f));
      }
      function reduceReverse2UnsafeU(l1, l2, accu, f) {
        if (l1 && l2) {
          return f(reduceReverse2UnsafeU(l1.tl, l2.tl, accu, f), l1.hd, l2.hd);
        } else {
          return accu;
        }
      }
      function reduceReverse2U(l1, l2, acc, f) {
        var len = length(l1);
        if (len < 1e3) {
          return reduceReverse2UnsafeU(l1, l2, acc, f);
        } else {
          return Belt_Array.reduceReverse2U(toArray(l1), toArray(l2), acc, f);
        }
      }
      function reduceReverse2(l1, l2, acc, f) {
        return reduceReverse2U(l1, l2, acc, Curry.__3(f));
      }
      function everyU(_xs, p) {
        while (true) {
          var xs = _xs;
          if (!xs) {
            return true;
          }
          if (!p(xs.hd)) {
            return false;
          }
          _xs = xs.tl;
          continue;
        }
        ;
      }
      function every(xs, p) {
        return everyU(xs, Curry.__1(p));
      }
      function someU(_xs, p) {
        while (true) {
          var xs = _xs;
          if (!xs) {
            return false;
          }
          if (p(xs.hd)) {
            return true;
          }
          _xs = xs.tl;
          continue;
        }
        ;
      }
      function some(xs, p) {
        return someU(xs, Curry.__1(p));
      }
      function every2U(_l1, _l2, p) {
        while (true) {
          var l2 = _l2;
          var l1 = _l1;
          if (!l1) {
            return true;
          }
          if (!l2) {
            return true;
          }
          if (!p(l1.hd, l2.hd)) {
            return false;
          }
          _l2 = l2.tl;
          _l1 = l1.tl;
          continue;
        }
        ;
      }
      function every2(l1, l2, p) {
        return every2U(l1, l2, Curry.__2(p));
      }
      function cmpByLength(_l1, _l2) {
        while (true) {
          var l2 = _l2;
          var l1 = _l1;
          if (!l1) {
            if (l2) {
              return -1;
            } else {
              return 0;
            }
          }
          if (!l2) {
            return 1;
          }
          _l2 = l2.tl;
          _l1 = l1.tl;
          continue;
        }
        ;
      }
      function cmpU(_l1, _l2, p) {
        while (true) {
          var l2 = _l2;
          var l1 = _l1;
          if (!l1) {
            if (l2) {
              return -1;
            } else {
              return 0;
            }
          }
          if (!l2) {
            return 1;
          }
          var c = p(l1.hd, l2.hd);
          if (c !== 0) {
            return c;
          }
          _l2 = l2.tl;
          _l1 = l1.tl;
          continue;
        }
        ;
      }
      function cmp(l1, l2, f) {
        return cmpU(l1, l2, Curry.__2(f));
      }
      function eqU(_l1, _l2, p) {
        while (true) {
          var l2 = _l2;
          var l1 = _l1;
          if (!l1) {
            if (l2) {
              return false;
            } else {
              return true;
            }
          }
          if (!l2) {
            return false;
          }
          if (!p(l1.hd, l2.hd)) {
            return false;
          }
          _l2 = l2.tl;
          _l1 = l1.tl;
          continue;
        }
        ;
      }
      function eq(l1, l2, f) {
        return eqU(l1, l2, Curry.__2(f));
      }
      function some2U(_l1, _l2, p) {
        while (true) {
          var l2 = _l2;
          var l1 = _l1;
          if (!l1) {
            return false;
          }
          if (!l2) {
            return false;
          }
          if (p(l1.hd, l2.hd)) {
            return true;
          }
          _l2 = l2.tl;
          _l1 = l1.tl;
          continue;
        }
        ;
      }
      function some2(l1, l2, p) {
        return some2U(l1, l2, Curry.__2(p));
      }
      function hasU(_xs, x, eq2) {
        while (true) {
          var xs = _xs;
          if (!xs) {
            return false;
          }
          if (eq2(xs.hd, x)) {
            return true;
          }
          _xs = xs.tl;
          continue;
        }
        ;
      }
      function has(xs, x, eq2) {
        return hasU(xs, x, Curry.__2(eq2));
      }
      function getAssocU(_xs, x, eq2) {
        while (true) {
          var xs = _xs;
          if (!xs) {
            return;
          }
          var match = xs.hd;
          if (eq2(match[0], x)) {
            return Caml_option.some(match[1]);
          }
          _xs = xs.tl;
          continue;
        }
        ;
      }
      function getAssoc(xs, x, eq2) {
        return getAssocU(xs, x, Curry.__2(eq2));
      }
      function hasAssocU(_xs, x, eq2) {
        while (true) {
          var xs = _xs;
          if (!xs) {
            return false;
          }
          if (eq2(xs.hd[0], x)) {
            return true;
          }
          _xs = xs.tl;
          continue;
        }
        ;
      }
      function hasAssoc(xs, x, eq2) {
        return hasAssocU(xs, x, Curry.__2(eq2));
      }
      function removeAssocU(xs, x, eq2) {
        if (!xs) {
          return 0;
        }
        var l = xs.tl;
        var pair = xs.hd;
        if (eq2(pair[0], x)) {
          return l;
        }
        var cell = {
          hd: pair,
          tl: 0
        };
        var removed = removeAssocAuxWithMap(l, x, cell, eq2);
        if (removed) {
          return cell;
        } else {
          return xs;
        }
      }
      function removeAssoc(xs, x, eq2) {
        return removeAssocU(xs, x, Curry.__2(eq2));
      }
      function setAssocU(xs, x, k, eq2) {
        if (!xs) {
          return {
            hd: [
              x,
              k
            ],
            tl: 0
          };
        }
        var l = xs.tl;
        var pair = xs.hd;
        if (eq2(pair[0], x)) {
          return {
            hd: [
              x,
              k
            ],
            tl: l
          };
        }
        var cell = {
          hd: pair,
          tl: 0
        };
        var replaced = setAssocAuxWithMap(l, x, k, cell, eq2);
        if (replaced) {
          return cell;
        } else {
          return {
            hd: [
              x,
              k
            ],
            tl: xs
          };
        }
      }
      function setAssoc(xs, x, k, eq2) {
        return setAssocU(xs, x, k, Curry.__2(eq2));
      }
      function sortU(xs, cmp2) {
        var arr = toArray(xs);
        Belt_SortArray.stableSortInPlaceByU(arr, cmp2);
        return fromArray(arr);
      }
      function sort(xs, cmp2) {
        return sortU(xs, Curry.__2(cmp2));
      }
      function getByU(_xs, p) {
        while (true) {
          var xs = _xs;
          if (!xs) {
            return;
          }
          var x = xs.hd;
          if (p(x)) {
            return Caml_option.some(x);
          }
          _xs = xs.tl;
          continue;
        }
        ;
      }
      function getBy(xs, p) {
        return getByU(xs, Curry.__1(p));
      }
      function keepU(_xs, p) {
        while (true) {
          var xs = _xs;
          if (!xs) {
            return 0;
          }
          var t = xs.tl;
          var h = xs.hd;
          if (p(h)) {
            var cell = {
              hd: h,
              tl: 0
            };
            copyAuxWitFilter(p, t, cell);
            return cell;
          }
          _xs = t;
          continue;
        }
        ;
      }
      function keep(xs, p) {
        return keepU(xs, Curry.__1(p));
      }
      function keepWithIndexU(xs, p) {
        var _xs = xs;
        var _i = 0;
        while (true) {
          var i = _i;
          var xs$1 = _xs;
          if (!xs$1) {
            return 0;
          }
          var t = xs$1.tl;
          var h = xs$1.hd;
          if (p(h, i)) {
            var cell = {
              hd: h,
              tl: 0
            };
            copyAuxWithFilterIndex(p, t, cell, i + 1 | 0);
            return cell;
          }
          _i = i + 1 | 0;
          _xs = t;
          continue;
        }
        ;
      }
      function keepWithIndex(xs, p) {
        return keepWithIndexU(xs, Curry.__2(p));
      }
      function keepMapU(_xs, p) {
        while (true) {
          var xs = _xs;
          if (!xs) {
            return 0;
          }
          var t = xs.tl;
          var h = p(xs.hd);
          if (h !== void 0) {
            var cell = {
              hd: Caml_option.valFromOption(h),
              tl: 0
            };
            copyAuxWitFilterMap(p, t, cell);
            return cell;
          }
          _xs = t;
          continue;
        }
        ;
      }
      function keepMap(xs, p) {
        return keepMapU(xs, Curry.__1(p));
      }
      function partitionU(l, p) {
        if (!l) {
          return [
            0,
            0
          ];
        }
        var h = l.hd;
        var nextX = {
          hd: h,
          tl: 0
        };
        var nextY = {
          hd: h,
          tl: 0
        };
        var b = p(h);
        partitionAux(p, l.tl, nextX, nextY);
        if (b) {
          return [
            nextX,
            nextY.tl
          ];
        } else {
          return [
            nextX.tl,
            nextY
          ];
        }
      }
      function partition(l, p) {
        return partitionU(l, Curry.__1(p));
      }
      function unzip(xs) {
        if (!xs) {
          return [
            0,
            0
          ];
        }
        var match = xs.hd;
        var cellX = {
          hd: match[0],
          tl: 0
        };
        var cellY = {
          hd: match[1],
          tl: 0
        };
        splitAux(xs.tl, cellX, cellY);
        return [
          cellX,
          cellY
        ];
      }
      function zip(l1, l2) {
        if (!l1) {
          return 0;
        }
        if (!l2) {
          return 0;
        }
        var cell = {
          hd: [
            l1.hd,
            l2.hd
          ],
          tl: 0
        };
        zipAux(l1.tl, l2.tl, cell);
        return cell;
      }
      var size = length;
      var filter = keep;
      var filterWithIndex = keepWithIndex;
      exports.length = length;
      exports.size = size;
      exports.head = head;
      exports.headExn = headExn;
      exports.tail = tail;
      exports.tailExn = tailExn;
      exports.add = add;
      exports.get = get;
      exports.getExn = getExn;
      exports.make = make;
      exports.makeByU = makeByU;
      exports.makeBy = makeBy;
      exports.shuffle = shuffle;
      exports.drop = drop;
      exports.take = take;
      exports.splitAt = splitAt;
      exports.concat = concat;
      exports.concatMany = concatMany;
      exports.reverseConcat = reverseConcat;
      exports.flatten = flatten;
      exports.mapU = mapU;
      exports.map = map;
      exports.zip = zip;
      exports.zipByU = zipByU;
      exports.zipBy = zipBy;
      exports.mapWithIndexU = mapWithIndexU;
      exports.mapWithIndex = mapWithIndex;
      exports.fromArray = fromArray;
      exports.toArray = toArray;
      exports.reverse = reverse;
      exports.mapReverseU = mapReverseU;
      exports.mapReverse = mapReverse;
      exports.forEachU = forEachU;
      exports.forEach = forEach;
      exports.forEachWithIndexU = forEachWithIndexU;
      exports.forEachWithIndex = forEachWithIndex;
      exports.reduceU = reduceU;
      exports.reduce = reduce;
      exports.reduceWithIndexU = reduceWithIndexU;
      exports.reduceWithIndex = reduceWithIndex;
      exports.reduceReverseU = reduceReverseU;
      exports.reduceReverse = reduceReverse;
      exports.mapReverse2U = mapReverse2U;
      exports.mapReverse2 = mapReverse2;
      exports.forEach2U = forEach2U;
      exports.forEach2 = forEach2;
      exports.reduce2U = reduce2U;
      exports.reduce2 = reduce2;
      exports.reduceReverse2U = reduceReverse2U;
      exports.reduceReverse2 = reduceReverse2;
      exports.everyU = everyU;
      exports.every = every;
      exports.someU = someU;
      exports.some = some;
      exports.every2U = every2U;
      exports.every2 = every2;
      exports.some2U = some2U;
      exports.some2 = some2;
      exports.cmpByLength = cmpByLength;
      exports.cmpU = cmpU;
      exports.cmp = cmp;
      exports.eqU = eqU;
      exports.eq = eq;
      exports.hasU = hasU;
      exports.has = has;
      exports.getByU = getByU;
      exports.getBy = getBy;
      exports.keepU = keepU;
      exports.keep = keep;
      exports.filter = filter;
      exports.keepWithIndexU = keepWithIndexU;
      exports.keepWithIndex = keepWithIndex;
      exports.filterWithIndex = filterWithIndex;
      exports.keepMapU = keepMapU;
      exports.keepMap = keepMap;
      exports.partitionU = partitionU;
      exports.partition = partition;
      exports.unzip = unzip;
      exports.getAssocU = getAssocU;
      exports.getAssoc = getAssoc;
      exports.hasAssocU = hasAssocU;
      exports.hasAssoc = hasAssoc;
      exports.removeAssocU = removeAssocU;
      exports.removeAssoc = removeAssoc;
      exports.setAssocU = setAssocU;
      exports.setAssoc = setAssoc;
      exports.sortU = sortU;
      exports.sort = sort;
    }
  });

  // node_modules/@rescript/std/lib/js/belt_Option.js
  var require_belt_Option = __commonJS({
    "node_modules/@rescript/std/lib/js/belt_Option.js"(exports) {
      "use strict";
      var Curry = require_curry();
      var Caml_option = require_caml_option();
      function keepU(opt, p) {
        if (opt !== void 0 && p(Caml_option.valFromOption(opt))) {
          return opt;
        }
      }
      function keep(opt, p) {
        return keepU(opt, Curry.__1(p));
      }
      function forEachU(opt, f) {
        if (opt !== void 0) {
          return f(Caml_option.valFromOption(opt));
        }
      }
      function forEach(opt, f) {
        return forEachU(opt, Curry.__1(f));
      }
      function getExn(x) {
        if (x !== void 0) {
          return Caml_option.valFromOption(x);
        }
        throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
      }
      function mapWithDefaultU(opt, $$default, f) {
        if (opt !== void 0) {
          return f(Caml_option.valFromOption(opt));
        } else {
          return $$default;
        }
      }
      function mapWithDefault(opt, $$default, f) {
        return mapWithDefaultU(opt, $$default, Curry.__1(f));
      }
      function mapU(opt, f) {
        if (opt !== void 0) {
          return Caml_option.some(f(Caml_option.valFromOption(opt)));
        }
      }
      function map(opt, f) {
        return mapU(opt, Curry.__1(f));
      }
      function flatMapU(opt, f) {
        if (opt !== void 0) {
          return f(Caml_option.valFromOption(opt));
        }
      }
      function flatMap(opt, f) {
        return flatMapU(opt, Curry.__1(f));
      }
      function getWithDefault(opt, $$default) {
        if (opt !== void 0) {
          return Caml_option.valFromOption(opt);
        } else {
          return $$default;
        }
      }
      function isSome(param) {
        return param !== void 0;
      }
      function isNone(x) {
        return x === void 0;
      }
      function eqU(a, b, f) {
        if (a !== void 0) {
          if (b !== void 0) {
            return f(Caml_option.valFromOption(a), Caml_option.valFromOption(b));
          } else {
            return false;
          }
        } else {
          return b === void 0;
        }
      }
      function eq(a, b, f) {
        return eqU(a, b, Curry.__2(f));
      }
      function cmpU(a, b, f) {
        if (a !== void 0) {
          if (b !== void 0) {
            return f(Caml_option.valFromOption(a), Caml_option.valFromOption(b));
          } else {
            return 1;
          }
        } else if (b !== void 0) {
          return -1;
        } else {
          return 0;
        }
      }
      function cmp(a, b, f) {
        return cmpU(a, b, Curry.__2(f));
      }
      exports.keepU = keepU;
      exports.keep = keep;
      exports.forEachU = forEachU;
      exports.forEach = forEach;
      exports.getExn = getExn;
      exports.mapWithDefaultU = mapWithDefaultU;
      exports.mapWithDefault = mapWithDefault;
      exports.mapU = mapU;
      exports.map = map;
      exports.flatMapU = flatMapU;
      exports.flatMap = flatMap;
      exports.getWithDefault = getWithDefault;
      exports.isSome = isSome;
      exports.isNone = isNone;
      exports.eqU = eqU;
      exports.eq = eq;
      exports.cmpU = cmpU;
      exports.cmp = cmp;
    }
  });

  // node_modules/@minima.app/re-css/src/Css.bs.js
  var require_Css_bs = __commonJS({
    "node_modules/@minima.app/re-css/src/Css.bs.js"(exports) {
      "use strict";
      var Belt_List = require_belt_List();
      var Belt_Option = require_belt_Option();
      function joinWith(strings, separator) {
        var _strings = strings;
        var _acc = "";
        while (true) {
          var acc = _acc;
          var strings$1 = _strings;
          if (!strings$1) {
            return acc;
          }
          var xs = strings$1.tl;
          var x = strings$1.hd;
          if (!xs) {
            return acc + x;
          }
          _acc = acc + (x + separator);
          _strings = xs;
          continue;
        }
        ;
      }
      var Helpers = {
        joinWith
      };
      function $plus(a, b) {
        return {
          NAME: "calc",
          VAL: [
            "add",
            a,
            b
          ]
        };
      }
      function $neg(a, b) {
        return {
          NAME: "calc",
          VAL: [
            "sub",
            a,
            b
          ]
        };
      }
      function $star(a, b) {
        return {
          NAME: "calc",
          VAL: [
            "mult",
            a,
            b
          ]
        };
      }
      function $slash(a, b) {
        return {
          NAME: "calc",
          VAL: [
            "div",
            a,
            b
          ]
        };
      }
      function opToString(x) {
        if (x === "add") {
          return "+";
        } else if (x === "div") {
          return "/";
        } else if (x === "sub") {
          return "-";
        } else {
          return "*";
        }
      }
      function numToString(x) {
        return "" + x.VAL;
      }
      var Calc = {
        $plus,
        $neg,
        $star,
        $slash,
        opToString,
        numToString
      };
      function toString(x) {
        if (typeof x === "string") {
          return "0";
        }
        var variant = x.NAME;
        if (variant === "vmax") {
          return "" + x.VAL + "vmax";
        } else if (variant === "vmin") {
          return "" + x.VAL + "vmin";
        } else if (variant === "q") {
          return "" + x.VAL + "Q";
        } else if (variant === "ch") {
          return "" + x.VAL + "ch";
        } else if (variant === "cm") {
          return "" + x.VAL + "cm";
        } else if (variant === "em") {
          return "" + x.VAL + "em";
        } else if (variant === "ex") {
          return "" + x.VAL + "ex";
        } else if (variant === "mm") {
          return "" + x.VAL + "mm";
        } else if (variant === "pc") {
          return "" + x.VAL + "pc";
        } else if (variant === "pt") {
          return "" + x.VAL + "pt";
        } else if (variant === "px") {
          return "" + x.VAL + "px";
        } else if (variant === "vh") {
          return "" + x.VAL + "vh";
        } else if (variant === "vw") {
          return "" + x.VAL + "vw";
        } else if (variant === "rem") {
          return "" + x.VAL + "rem";
        } else {
          return "" + x.VAL + "in";
        }
      }
      var LengthUnit = {
        toString
      };
      function operandToString(x) {
        if (typeof x === "string") {
          return toString(x);
        }
        var variant = x.NAME;
        if (variant === "rem" || variant === "vw" || variant === "vh" || variant === "px" || variant === "pt" || variant === "pc" || variant === "mm" || variant === "ex" || variant === "em" || variant === "cm" || variant === "ch" || variant === "q" || variant === "vmin" || variant === "vmax" || variant === "inch") {
          return toString(x);
        }
        if (variant === "n") {
          return numToString(x);
        }
        var match = x.VAL;
        var op = opToString(match[0]);
        var a = operandToString(match[1]);
        var b = operandToString(match[2]);
        return "calc(" + a + " " + op + " " + b + ")";
      }
      function toString$1(x) {
        if (typeof x === "string") {
          return toString(x);
        }
        var variant = x.NAME;
        if (variant === "rem" || variant === "vw" || variant === "vh" || variant === "px" || variant === "pt" || variant === "pc" || variant === "mm" || variant === "ex" || variant === "em" || variant === "cm" || variant === "ch" || variant === "q" || variant === "vmin" || variant === "vmax" || variant === "inch") {
          return toString(x);
        }
        var match = x.VAL;
        var op = opToString(match[0]);
        var a = operandToString(match[1]);
        var b = operandToString(match[2]);
        return "calc(" + a + " " + op + " " + b + ")";
      }
      function toString2(a, b) {
        var a$1 = toString$1(a);
        var b$1 = toString$1(b);
        return "" + a$1 + " " + b$1;
      }
      var Length = {
        operandToString,
        toString: toString$1,
        toString2
      };
      function toString$2(x) {
        return "" + x.VAL + "%";
      }
      var PercentageUnit = {
        toString: toString$2
      };
      function operandToString$1(x) {
        var variant = x.NAME;
        if (variant === "n") {
          return numToString(x);
        }
        if (variant === "pct") {
          return toString$2(x);
        }
        var match = x.VAL;
        var op = opToString(match[0]);
        var a = operandToString$1(match[1]);
        var b = operandToString$1(match[2]);
        return "calc(" + a + " " + op + " " + b + ")";
      }
      function toString$3(x) {
        if (x.NAME === "pct") {
          return toString$2(x);
        }
        var match = x.VAL;
        var op = opToString(match[0]);
        var a = operandToString$1(match[1]);
        var b = operandToString$1(match[2]);
        return "calc(" + a + " " + op + " " + b + ")";
      }
      var Percentage = {
        operandToString: operandToString$1,
        toString: toString$3
      };
      function operandToString$2(x) {
        if (typeof x === "string") {
          return toString(x);
        }
        var variant = x.NAME;
        if (variant === "rem" || variant === "vw" || variant === "vh" || variant === "px" || variant === "pt" || variant === "pc" || variant === "mm" || variant === "ex" || variant === "em" || variant === "cm" || variant === "ch" || variant === "q" || variant === "vmin" || variant === "vmax" || variant === "inch") {
          return toString(x);
        }
        if (variant === "n") {
          return numToString(x);
        }
        if (variant === "pct") {
          return toString$2(x);
        }
        var match = x.VAL;
        var op = opToString(match[0]);
        var a = operandToString$2(match[1]);
        var b = operandToString$2(match[2]);
        return "calc(" + a + " " + op + " " + b + ")";
      }
      function toString$4(x) {
        if (typeof x === "string") {
          return toString(x);
        }
        var variant = x.NAME;
        if (variant === "rem" || variant === "vw" || variant === "vh" || variant === "px" || variant === "pt" || variant === "pc" || variant === "mm" || variant === "ex" || variant === "em" || variant === "cm" || variant === "ch" || variant === "q" || variant === "vmin" || variant === "vmax" || variant === "inch") {
          return toString(x);
        }
        if (variant === "pct") {
          return toString$2(x);
        }
        var match = x.VAL;
        var op = opToString(match[0]);
        var a = operandToString$2(match[1]);
        var b = operandToString$2(match[2]);
        return "calc(" + a + " " + op + " " + b + ")";
      }
      function toString2$1(a, b) {
        var a$1 = toString$4(a);
        var b$1 = toString$4(b);
        return "" + a$1 + " " + b$1;
      }
      function toString3(a, b, c) {
        var a$1 = toString$4(a);
        var b$1 = toString$4(b);
        var c$1 = toString$4(c);
        return "" + a$1 + " " + b$1 + " " + c$1;
      }
      function toString4(a, b, c, d) {
        var a$1 = toString$4(a);
        var b$1 = toString$4(b);
        var c$1 = toString$4(c);
        var d$1 = toString$4(d);
        return "" + a$1 + " " + b$1 + " " + c$1 + " " + d$1;
      }
      var LengthPercentage = {
        operandToString: operandToString$2,
        toString: toString$4,
        toString2: toString2$1,
        toString3,
        toString4
      };
      function toString$5(x) {
        if (typeof x === "string" && x !== "zero") {
          return "auto";
        } else {
          return toString$4(x);
        }
      }
      function toString2$2(a, b) {
        var a$1 = toString$5(a);
        var b$1 = toString$5(b);
        return "" + a$1 + " " + b$1;
      }
      function toString3$1(a, b, c) {
        var a$1 = toString$5(a);
        var b$1 = toString$5(b);
        var c$1 = toString$5(c);
        return "" + a$1 + " " + b$1 + " " + c$1;
      }
      function toString4$1(a, b, c, d) {
        var a$1 = toString$5(a);
        var b$1 = toString$5(b);
        var c$1 = toString$5(c);
        var d$1 = toString$5(d);
        return "" + a$1 + " " + b$1 + " " + c$1 + " " + d$1;
      }
      var LengthPercentageAuto = {
        toString: toString$5,
        toString2: toString2$2,
        toString3: toString3$1,
        toString4: toString4$1
      };
      function toString$6(x) {
        if (typeof x === "string" && x !== "zero") {
          return "none";
        } else {
          return toString$4(x);
        }
      }
      var LengthPercentageNone = {
        toString: toString$6
      };
      function toString$7(x) {
        var variant = x.NAME;
        if (variant === "n") {
          return numToString(x);
        }
        if (variant === "pct") {
          return toString$2(x);
        }
        var match = x.VAL;
        var op = opToString(match[0]);
        var a = toString$7(match[1]);
        var b = toString$7(match[2]);
        return "calc(" + a + " " + op + " " + b + ")";
      }
      function toString2$3(a, b) {
        var a$1 = toString$7(a);
        var b$1 = toString$7(b);
        return "" + a$1 + " " + b$1;
      }
      function toString3$2(a, b, c) {
        var a$1 = toString$7(a);
        var b$1 = toString$7(b);
        var c$1 = toString$7(c);
        return "" + a$1 + " " + b$1 + " " + c$1;
      }
      function toString4$2(a, b, c, d) {
        var a$1 = toString$7(a);
        var b$1 = toString$7(b);
        var c$1 = toString$7(c);
        var d$1 = toString$7(d);
        return "" + a$1 + " " + b$1 + " " + c$1 + " " + d$1;
      }
      var NumberPercentage = {
        toString: toString$7,
        toString2: toString2$3,
        toString3: toString3$2,
        toString4: toString4$2
      };
      function toString$8(x) {
        var variant = x.NAME;
        if (variant === "turn") {
          return "" + x.VAL + "turn";
        } else if (variant === "deg") {
          return "" + x.VAL + "deg";
        } else if (variant === "rad") {
          return "" + x.VAL + "rad";
        } else {
          return "" + x.VAL + "grad";
        }
      }
      var Angle = {
        toString: toString$8
      };
      function toString$9(x) {
        if (typeof x === "string") {
          if (x === "transparent") {
            return "transparent";
          } else {
            return "currentColor";
          }
        }
        var variant = x.NAME;
        if (variant === "rgba") {
          var match = x.VAL;
          return "rgba(" + match[0] + ", " + match[1] + ", " + match[2] + ", " + match[3] + ")";
        }
        if (variant === "hex") {
          return "#" + x.VAL;
        }
        if (variant === "hsl") {
          var match$1 = x.VAL;
          return "hsl(" + match$1[0] + ", " + match$1[1] + "%, " + match$1[2] + "%)";
        }
        if (variant === "rgb") {
          var match$2 = x.VAL;
          return "rgb(" + match$2[0] + ", " + match$2[1] + ", " + match$2[2] + ")";
        }
        var match$3 = x.VAL;
        return "hsla(" + match$3[0] + ", " + match$3[1] + "%, " + match$3[2] + "%, " + match$3[3] + ")";
      }
      var Color_aliceblue = {
        NAME: "hex",
        VAL: "f0f8ff"
      };
      var Color_antiquewhite = {
        NAME: "hex",
        VAL: "faebd7"
      };
      var Color_aqua = {
        NAME: "hex",
        VAL: "00ffff"
      };
      var Color_aquamarine = {
        NAME: "hex",
        VAL: "7fffd4"
      };
      var Color_azure = {
        NAME: "hex",
        VAL: "f0ffff"
      };
      var Color_beige = {
        NAME: "hex",
        VAL: "f5f5dc"
      };
      var Color_bisque = {
        NAME: "hex",
        VAL: "ffe4c4"
      };
      var Color_black = {
        NAME: "hex",
        VAL: "000000"
      };
      var Color_blanchedalmond = {
        NAME: "hex",
        VAL: "ffebcd"
      };
      var Color_blue = {
        NAME: "hex",
        VAL: "0000ff"
      };
      var Color_blueviolet = {
        NAME: "hex",
        VAL: "8a2be2"
      };
      var Color_brown = {
        NAME: "hex",
        VAL: "a52a2a"
      };
      var Color_burlywood = {
        NAME: "hex",
        VAL: "deb887"
      };
      var Color_cadetblue = {
        NAME: "hex",
        VAL: "5f9ea0"
      };
      var Color_chartreuse = {
        NAME: "hex",
        VAL: "7fff00"
      };
      var Color_chocolate = {
        NAME: "hex",
        VAL: "d2691e"
      };
      var Color_coral = {
        NAME: "hex",
        VAL: "ff7f50"
      };
      var Color_cornflowerblue = {
        NAME: "hex",
        VAL: "6495ed"
      };
      var Color_cornsilk = {
        NAME: "hex",
        VAL: "fff8dc"
      };
      var Color_crimson = {
        NAME: "hex",
        VAL: "dc143c"
      };
      var Color_cyan = {
        NAME: "hex",
        VAL: "00ffff"
      };
      var Color_darkblue = {
        NAME: "hex",
        VAL: "00008b"
      };
      var Color_darkcyan = {
        NAME: "hex",
        VAL: "008b8b"
      };
      var Color_darkgoldenrod = {
        NAME: "hex",
        VAL: "b8860b"
      };
      var Color_darkgray = {
        NAME: "hex",
        VAL: "a9a9a9"
      };
      var Color_darkgreen = {
        NAME: "hex",
        VAL: "006400"
      };
      var Color_darkgrey = {
        NAME: "hex",
        VAL: "a9a9a9"
      };
      var Color_darkkhaki = {
        NAME: "hex",
        VAL: "bdb76b"
      };
      var Color_darkmagenta = {
        NAME: "hex",
        VAL: "8b008b"
      };
      var Color_darkolivegreen = {
        NAME: "hex",
        VAL: "556b2f"
      };
      var Color_darkorange = {
        NAME: "hex",
        VAL: "ff8c00"
      };
      var Color_darkorchid = {
        NAME: "hex",
        VAL: "9932cc"
      };
      var Color_darkred = {
        NAME: "hex",
        VAL: "8b0000"
      };
      var Color_darksalmon = {
        NAME: "hex",
        VAL: "e9967a"
      };
      var Color_darkseagreen = {
        NAME: "hex",
        VAL: "8fbc8f"
      };
      var Color_darkslateblue = {
        NAME: "hex",
        VAL: "483d8b"
      };
      var Color_darkslategray = {
        NAME: "hex",
        VAL: "2f4f4f"
      };
      var Color_darkslategrey = {
        NAME: "hex",
        VAL: "2f4f4f"
      };
      var Color_darkturquoise = {
        NAME: "hex",
        VAL: "00ced1"
      };
      var Color_darkviolet = {
        NAME: "hex",
        VAL: "9400d3"
      };
      var Color_deeppink = {
        NAME: "hex",
        VAL: "ff1493"
      };
      var Color_deepskyblue = {
        NAME: "hex",
        VAL: "00bfff"
      };
      var Color_dimgray = {
        NAME: "hex",
        VAL: "696969"
      };
      var Color_dimgrey = {
        NAME: "hex",
        VAL: "696969"
      };
      var Color_dodgerblue = {
        NAME: "hex",
        VAL: "1e90ff"
      };
      var Color_firebrick = {
        NAME: "hex",
        VAL: "b22222"
      };
      var Color_floralwhite = {
        NAME: "hex",
        VAL: "fffaf0"
      };
      var Color_forestgreen = {
        NAME: "hex",
        VAL: "228b22"
      };
      var Color_fuchsia = {
        NAME: "hex",
        VAL: "ff00ff"
      };
      var Color_gainsboro = {
        NAME: "hex",
        VAL: "dcdcdc"
      };
      var Color_ghostwhite = {
        NAME: "hex",
        VAL: "f8f8ff"
      };
      var Color_gold = {
        NAME: "hex",
        VAL: "ffd700"
      };
      var Color_goldenrod = {
        NAME: "hex",
        VAL: "daa520"
      };
      var Color_gray = {
        NAME: "hex",
        VAL: "808080"
      };
      var Color_green = {
        NAME: "hex",
        VAL: "008000"
      };
      var Color_greenyellow = {
        NAME: "hex",
        VAL: "adff2f"
      };
      var Color_grey = {
        NAME: "hex",
        VAL: "808080"
      };
      var Color_honeydew = {
        NAME: "hex",
        VAL: "f0fff0"
      };
      var Color_hotpink = {
        NAME: "hex",
        VAL: "ff69b4"
      };
      var Color_indianred = {
        NAME: "hex",
        VAL: "cd5c5c"
      };
      var Color_indigo = {
        NAME: "hex",
        VAL: "4b0082"
      };
      var Color_ivory = {
        NAME: "hex",
        VAL: "fffff0"
      };
      var Color_khaki = {
        NAME: "hex",
        VAL: "f0e68c"
      };
      var Color_lavender = {
        NAME: "hex",
        VAL: "e6e6fa"
      };
      var Color_lavenderblush = {
        NAME: "hex",
        VAL: "fff0f5"
      };
      var Color_lawngreen = {
        NAME: "hex",
        VAL: "7cfc00"
      };
      var Color_lemonchiffon = {
        NAME: "hex",
        VAL: "fffacd"
      };
      var Color_lightblue = {
        NAME: "hex",
        VAL: "add8e6"
      };
      var Color_lightcoral = {
        NAME: "hex",
        VAL: "f08080"
      };
      var Color_lightcyan = {
        NAME: "hex",
        VAL: "e0ffff"
      };
      var Color_lightgoldenrodyellow = {
        NAME: "hex",
        VAL: "fafad2"
      };
      var Color_lightgray = {
        NAME: "hex",
        VAL: "d3d3d3"
      };
      var Color_lightgreen = {
        NAME: "hex",
        VAL: "90ee90"
      };
      var Color_lightgrey = {
        NAME: "hex",
        VAL: "d3d3d3"
      };
      var Color_lightpink = {
        NAME: "hex",
        VAL: "ffb6c1"
      };
      var Color_lightsalmon = {
        NAME: "hex",
        VAL: "ffa07a"
      };
      var Color_lightseagreen = {
        NAME: "hex",
        VAL: "20b2aa"
      };
      var Color_lightskyblue = {
        NAME: "hex",
        VAL: "87cefa"
      };
      var Color_lightslategray = {
        NAME: "hex",
        VAL: "778899"
      };
      var Color_lightslategrey = {
        NAME: "hex",
        VAL: "778899"
      };
      var Color_lightsteelblue = {
        NAME: "hex",
        VAL: "b0c4de"
      };
      var Color_lightyellow = {
        NAME: "hex",
        VAL: "ffffe0"
      };
      var Color_lime = {
        NAME: "hex",
        VAL: "00ff00"
      };
      var Color_limegreen = {
        NAME: "hex",
        VAL: "32cd32"
      };
      var Color_linen = {
        NAME: "hex",
        VAL: "faf0e6"
      };
      var Color_magenta = {
        NAME: "hex",
        VAL: "ff00ff"
      };
      var Color_maroon = {
        NAME: "hex",
        VAL: "800000"
      };
      var Color_mediumaquamarine = {
        NAME: "hex",
        VAL: "66cdaa"
      };
      var Color_mediumblue = {
        NAME: "hex",
        VAL: "0000cd"
      };
      var Color_mediumorchid = {
        NAME: "hex",
        VAL: "ba55d3"
      };
      var Color_mediumpurple = {
        NAME: "hex",
        VAL: "9370db"
      };
      var Color_mediumseagreen = {
        NAME: "hex",
        VAL: "3cb371"
      };
      var Color_mediumslateblue = {
        NAME: "hex",
        VAL: "7b68ee"
      };
      var Color_mediumspringgreen = {
        NAME: "hex",
        VAL: "00fa9a"
      };
      var Color_mediumturquoise = {
        NAME: "hex",
        VAL: "48d1cc"
      };
      var Color_mediumvioletred = {
        NAME: "hex",
        VAL: "c71585"
      };
      var Color_midnightblue = {
        NAME: "hex",
        VAL: "191970"
      };
      var Color_mintcream = {
        NAME: "hex",
        VAL: "f5fffa"
      };
      var Color_mistyrose = {
        NAME: "hex",
        VAL: "ffe4e1"
      };
      var Color_moccasin = {
        NAME: "hex",
        VAL: "ffe4b5"
      };
      var Color_navajowhite = {
        NAME: "hex",
        VAL: "ffdead"
      };
      var Color_navy = {
        NAME: "hex",
        VAL: "000080"
      };
      var Color_oldlace = {
        NAME: "hex",
        VAL: "fdf5e6"
      };
      var Color_olive = {
        NAME: "hex",
        VAL: "808000"
      };
      var Color_olivedrab = {
        NAME: "hex",
        VAL: "6b8e23"
      };
      var Color_orange = {
        NAME: "hex",
        VAL: "ffa500"
      };
      var Color_orangered = {
        NAME: "hex",
        VAL: "ff4500"
      };
      var Color_orchid = {
        NAME: "hex",
        VAL: "da70d6"
      };
      var Color_palegoldenrod = {
        NAME: "hex",
        VAL: "eee8aa"
      };
      var Color_palegreen = {
        NAME: "hex",
        VAL: "98fb98"
      };
      var Color_paleturquoise = {
        NAME: "hex",
        VAL: "afeeee"
      };
      var Color_palevioletred = {
        NAME: "hex",
        VAL: "db7093"
      };
      var Color_papayawhip = {
        NAME: "hex",
        VAL: "ffefd5"
      };
      var Color_peachpuff = {
        NAME: "hex",
        VAL: "ffdab9"
      };
      var Color_peru = {
        NAME: "hex",
        VAL: "cd853f"
      };
      var Color_pink = {
        NAME: "hex",
        VAL: "ffc0cb"
      };
      var Color_plum = {
        NAME: "hex",
        VAL: "dda0dd"
      };
      var Color_powderblue = {
        NAME: "hex",
        VAL: "b0e0e6"
      };
      var Color_purple = {
        NAME: "hex",
        VAL: "800080"
      };
      var Color_rebeccapurple = {
        NAME: "hex",
        VAL: "663399"
      };
      var Color_red = {
        NAME: "hex",
        VAL: "ff0000"
      };
      var Color_rosybrown = {
        NAME: "hex",
        VAL: "bc8f8f"
      };
      var Color_royalblue = {
        NAME: "hex",
        VAL: "4169e1"
      };
      var Color_saddlebrown = {
        NAME: "hex",
        VAL: "8b4513"
      };
      var Color_salmon = {
        NAME: "hex",
        VAL: "fa8072"
      };
      var Color_sandybrown = {
        NAME: "hex",
        VAL: "f4a460"
      };
      var Color_seagreen = {
        NAME: "hex",
        VAL: "2e8b57"
      };
      var Color_seashell = {
        NAME: "hex",
        VAL: "fff5ee"
      };
      var Color_sienna = {
        NAME: "hex",
        VAL: "a0522d"
      };
      var Color_silver = {
        NAME: "hex",
        VAL: "c0c0c0"
      };
      var Color_skyblue = {
        NAME: "hex",
        VAL: "87ceeb"
      };
      var Color_slateblue = {
        NAME: "hex",
        VAL: "6a5acd"
      };
      var Color_slategray = {
        NAME: "hex",
        VAL: "708090"
      };
      var Color_slategrey = {
        NAME: "hex",
        VAL: "708090"
      };
      var Color_snow = {
        NAME: "hex",
        VAL: "fffafa"
      };
      var Color_springgreen = {
        NAME: "hex",
        VAL: "00ff7f"
      };
      var Color_steelblue = {
        NAME: "hex",
        VAL: "4682b4"
      };
      var Color_tan = {
        NAME: "hex",
        VAL: "d2b48c"
      };
      var Color_teal = {
        NAME: "hex",
        VAL: "008080"
      };
      var Color_thistle = {
        NAME: "hex",
        VAL: "d8bfd8"
      };
      var Color_tomato = {
        NAME: "hex",
        VAL: "ff6347"
      };
      var Color_turquoise = {
        NAME: "hex",
        VAL: "40e0d0"
      };
      var Color_violet = {
        NAME: "hex",
        VAL: "ee82ee"
      };
      var Color_wheat = {
        NAME: "hex",
        VAL: "f5deb3"
      };
      var Color_white = {
        NAME: "hex",
        VAL: "ffffff"
      };
      var Color_whitesmoke = {
        NAME: "hex",
        VAL: "f5f5f5"
      };
      var Color_yellow = {
        NAME: "hex",
        VAL: "ffff00"
      };
      var Color_yellowgreen = {
        NAME: "hex",
        VAL: "9acd3"
      };
      var Color = {
        toString: toString$9,
        aliceblue: Color_aliceblue,
        antiquewhite: Color_antiquewhite,
        aqua: Color_aqua,
        aquamarine: Color_aquamarine,
        azure: Color_azure,
        beige: Color_beige,
        bisque: Color_bisque,
        black: Color_black,
        blanchedalmond: Color_blanchedalmond,
        blue: Color_blue,
        blueviolet: Color_blueviolet,
        brown: Color_brown,
        burlywood: Color_burlywood,
        cadetblue: Color_cadetblue,
        chartreuse: Color_chartreuse,
        chocolate: Color_chocolate,
        coral: Color_coral,
        cornflowerblue: Color_cornflowerblue,
        cornsilk: Color_cornsilk,
        crimson: Color_crimson,
        cyan: Color_cyan,
        darkblue: Color_darkblue,
        darkcyan: Color_darkcyan,
        darkgoldenrod: Color_darkgoldenrod,
        darkgray: Color_darkgray,
        darkgreen: Color_darkgreen,
        darkgrey: Color_darkgrey,
        darkkhaki: Color_darkkhaki,
        darkmagenta: Color_darkmagenta,
        darkolivegreen: Color_darkolivegreen,
        darkorange: Color_darkorange,
        darkorchid: Color_darkorchid,
        darkred: Color_darkred,
        darksalmon: Color_darksalmon,
        darkseagreen: Color_darkseagreen,
        darkslateblue: Color_darkslateblue,
        darkslategray: Color_darkslategray,
        darkslategrey: Color_darkslategrey,
        darkturquoise: Color_darkturquoise,
        darkviolet: Color_darkviolet,
        deeppink: Color_deeppink,
        deepskyblue: Color_deepskyblue,
        dimgray: Color_dimgray,
        dimgrey: Color_dimgrey,
        dodgerblue: Color_dodgerblue,
        firebrick: Color_firebrick,
        floralwhite: Color_floralwhite,
        forestgreen: Color_forestgreen,
        fuchsia: Color_fuchsia,
        gainsboro: Color_gainsboro,
        ghostwhite: Color_ghostwhite,
        gold: Color_gold,
        goldenrod: Color_goldenrod,
        gray: Color_gray,
        green: Color_green,
        greenyellow: Color_greenyellow,
        grey: Color_grey,
        honeydew: Color_honeydew,
        hotpink: Color_hotpink,
        indianred: Color_indianred,
        indigo: Color_indigo,
        ivory: Color_ivory,
        khaki: Color_khaki,
        lavender: Color_lavender,
        lavenderblush: Color_lavenderblush,
        lawngreen: Color_lawngreen,
        lemonchiffon: Color_lemonchiffon,
        lightblue: Color_lightblue,
        lightcoral: Color_lightcoral,
        lightcyan: Color_lightcyan,
        lightgoldenrodyellow: Color_lightgoldenrodyellow,
        lightgray: Color_lightgray,
        lightgreen: Color_lightgreen,
        lightgrey: Color_lightgrey,
        lightpink: Color_lightpink,
        lightsalmon: Color_lightsalmon,
        lightseagreen: Color_lightseagreen,
        lightskyblue: Color_lightskyblue,
        lightslategray: Color_lightslategray,
        lightslategrey: Color_lightslategrey,
        lightsteelblue: Color_lightsteelblue,
        lightyellow: Color_lightyellow,
        lime: Color_lime,
        limegreen: Color_limegreen,
        linen: Color_linen,
        magenta: Color_magenta,
        maroon: Color_maroon,
        mediumaquamarine: Color_mediumaquamarine,
        mediumblue: Color_mediumblue,
        mediumorchid: Color_mediumorchid,
        mediumpurple: Color_mediumpurple,
        mediumseagreen: Color_mediumseagreen,
        mediumslateblue: Color_mediumslateblue,
        mediumspringgreen: Color_mediumspringgreen,
        mediumturquoise: Color_mediumturquoise,
        mediumvioletred: Color_mediumvioletred,
        midnightblue: Color_midnightblue,
        mintcream: Color_mintcream,
        mistyrose: Color_mistyrose,
        moccasin: Color_moccasin,
        navajowhite: Color_navajowhite,
        navy: Color_navy,
        oldlace: Color_oldlace,
        olive: Color_olive,
        olivedrab: Color_olivedrab,
        orange: Color_orange,
        orangered: Color_orangered,
        orchid: Color_orchid,
        palegoldenrod: Color_palegoldenrod,
        palegreen: Color_palegreen,
        paleturquoise: Color_paleturquoise,
        palevioletred: Color_palevioletred,
        papayawhip: Color_papayawhip,
        peachpuff: Color_peachpuff,
        peru: Color_peru,
        pink: Color_pink,
        plum: Color_plum,
        powderblue: Color_powderblue,
        purple: Color_purple,
        rebeccapurple: Color_rebeccapurple,
        red: Color_red,
        rosybrown: Color_rosybrown,
        royalblue: Color_royalblue,
        saddlebrown: Color_saddlebrown,
        salmon: Color_salmon,
        sandybrown: Color_sandybrown,
        seagreen: Color_seagreen,
        seashell: Color_seashell,
        sienna: Color_sienna,
        silver: Color_silver,
        skyblue: Color_skyblue,
        slateblue: Color_slateblue,
        slategray: Color_slategray,
        slategrey: Color_slategrey,
        snow: Color_snow,
        springgreen: Color_springgreen,
        steelblue: Color_steelblue,
        tan: Color_tan,
        teal: Color_teal,
        thistle: Color_thistle,
        tomato: Color_tomato,
        turquoise: Color_turquoise,
        violet: Color_violet,
        wheat: Color_wheat,
        white: Color_white,
        whitesmoke: Color_whitesmoke,
        yellow: Color_yellow,
        yellowgreen: Color_yellowgreen
      };
      function toString$10(x) {
        return joinWith(Belt_List.mapU(x, function(param) {
          var color = toString$9(param[1]);
          return "" + color + " " + param[0] + "%";
        }), ", ");
      }
      var Stops = {
        toString: toString$10
      };
      function toString$11(x) {
        var variant = x.NAME;
        if (variant === "repeatingLinearGradient") {
          var match = x.VAL;
          var angle = toString$8(match[0]);
          var stops = toString$10(match[1]);
          return "repeating-linear-gradient(" + angle + ", " + stops + ")";
        }
        if (variant === "radialGradient") {
          var stops$1 = toString$10(x.VAL);
          return "radial-gradient(" + stops$1 + ")";
        }
        if (variant === "linearGradient") {
          var match$1 = x.VAL;
          var angle$1 = toString$8(match$1[0]);
          var stops$2 = toString$10(match$1[1]);
          return "linear-gradient(" + angle$1 + ", " + stops$2 + ")";
        }
        var stops$3 = toString$10(x.VAL);
        return "repeating-radial-gradient(" + stops$3 + ")";
      }
      var Gradient = {
        Stops,
        toString: toString$11
      };
      function toString$12(x) {
        return "url(" + x.VAL + ")";
      }
      var Url = {
        toString: toString$12
      };
      function toString$13(x) {
        if (x.NAME === "url") {
          return toString$12(x);
        } else {
          return toString$11(x);
        }
      }
      var $$Image = {
        toString: toString$13
      };
      function toString$14(x) {
        if (x === "flex") {
          return "flex";
        } else if (x === "grid") {
          return "grid";
        } else if (x === "none") {
          return "none";
        } else if (x === "inlineTable") {
          return "inline-table";
        } else if (x === "tableRow") {
          return "table-row";
        } else if (x === "tableRowGroup") {
          return "table-row-group";
        } else if (x === "inlineBlock") {
          return "inline-block";
        } else if (x === "inlineFlex") {
          return "inline-flex";
        } else if (x === "inlineGrid") {
          return "inline-grid";
        } else if (x === "tableColumn") {
          return "table-column";
        } else if (x === "table") {
          return "table";
        } else if (x === "inline") {
          return "inline";
        } else if (x === "tableHeaderGroup") {
          return "table-header-group";
        } else if (x === "listItem") {
          return "list-item";
        } else if (x === "tableCell") {
          return "table-cell";
        } else if (x === "tableColumnGroup") {
          return "table-column-group";
        } else if (x === "block") {
          return "block";
        } else if (x === "tableCaption") {
          return "table-caption";
        } else {
          return "table-footer-group";
        }
      }
      var Display = {
        toString: toString$14
      };
      function toString$15(x) {
        if (x === "fixed") {
          return "fixed";
        } else if (x === "static") {
          return "static";
        } else if (x === "sticky") {
          return "sticky";
        } else if (x === "relative") {
          return "relative";
        } else {
          return "absolute";
        }
      }
      var Position = {
        toString: toString$15
      };
      function toString$16(x) {
        if (x === "hidden") {
          return "hidden";
        } else if (x === "ridge") {
          return "ridge";
        } else if (x === "solid") {
          return "solid";
        } else if (x === "outset") {
          return "outset";
        } else if (x === "groove") {
          return "groove";
        } else if (x === "dashed") {
          return "dashed";
        } else if (x === "dotted") {
          return "dotted";
        } else if (x === "double") {
          return "double";
        } else if (x === "inset") {
          return "inset";
        } else {
          return "none";
        }
      }
      var BorderStyle = {
        toString: toString$16
      };
      function toString$17(x) {
        if (typeof x === "string" && x !== "zero") {
          if (x === "medium") {
            return "medium";
          } else if (x === "thick") {
            return "thick";
          } else {
            return "thin";
          }
        } else {
          return toString$4(x);
        }
      }
      var BorderWidth = {
        toString: toString$17
      };
      function toString$18(width, style, color) {
        var width$1 = toString$17(width);
        var style$1 = toString$16(style);
        var color$1 = toString$9(color);
        return "" + width$1 + " " + style$1 + " " + color$1;
      }
      var Border = {
        toString: toString$18
      };
      function toString$19(x) {
        if (typeof x === "string") {
          return "none";
        } else {
          return toString$13(x);
        }
      }
      var BackgroundImage = {
        toString: toString$19
      };
      function toString$20(x) {
        if (x === "local") {
          return "local";
        } else if (x === "fixed") {
          return "fixed";
        } else {
          return "scroll";
        }
      }
      var BackgroundAttachment = {
        toString: toString$20
      };
      function toString$21(x) {
        if (x === "screen") {
          return "screen";
        } else if (x === "color") {
          return "color";
        } else if (x === "hardLight") {
          return "hard-light";
        } else if (x === "exclusion") {
          return "exclusion";
        } else if (x === "saturation") {
          return "saturation";
        } else if (x === "hue") {
          return "hue";
        } else if (x === "colorDodge") {
          return "color-dodge";
        } else if (x === "softLight") {
          return "soft-light";
        } else if (x === "lighten") {
          return "lighten";
        } else if (x === "multiply") {
          return "multiply";
        } else if (x === "colorBurn") {
          return "color-burn";
        } else if (x === "darken") {
          return "darken";
        } else if (x === "luminosity") {
          return "luminosit";
        } else if (x === "overlay") {
          return "overlay";
        } else if (x === "normal") {
          return "normal";
        } else {
          return "difference";
        }
      }
      var BackgroundBlendMode = {
        toString: toString$21
      };
      function toString$22(x) {
        if (x === "borderBox") {
          return "border-box";
        } else if (x === "paddingBox") {
          return "padding-box";
        } else {
          return "content-box";
        }
      }
      var BackgroundBox = {
        toString: toString$22
      };
      function toString$23(x) {
        if (x === "round") {
          return "round";
        } else if (x === "space") {
          return "space";
        } else if (x === "repeat") {
          return "repeat";
        } else if (x === "repeatX") {
          return "repeat-x";
        } else if (x === "repeatY") {
          return "repeat-y";
        } else {
          return "no-repeat";
        }
      }
      function toString2$4(a, b) {
        var a$1 = toString$23(a);
        var b$1 = toString$23(b);
        return "" + a$1 + " " + b$1;
      }
      var BackgroundRepeat = {
        toString: toString$23,
        toString2: toString2$4
      };
      function toString$24(x) {
        if (typeof x === "string") {
          if (x === "cover") {
            return "cover";
          } else if (x === "contain") {
            return "contain";
          } else {
            return "auto";
          }
        }
        var match = x.VAL;
        var x$1 = toString$4(match[0]);
        var y = toString$4(match[1]);
        return "" + x$1 + " " + y;
      }
      var BackgroundSize = {
        toString: toString$24
      };
      function toString$25(x) {
        if (typeof x === "string") {
          if (x === "right") {
            return "right";
          } else if (x === "center") {
            return "center";
          } else {
            return "left";
          }
        }
        var variant = x.NAME;
        if (variant === "leftOffset") {
          var o = toString$4(x.VAL);
          return "left " + o;
        }
        if (variant === "centerOffset") {
          var o$1 = toString$4(x.VAL);
          return "center " + o$1;
        }
        var o$2 = toString$4(x.VAL);
        return "right " + o$2;
      }
      var KeywordX = {
        toString: toString$25
      };
      function toString$26(x) {
        if (typeof x === "string") {
          if (x === "top") {
            return "top";
          } else if (x === "center") {
            return "center";
          } else {
            return "bottom";
          }
        }
        var variant = x.NAME;
        if (variant === "centerOffset") {
          var o = toString$4(x.VAL);
          return "center " + o;
        }
        if (variant === "topOffset") {
          var o$1 = toString$4(x.VAL);
          return "top " + o$1;
        }
        var o$2 = toString$4(x.VAL);
        return "bottom " + o$2;
      }
      var KeywordY = {
        toString: toString$26
      };
      function toString$27(x) {
        if (typeof x === "string") {
          return "initial";
        }
        if (x.NAME === "keywords") {
          var match = x.VAL;
          var x$1 = toString$25(match[0]);
          var y = toString$26(match[1]);
          return "" + x$1 + " " + y;
        }
        var match$1 = x.VAL;
        var x$2 = toString$4(match$1[0]);
        var y$1 = toString$4(match$1[1]);
        return "" + x$2 + " " + y$1;
      }
      var BackgroundPosition = {
        KeywordX,
        KeywordY,
        toString: toString$27
      };
      function toString$28(x) {
        if (x === "none") {
          return "none";
        } else if (x === "circle") {
          return "circle";
        } else if (x === "lowerGreek") {
          return "lower-greek";
        } else if (x === "square") {
          return "square";
        } else if (x === "lowerAlpha") {
          return "lower-alpha";
        } else if (x === "upperAlpha") {
          return "upper-alpha";
        } else if (x === "decimal") {
          return "decimal";
        } else if (x === "decimalLeadingZero") {
          return "decimal-leading-zero";
        } else if (x === "lowerRoman") {
          return "lower-roman";
        } else if (x === "lowerLatin") {
          return "lower-latin";
        } else if (x === "upperRoman") {
          return "upper-roman";
        } else if (x === "upperLatin") {
          return "upper-latin";
        } else {
          return "disc";
        }
      }
      var ListStyleType = {
        toString: toString$28
      };
      function toString$29(x) {
        if (x === "inside") {
          return "inside";
        } else {
          return "outside";
        }
      }
      var ListStylePosition = {
        toString: toString$29
      };
      function toString$30(x) {
        if (typeof x === "string") {
          return "none";
        } else {
          return toString$12(x);
        }
      }
      var ListStyleImage = {
        toString: toString$30
      };
      function toString$31(style, position, image) {
        var style$1 = toString$28(style);
        var position$1 = toString$29(position);
        var image$1 = toString$30(image);
        return "" + style$1 + " " + position$1 + " " + image$1;
      }
      var ListStyle = {
        toString: toString$31
      };
      function toString$32(x) {
        if (x === "borderBox") {
          return "border-box";
        } else {
          return "content-box";
        }
      }
      var BoxSizing = {
        toString: toString$32
      };
      function toString$33(x) {
        if (x === "fixed") {
          return "fixed";
        } else {
          return "auto";
        }
      }
      var TableLayout = {
        toString: toString$33
      };
      function toString$34(x) {
        if (x === "separate") {
          return "separate";
        } else {
          return "collapse";
        }
      }
      var BorderCollapse = {
        toString: toString$34
      };
      function toString$35(x) {
        if (x === "none") {
          return "none";
        } else if (x === "right") {
          return "right";
        } else {
          return "left";
        }
      }
      var Float = {
        toString: toString$35
      };
      function toString$36(x) {
        if (x === "left") {
          return "left";
        } else if (x === "right") {
          return "right";
        } else {
          return "both";
        }
      }
      var Clear = {
        toString: toString$36
      };
      function toString$37(x) {
        if (x === "scroll") {
          return "scroll";
        } else if (x === "hidden") {
          return "hidden";
        } else if (x === "visible") {
          return "visible";
        } else {
          return "auto";
        }
      }
      var Overflow = {
        toString: toString$37
      };
      function toString$38(x) {
        if (x === "oblique") {
          return "oblique";
        } else if (x === "normal") {
          return "normal";
        } else {
          return "italic";
        }
      }
      var FontStyle = {
        toString: toString$38
      };
      function toString$39(x) {
        if (x === "smallCaps") {
          return "small-caps";
        } else if (x === "allSmallCaps") {
          return "all-small-caps";
        } else if (x === "normal") {
          return "normal";
        } else {
          return "none";
        }
      }
      var FontVariant = {
        toString: toString$39
      };
      function toString$40(x) {
        if (x === "none") {
          return "none";
        } else if (x === "normal") {
          return "normal";
        } else {
          return "auto";
        }
      }
      var FontKerning = {
        toString: toString$40
      };
      function toString$41(x) {
        if (x === "extraCondensed") {
          return "extra-condensed";
        } else if (x === "ultraExpanded") {
          return "ultra-expanded";
        } else if (x === "expanded") {
          return "expanded";
        } else if (x === "semiExpanded") {
          return "semi-expanded";
        } else if (x === "extraExpanded") {
          return "extra-expanded";
        } else if (x === "condensed") {
          return "condensed";
        } else if (x === "normal") {
          return "normal";
        } else if (x === "ultraCondensed") {
          return "ultra-condensed";
        } else {
          return "semi-condensed";
        }
      }
      var FontStretch = {
        toString: toString$41
      };
      function toString$42(format, src) {
        var src$1 = src.NAME === "url" ? 'url("' + src.VAL + '")' : 'local("' + src.VAL + '")';
        if (format === void 0) {
          return src$1;
        }
        var format$1 = format === "woff" ? "woff" : format === "eot" ? "embedded-opentype" : format === "svg" ? "svg" : format === "ttf" ? "truetype" : "woff2";
        return "" + src$1 + " " + format$1;
      }
      var FontSrc = {
        toString: toString$42
      };
      function toString$43(x) {
        if (typeof x === "string") {
          if (x === "normal") {
            return "normal";
          } else {
            return toString$4(x);
          }
        } else if (x.NAME === "abs") {
          return "" + x.VAL;
        } else {
          return toString$4(x);
        }
      }
      var LineHeight = {
        toString: toString$43
      };
      function toString$44(x) {
        if (typeof x === "string" && x === "normal") {
          return "normal";
        } else {
          return toString$1(x);
        }
      }
      var LetterSpacing = {
        toString: toString$44
      };
      function toString$45(x) {
        if (x === "none") {
          return "none";
        } else if (x === "manual") {
          return "manual";
        } else {
          return "auto";
        }
      }
      var Hyphens = {
        toString: toString$45
      };
      function toString$46(x) {
        if (x === "right") {
          return "right";
        } else if (x === "justify") {
          return "justify";
        } else if (x === "center") {
          return "center";
        } else {
          return "left";
        }
      }
      var TextAlign = {
        toString: toString$46
      };
      function toString$47(x) {
        if (x === "none") {
          return "none";
        } else if (x === "underline") {
          return "underline";
        } else if (x === "lineThrough") {
          return "line-through";
        } else {
          return "overline";
        }
      }
      var TextDecorationLine = {
        toString: toString$47
      };
      function toString$48(x) {
        if (x === "solid") {
          return "solid";
        } else if (x === "dashed") {
          return "dashed";
        } else if (x === "dotted") {
          return "dotted";
        } else if (x === "double") {
          return "double";
        } else {
          return "wavy";
        }
      }
      var TextDecorationStyle = {
        toString: toString$48
      };
      function toString$49(x) {
        if (x === "ellipsis") {
          return "ellipsis";
        } else {
          return "clip";
        }
      }
      var TextOverflow = {
        toString: toString$49
      };
      function toString$50(x, y, blur, color) {
        var x$1 = toString$1(x);
        var y$1 = toString$1(y);
        var blur$1 = toString$1(blur);
        var color$1 = toString$9(color);
        return "" + x$1 + " " + y$1 + " " + blur$1 + " " + color$1;
      }
      var TextShadow = {
        toString: toString$50
      };
      function toString$51(x) {
        if (x === "capitalize") {
          return "capitalize";
        } else if (x === "lowercase") {
          return "lowercase";
        } else if (x === "uppercase") {
          return "uppercase";
        } else {
          return "none";
        }
      }
      var TextTransform = {
        toString: toString$51
      };
      function toString$52(x) {
        if (x === "none") {
          return "none";
        } else if (x === "text") {
          return "text";
        } else if (x === "all") {
          return "all";
        } else {
          return "auto";
        }
      }
      var UserSelect = {
        toString: toString$52
      };
      function toString$53(x) {
        if (typeof x === "string" && x !== "zero") {
          if (x === "bottom") {
            return "bottom";
          } else if (x === "sub") {
            return "sub";
          } else if (x === "top") {
            return "top";
          } else if (x === "super") {
            return "super";
          } else if (x === "baseline") {
            return "baseline";
          } else if (x === "textBottom") {
            return "text-bottom";
          } else if (x === "textTop") {
            return "text-top";
          } else {
            return "middle";
          }
        } else {
          return toString$4(x);
        }
      }
      var VerticalAlign = {
        toString: toString$53
      };
      function toString$54(x) {
        if (x === "preLine") {
          return "pre-line";
        } else if (x === "preWrap") {
          return "pre-wrap";
        } else if (x === "normal") {
          return "normal";
        } else if (x === "nowrap") {
          return "nowrap";
        } else {
          return "pre";
        }
      }
      var WhiteSpace = {
        toString: toString$54
      };
      function toString$55(x) {
        if (x === "normal") {
          return "normal";
        } else if (x === "keepAll") {
          return "keep-all";
        } else {
          return "break-all";
        }
      }
      var WordBreak = {
        toString: toString$55
      };
      function toString$56(x) {
        if (typeof x === "string" && x === "normal") {
          return "normal";
        } else {
          return toString$1(x);
        }
      }
      var WordSpacing = {
        toString: toString$56
      };
      function toString$57(x) {
        if (x === "breakWord") {
          return "break-word";
        } else {
          return "normal";
        }
      }
      var WordWrap = {
        toString: toString$57
      };
      function toString$58(x) {
        if (x === "rtl") {
          return "rtl";
        } else {
          return "ltr";
        }
      }
      var Direction = {
        toString: toString$58
      };
      function toString$59(x) {
        if (x === "inset" || x === "double" || x === "dotted" || x === "dashed" || x === "groove" || x === "outset" || x === "solid" || x === "ridge" || x === "hidden" || x === "none") {
          return toString$16(x);
        } else {
          return "auto";
        }
      }
      var OutlineStyle = {
        toString: toString$59
      };
      function toString$60(width, style, color) {
        var width$1 = toString$1(width);
        var style$1 = toString$59(style);
        var color$1 = toString$9(color);
        return "" + width$1 + " " + style$1 + " " + color$1;
      }
      var Outline = {
        toString: toString$60
      };
      function toString$61(x, y, blur, spread, inset, color) {
        var x$1 = toString$1(x);
        var y$1 = toString$1(y);
        var blur$1 = toString$1(blur);
        var spread$1 = toString$1(spread);
        var color$1 = toString$9(color);
        if (inset) {
          return "" + x$1 + " " + y$1 + " " + blur$1 + " " + spread$1 + " " + color$1 + " inset";
        } else {
          return "" + x$1 + " " + y$1 + " " + blur$1 + " " + spread$1 + " " + color$1;
        }
      }
      var BoxShadow = {
        toString: toString$61
      };
      function toString$62(x) {
        if (x === "hidden") {
          return "hidden";
        } else if (x === "visible") {
          return "visible";
        } else {
          return "collapse";
        }
      }
      var Visibility = {
        toString: toString$62
      };
      function toString$63(x) {
        if (typeof x === "string") {
          if (x === "cell") {
            return "cell";
          } else if (x === "copy") {
            return "copy";
          } else if (x === "swResize") {
            return "sw-resize";
          } else if (x === "grab") {
            return "grab";
          } else if (x === "help") {
            return "help";
          } else if (x === "move") {
            return "move";
          } else if (x === "none") {
            return "none";
          } else if (x === "text") {
            return "text";
          } else if (x === "rowResize") {
            return "row-resize";
          } else if (x === "wait") {
            return "wait";
          } else if (x === "pointer") {
            return "pointer";
          } else if (x === "seResize") {
            return "se-resize";
          } else if (x === "zoomOut") {
            return "zoom-out";
          } else if (x === "sResize") {
            return "s-resize";
          } else if (x === "zoomIn") {
            return "zoom-in";
          } else if (x === "grabbing") {
            return "grabbing";
          } else if (x === "nsResize") {
            return "ns-resize";
          } else if (x === "nwseResize") {
            return "nwse-resize";
          } else if (x === "progress") {
            return "progress";
          } else if (x === "crosshair") {
            return "crosshair";
          } else if (x === "wResize") {
            return "w-resize";
          } else if (x === "noDrop") {
            return "no-drop";
          } else if (x === "allScroll") {
            return "all-scroll";
          } else if (x === "verticalText") {
            return "vertical-text";
          } else if (x === "nResize") {
            return "n-resize";
          } else if (x === "default") {
            return "default";
          } else if (x === "neswResize") {
            return "nesw-resize";
          } else if (x === "alias") {
            return "alias";
          } else if (x === "ewResize") {
            return "ew-resize";
          } else if (x === "eResize") {
            return "e-resize";
          } else if (x === "nwResize") {
            return "nw-resize";
          } else if (x === "contextMenu") {
            return "context-menu";
          } else if (x === "colResize") {
            return "col-resize";
          } else if (x === "notAllowed") {
            return "not-allowed";
          } else if (x === "neResize") {
            return "ne-resize";
          } else {
            return "auto";
          }
        } else {
          return "url(" + x.VAL + ")";
        }
      }
      var Cursor = {
        toString: toString$63
      };
      function toString$64(x) {
        if (x === "none") {
          return "none";
        } else {
          return "auto";
        }
      }
      var PointerEvents = {
        toString: toString$64
      };
      function toString$65(x) {
        if (typeof x === "string") {
          return "0s";
        } else if (x.NAME === "ms") {
          return "" + x.VAL + "ms";
        } else {
          return "" + x.VAL + "s";
        }
      }
      var Timing = {
        toString: toString$65
      };
      function toString$66(x) {
        if (typeof x === "string") {
          if (x === "easeInOut") {
            return "ease-in-out";
          } else if (x === "linear") {
            return "linear";
          } else if (x === "stepStart") {
            return "step-start";
          } else if (x === "stepEnd") {
            return "step-end";
          } else if (x === "easeIn" || x === "easeOut") {
            return "ease-out";
          } else {
            return "ease";
          }
        }
        if (x.NAME === "steps") {
          var match = x.VAL;
          var n = match[0];
          if (match[1] === "start") {
            return "steps(" + n + ", start)";
          } else {
            return "steps(" + n + ", end)";
          }
        }
        var match$1 = x.VAL;
        return "cubic-bezier(" + match$1[0] + ", " + match$1[1] + ", " + match$1[2] + ", " + match$1[3] + ")";
      }
      var TimingFunction = {
        toString: toString$66
      };
      var TransitionProperty = {};
      var TransitionDuration = {};
      var TransitionDelay = {};
      var TransitionTimingFunction = {};
      function toString$67(property, duration, delay, timingFunction) {
        var duration$1 = toString$65(duration);
        var delay$1 = toString$65(delay);
        var timingFunction$1 = toString$66(timingFunction);
        return "" + property + " " + duration$1 + " " + timingFunction$1 + " " + delay$1;
      }
      var Transition = {
        toString: toString$67
      };
      function toString$68(x) {
        if (typeof x === "string") {
          return "none";
        }
        var variant = x.NAME;
        if (variant === "translate") {
          var match = x.VAL;
          var x$1 = toString$4(match[0]);
          var y = toString$4(match[1]);
          return "translate(" + x$1 + ", " + y + ")";
        }
        if (variant === "rotate") {
          var a = toString$8(x.VAL);
          return "rotate(" + a + ")";
        }
        if (variant === "skew") {
          var match$1 = x.VAL;
          var x$2 = toString$8(match$1[0]);
          var y$1 = toString$8(match$1[1]);
          return "skew(" + x$2 + ", " + y$1 + ")";
        }
        if (variant === "scale3d") {
          var match$2 = x.VAL;
          return "scale3d(" + match$2[0] + ", " + match$2[1] + ", " + match$2[2] + ")";
        }
        if (variant === "scaleXY") {
          var match$3 = x.VAL;
          return "scale(" + match$3[0] + ", " + match$3[1] + ")";
        }
        if (variant === "matrix3d") {
          var match$4 = x.VAL;
          return "matrix3d(" + match$4[0] + ", " + match$4[1] + ", " + match$4[2] + ", " + match$4[3] + ", " + match$4[4] + ", " + match$4[5] + ", " + match$4[6] + ", " + match$4[7] + ", " + match$4[8] + ", " + match$4[9] + ", " + match$4[10] + ", " + match$4[11] + ", " + match$4[12] + ", " + match$4[13] + ", " + match$4[14] + ", " + match$4[15] + ")";
        }
        if (variant === "rotateX") {
          var a$1 = toString$8(x.VAL);
          return "rotateX(" + a$1 + ")";
        }
        if (variant === "rotateY") {
          var a$2 = toString$8(x.VAL);
          return "rotateY(" + a$2 + ")";
        }
        if (variant === "rotateZ") {
          var a$3 = toString$8(x.VAL);
          return "rotateZ(" + a$3 + ")";
        }
        if (variant === "scale") {
          return "scale(" + x.VAL + ")";
        }
        if (variant === "skewX") {
          var a$4 = toString$8(x.VAL);
          return "skewX(" + a$4 + ")";
        }
        if (variant === "skewY") {
          var a$5 = toString$8(x.VAL);
          return "skewY(" + a$5 + ")";
        }
        if (variant === "translateX") {
          var x$3 = toString$4(x.VAL);
          return "translateX(" + x$3 + ")";
        }
        if (variant === "translateY") {
          var y$2 = toString$4(x.VAL);
          return "translateY(" + y$2 + ")";
        }
        if (variant === "translateZ") {
          var z = toString$4(x.VAL);
          return "translateZ(" + z + ")";
        }
        if (variant === "rotate3d") {
          var match$5 = x.VAL;
          var a$6 = toString$8(match$5[3]);
          return "rotate3d(" + match$5[0] + ", " + match$5[1] + ", " + match$5[2] + ", " + a$6 + ")";
        }
        if (variant === "translate3d") {
          var match$6 = x.VAL;
          var x$4 = toString$4(match$6[0]);
          var y$3 = toString$4(match$6[1]);
          var z$1 = toString$4(match$6[2]);
          return "translate3d(" + x$4 + ", " + y$3 + ", " + z$1 + ")";
        }
        if (variant === "matrix") {
          var match$7 = x.VAL;
          return "matrix(" + match$7[0] + ", " + match$7[1] + ", " + match$7[2] + ", " + match$7[3] + ", " + match$7[4] + ", " + match$7[5] + ")";
        }
        if (variant === "scaleX") {
          return "scaleX(" + x.VAL + ")";
        }
        if (variant === "scaleY") {
          return "scaleY(" + x.VAL + ")";
        }
        if (variant === "scaleZ") {
          return "scaleZ(" + x.VAL + ")";
        }
        var x$5 = toString$1(x.VAL);
        return "perspective(" + x$5 + ")";
      }
      var Transform = {
        toString: toString$68
      };
      function toString$69(x) {
        if (x === "preserve3d") {
          return "preserve-3d";
        } else {
          return "flat";
        }
      }
      var TransformStyle = {
        toString: toString$69
      };
      function toString$70(x) {
        if (typeof x === "string" && x !== "zero") {
          return "none";
        } else {
          return toString$1(x);
        }
      }
      var Perspective = {
        toString: toString$70
      };
      function toString$71(x) {
        if (x === "alternateReverse") {
          return "alternate-reverse";
        } else if (x === "normal") {
          return "normal";
        } else if (x === "alternate") {
          return "alternate";
        } else {
          return "reverse";
        }
      }
      var AnimationDirection = {
        toString: toString$71
      };
      function toString$72(x) {
        if (x === "none") {
          return "none";
        } else if (x === "backwards") {
          return "backwards";
        } else if (x === "forwards") {
          return "forwards";
        } else {
          return "both";
        }
      }
      var AnimationFillMode = {
        toString: toString$72
      };
      function toString$73(x) {
        if (typeof x === "string") {
          return "infinite";
        } else {
          return "" + x.VAL;
        }
      }
      var AnimationIterationCount = {
        toString: toString$73
      };
      function toString$74(x) {
        if (x === "paused") {
          return "paused";
        } else {
          return "running";
        }
      }
      var AnimationPlayState = {
        toString: toString$74
      };
      var AnimationName = {};
      var AnimationDuration = {};
      var AnimationDelay = {};
      var AnimationTimingFunction = {};
      function toString$75(name, duration, delay, direction, timingFunction, fillMode, playState, iterationCount) {
        var duration$1 = toString$65(duration);
        var delay$1 = toString$65(delay);
        var direction$1 = toString$71(direction);
        var timingFunction$1 = toString$66(timingFunction);
        var fillMode$1 = toString$72(fillMode);
        var playState$1 = toString$74(playState);
        var iterationCount$1 = toString$73(iterationCount);
        return "" + name + " " + duration$1 + " " + timingFunction$1 + " " + delay$1 + " " + iterationCount$1 + " " + direction$1 + " " + fillMode$1 + " " + playState$1;
      }
      var Animation = {
        toString: toString$75
      };
      function toString$76(x) {
        if (x === "evenodd") {
          return "evenodd";
        } else {
          return "nonzero";
        }
      }
      var FillRule = {
        toString: toString$76
      };
      function toString$77(x) {
        if (x === "square") {
          return "square";
        } else if (x === "round") {
          return "round";
        } else {
          return "butt";
        }
      }
      var StrokeLinecap = {
        toString: toString$77
      };
      function toString$78(x) {
        if (x === "miter") {
          return "miter";
        } else if (x === "bevel") {
          return "bevel";
        } else {
          return "round";
        }
      }
      var StrokeLinejoin = {
        toString: toString$78
      };
      function toString$79(x) {
        var variant = x.NAME;
        if (variant === "dropShadow") {
          var match = x.VAL;
          var x$1 = toString$1(match[0]);
          var y = toString$1(match[1]);
          var blur = toString$1(match[2]);
          var color = toString$9(match[3]);
          return "drop-shadow(" + x$1 + " " + y + " " + blur + " " + color + ")";
        }
        if (variant === "brightness") {
          var x$2 = toString$7(x.VAL);
          return "brightness(" + x$2 + ")";
        }
        if (variant === "opacity") {
          var x$3 = toString$7(x.VAL);
          return "opacity(" + x$3 + ")";
        }
        if (variant === "grayscale") {
          var x$4 = toString$7(x.VAL);
          return "grayscale(" + x$4 + ")";
        }
        if (variant === "sepia") {
          var x$5 = toString$7(x.VAL);
          return "sepia(" + x$5 + ")";
        }
        if (variant === "saturate") {
          var x$6 = toString$7(x.VAL);
          return "saturate(" + x$6 + ")";
        }
        if (variant === "invert") {
          var x$7 = toString$7(x.VAL);
          return "invert(" + x$7 + ")";
        }
        if (variant === "contrast") {
          var x$8 = toString$7(x.VAL);
          return "contrast(" + x$8 + ")";
        }
        if (variant === "hueRotate") {
          var x$9 = toString$8(x.VAL);
          return "hue-rotate(" + x$9 + ")";
        }
        var x$10 = toString$1(x.VAL);
        return "blur(" + x$10 + ")";
      }
      var FilterFunction = {
        toString: toString$79
      };
      function toString$80(x) {
        if (typeof x === "string") {
          return "none";
        } else if (x.NAME === "url") {
          return toString$12(x);
        } else {
          return toString$79(x);
        }
      }
      var Filter = {
        toString: toString$80
      };
      function toString$81(x) {
        if (x === "button") {
          return "button";
        } else if (x === "radio") {
          return "radio";
        } else if (x === "checkbox") {
          return "checkbox";
        } else {
          return "none";
        }
      }
      var Appearance = {
        toString: toString$81
      };
      function toString$82(x) {
        if (typeof x === "string") {
          if (x === "none") {
            return "none";
          } else {
            return "auto";
          }
        }
        var match = x.VAL;
        var basis = toString$5(match[2]);
        return "" + match[0] + " " + match[1] + " " + basis;
      }
      var Flex = {
        toString: toString$82
      };
      function toString$83(x) {
        if (x === "row") {
          return "row";
        } else if (x === "columnReverse") {
          return "column-reverse";
        } else if (x === "rowReverse") {
          return "row-reverse";
        } else {
          return "column";
        }
      }
      var Direction$1 = {
        toString: toString$83
      };
      function toString$84(x) {
        if (x === "wrapReverse") {
          return "wrap-reverse";
        } else if (x === "nowrap") {
          return "nowrap";
        } else {
          return "wrap";
        }
      }
      var Wrap = {
        toString: toString$84
      };
      function toString$85(direction, wrap) {
        var direction$1 = toString$83(direction);
        var wrap$1 = toString$84(wrap);
        return "" + direction$1 + " " + wrap$1;
      }
      var Flow = {
        toString: toString$85
      };
      var Flex$1 = {
        Flex,
        Direction: Direction$1,
        Wrap,
        Flow
      };
      function toString$86(x) {
        return "" + x.VAL + "fr";
      }
      var Flex$2 = {
        toString: toString$86
      };
      function minToString(x) {
        if (typeof x === "string" && x !== "zero") {
          if (x === "minContent") {
            return "min-content";
          } else if (x === "maxContent") {
            return "max-content";
          } else {
            return "auto";
          }
        } else {
          return toString$4(x);
        }
      }
      function maxToString(x) {
        if (typeof x === "string") {
          if (x === "zero") {
            return toString$4(x);
          } else if (x === "minContent") {
            return "min-content";
          } else if (x === "maxContent") {
            return "max-content";
          } else {
            return "auto";
          }
        } else if (x.NAME === "fr") {
          return toString$86(x);
        } else {
          return toString$4(x);
        }
      }
      function toString$87(x) {
        var match = x.VAL;
        var min = minToString(match[0]);
        var max = maxToString(match[1]);
        return "minmax(" + min + ", " + max + ")";
      }
      var MinMax = {
        minToString,
        maxToString,
        toString: toString$87
      };
      function toString$88(x) {
        var x$1 = toString$4(x.VAL);
        return "fit-content(" + x$1 + ")";
      }
      var FitContent = {
        toString: toString$88
      };
      function valueToString(x) {
        if (typeof x === "string") {
          if (x === "autoFill") {
            return "auto-fill";
          } else {
            return "auto-fit";
          }
        } else {
          return "" + x.VAL;
        }
      }
      function trackListToString(x) {
        if (typeof x === "string") {
          if (x === "zero") {
            return toString$4(x);
          } else if (x === "minContent") {
            return "min-content";
          } else if (x === "maxContent") {
            return "max-content";
          } else {
            return "auto";
          }
        }
        var variant = x.NAME;
        if (variant === "minmax") {
          return toString$87(x);
        } else if (variant === "fr") {
          return toString$86(x);
        } else {
          return toString$4(x);
        }
      }
      function toString$89(x) {
        var match = x.VAL;
        var value = valueToString(match[0]);
        var trackList = joinWith(Belt_List.map(match[1], trackListToString), " ");
        return "repeat(" + value + ", " + trackList + ")";
      }
      var Repeat = {
        valueToString,
        trackListToString,
        toString: toString$89
      };
      function toString$90(x) {
        if (typeof x === "string") {
          if (x === "zero") {
            return toString$4(x);
          } else if (x === "minContent") {
            return "min-content";
          } else if (x === "maxContent") {
            return "max-content";
          } else {
            return "auto";
          }
        }
        var variant = x.NAME;
        if (variant === "minmax") {
          return toString$87(x);
        } else if (variant === "fr") {
          return toString$86(x);
        } else {
          return toString$4(x);
        }
      }
      var AutoRows = {
        toString: toString$90
      };
      function toString$91(x) {
        if (typeof x === "string") {
          if (x === "zero") {
            return toString$4(x);
          } else if (x === "minContent") {
            return "min-content";
          } else if (x === "maxContent") {
            return "max-content";
          } else {
            return "auto";
          }
        }
        var variant = x.NAME;
        if (variant === "minmax") {
          return toString$87(x);
        } else if (variant === "fitContent") {
          return toString$88(x);
        } else if (variant === "fr") {
          return toString$86(x);
        } else {
          return toString$4(x);
        }
      }
      var AutoColumns = {
        toString: toString$91
      };
      function valueToString$1(x) {
        if (typeof x === "string") {
          if (x === "zero") {
            return toString$4(x);
          } else if (x === "minContent") {
            return "min-content";
          } else if (x === "maxContent") {
            return "max-content";
          } else {
            return "auto";
          }
        }
        var variant = x.NAME;
        if (variant === "minmax") {
          return toString$87(x);
        } else if (variant === "fitContent") {
          return toString$88(x);
        } else if (variant === "fr") {
          return toString$86(x);
        } else if (variant === "repeat") {
          return toString$89(x);
        } else {
          return toString$4(x);
        }
      }
      function toString$92(x) {
        if (typeof x === "string") {
          return "none";
        }
        var xs = joinWith(Belt_List.map(x.VAL, valueToString$1), " ");
        return "" + xs;
      }
      var Template = {
        valueToString: valueToString$1,
        toString: toString$92
      };
      function toString$93(x) {
        if (typeof x === "string") {
          return "auto";
        }
        var variant = x.NAME;
        if (variant === "span") {
          var match = x.VAL;
          var variant$1 = match.NAME;
          if (variant$1 === "n") {
            return "span " + match.VAL;
          }
          if (variant$1 === "ident") {
            return "span " + match.VAL;
          }
          var match$1 = match.VAL;
          return "span " + match$1[0] + " " + match$1[1];
        }
        if (variant === "n") {
          return "" + x.VAL;
        }
        if (variant === "ident") {
          return x.VAL;
        }
        var match$2 = x.VAL;
        return "" + match$2[0] + " " + match$2[1];
      }
      var Line = {
        toString: toString$93
      };
      function toString$94(x) {
        if (typeof x === "string" && x === "normal") {
          return "normal";
        } else {
          return toString$4(x);
        }
      }
      var Gap = {
        toString: toString$94
      };
      function toString$95(x) {
        if (typeof x === "string") {
          return "none";
        } else {
          return joinWith(Belt_List.map(x.VAL, function(x2) {
            return '"' + x2 + '"';
          }), "\n");
        }
      }
      var TemplateAreas = {
        toString: toString$95
      };
      function toString$96(x) {
        if (x === "columnDense") {
          return "column dense";
        } else if (x === "rowDense") {
          return "row dense";
        } else if (x === "row") {
          return "row";
        } else {
          return "column";
        }
      }
      var AutoFlow = {
        toString: toString$96
      };
      var Grid = {
        Flex: Flex$2,
        MinMax,
        FitContent,
        Repeat,
        AutoRows,
        AutoColumns,
        Template,
        Line,
        Gap,
        TemplateAreas,
        AutoFlow
      };
      function toString$97(x) {
        if (x === "lastBaseline") {
          return "last baseline";
        } else if (x === "stretch") {
          return "stretch";
        } else if (x === "selfEnd") {
          return "self-end";
        } else if (x === "start") {
          return "start";
        } else if (x === "center") {
          return "center";
        } else if (x === "firstBaseline") {
          return "first baseline";
        } else if (x === "baseline") {
          return "baseline";
        } else if (x === "flexStart") {
          return "flex-start";
        } else if (x === "normal") {
          return "normal";
        } else if (x === "flexEnd") {
          return "flex-end";
        } else if (x === "selfStart") {
          return "self-start";
        } else {
          return "end";
        }
      }
      var AlignItems = {
        toString: toString$97
      };
      function toString$98(x) {
        if (x === "end_") {
          return "end";
        } else if (x === "lastBaseline") {
          return "last baseline";
        } else if (x === "stretch") {
          return "stretch";
        } else if (x === "selfEnd") {
          return "self-end";
        } else if (x === "start") {
          return "start";
        } else if (x === "center") {
          return "center";
        } else if (x === "firstBaseline") {
          return "first baseline";
        } else if (x === "baseline") {
          return "baseline";
        } else if (x === "flexStart") {
          return "flex-start";
        } else if (x === "normal") {
          return "normal";
        } else if (x === "flexEnd") {
          return "flex-end";
        } else if (x === "selfStart") {
          return "self-start";
        } else {
          return "auto";
        }
      }
      var AlignSelf = {
        toString: toString$98
      };
      function toString$99(x) {
        if (x === "spaceEvenly") {
          return "space-evenly";
        } else if (x === "spaceAround") {
          return "space-around";
        } else if (x === "lastBaseline") {
          return "last baseline";
        } else if (x === "stretch") {
          return "stretch";
        } else if (x === "start") {
          return "start";
        } else if (x === "center") {
          return "center";
        } else if (x === "firstBaseline") {
          return "first baseline";
        } else if (x === "baseline") {
          return "baseline";
        } else if (x === "spaceBetween") {
          return "space-between";
        } else if (x === "flexStart") {
          return "flex-start";
        } else if (x === "normal") {
          return "normal";
        } else if (x === "flexEnd") {
          return "flex-end";
        } else {
          return "end";
        }
      }
      var AlignContent = {
        toString: toString$99
      };
      function toString$100(x) {
        if (x === "left") {
          return "left";
        } else if (x === "right") {
          return "right";
        } else if (x === "lastBaseline") {
          return "last baseline";
        } else if (x === "stretch") {
          return "stretch";
        } else if (x === "selfEnd") {
          return "self-end";
        } else if (x === "start") {
          return "start";
        } else if (x === "center") {
          return "center";
        } else if (x === "firstBaseline") {
          return "first baseline";
        } else if (x === "baseline") {
          return "baseline";
        } else if (x === "flexStart") {
          return "flex-start";
        } else if (x === "normal") {
          return "normal";
        } else if (x === "flexEnd") {
          return "flex-end";
        } else if (x === "selfStart") {
          return "self-start";
        } else {
          return "end";
        }
      }
      var JustifyItems = {
        toString: toString$100
      };
      function toString$101(x) {
        if (x === "end_") {
          return "end";
        } else if (x === "left") {
          return "left";
        } else if (x === "right") {
          return "right";
        } else if (x === "lastBaseline") {
          return "last baseline";
        } else if (x === "stretch") {
          return "stretch";
        } else if (x === "selfEnd") {
          return "self-end";
        } else if (x === "start") {
          return "start";
        } else if (x === "center") {
          return "center";
        } else if (x === "firstBaseline") {
          return "first baseline";
        } else if (x === "baseline") {
          return "baseline";
        } else if (x === "flexStart") {
          return "flex-start";
        } else if (x === "normal") {
          return "normal";
        } else if (x === "flexEnd") {
          return "flex-end";
        } else if (x === "selfStart") {
          return "self-start";
        } else {
          return "auto";
        }
      }
      var JustifySelf = {
        toString: toString$101
      };
      function toString$102(x) {
        if (x === "spaceEvenly") {
          return "space-evenly";
        } else if (x === "left") {
          return "left";
        } else if (x === "spaceAround") {
          return "space-around";
        } else if (x === "right") {
          return "right";
        } else if (x === "stretch") {
          return "stretch";
        } else if (x === "start") {
          return "start";
        } else if (x === "center") {
          return "center";
        } else if (x === "spaceBetween") {
          return "space-between";
        } else if (x === "flexStart") {
          return "flex-start";
        } else if (x === "normal") {
          return "normal";
        } else if (x === "flexEnd") {
          return "flex-end";
        } else {
          return "end";
        }
      }
      var JustifyContent = {
        toString: toString$102
      };
      function toString$103(x) {
        if (x.NAME === "keyword") {
          return toString$15(x.VAL);
        } else {
          return toString$4(x.VAL);
        }
      }
      var ShapePosition = {
        toString: toString$103
      };
      function toString$104(x) {
        if (x === "evenodd") {
          return "evenodd";
        } else {
          return "nonzero";
        }
      }
      var FillRule$1 = {
        toString: toString$104
      };
      function toString$105(x) {
        if (typeof x === "string") {
          if (x === "farthestSide") {
            return "farthest-side";
          } else if (x === "closestSide") {
            return "closest-side";
          } else {
            return toString$4(x);
          }
        } else {
          return toString$4(x);
        }
      }
      var ShapeRadius = {
        toString: toString$105
      };
      function toString$106(x) {
        var variant = x.NAME;
        if (variant === "circle") {
          var match = x.VAL;
          var radius = toString$105(match[0]);
          var atPosition = Belt_Option.getWithDefault(Belt_Option.map(match[1], function(atPosition2) {
            var at1 = toString$103(atPosition2[0]);
            var at2 = toString$103(atPosition2[1]);
            return " at " + at1 + " " + at2;
          }), "");
          return "" + radius + atPosition;
        }
        if (variant === "ellipse") {
          var match$1 = x.VAL;
          var rX = toString$105(match$1[0]);
          var rY = toString$105(match$1[1]);
          var atPosition$1 = Belt_Option.getWithDefault(Belt_Option.map(match$1[2], function(atPosition2) {
            var at1 = toString$103(atPosition2[0]);
            var at2 = toString$103(atPosition2[1]);
            return " at " + at1 + " " + at2;
          }), "");
          return "" + rX + " " + rY + atPosition$1;
        }
        if (variant === "polygon") {
          var match$2 = x.VAL;
          var fillRule = Belt_Option.getWithDefault(Belt_Option.map(match$2[1], function(fillRule2) {
            return toString$104(fillRule2) + ",";
          }), "");
          var args = Belt_List.toArray(Belt_List.map(match$2[0], function(arg) {
            var a1 = toString$4(arg[0]);
            var a2 = toString$4(arg[1]);
            return "" + a1 + " " + a2;
          })).join(",");
          return "" + fillRule + args;
        }
        if (variant === "inset") {
          var match$3 = x.VAL;
          var top = toString$4(match$3[0]);
          var right = toString$4(match$3[1]);
          var bottom = toString$4(match$3[2]);
          var left = toString$4(match$3[3]);
          var borderRadius = Belt_Option.getWithDefault(Belt_Option.map(match$3[4], function(borderRadius2) {
            return " round " + toString$4(borderRadius2);
          }), "");
          return "" + top + " " + right + " " + bottom + " " + left + borderRadius;
        }
        var match$4 = x.VAL;
        var fillRule$1 = Belt_Option.getWithDefault(Belt_Option.map(match$4[1], function(fillRule2) {
          return toString$104(fillRule2) + ",";
        }), "");
        return "" + fillRule$1 + match$4[0];
      }
      var BasicShape = {
        ShapePosition,
        FillRule: FillRule$1,
        ShapeRadius,
        toString: toString$106
      };
      function toString$107(x) {
        if (x === "marginBox") {
          return "margin-box";
        } else if (x === "strokeBox") {
          return "stroke-box";
        } else if (x === "borderBox") {
          return "border-box";
        } else if (x === "fillBox") {
          return "fill-box";
        } else if (x === "viewBox") {
          return "view-box";
        } else if (x === "paddingBox") {
          return "padding-box";
        } else {
          return "content-box";
        }
      }
      var GeometryBox = {
        toString: toString$107
      };
      function toString$108(x) {
        if (typeof x === "string") {
          if (x === "initial") {
            return "initial";
          } else if (x === "unset") {
            return "unset";
          } else {
            return "none";
          }
        }
        var variant = x.NAME;
        if (variant === "shape") {
          return toString$106(x.VAL);
        }
        if (variant === "box") {
          return toString$107(x.VAL);
        }
        if (variant === "url") {
          return toString$12(x.VAL);
        }
        var match = x.VAL;
        var box = toString$107(match[0]);
        var shape = toString$106(match[1]);
        return "" + box + " " + shape;
      }
      var ClipPath = {
        toString: toString$108
      };
      exports.Helpers = Helpers;
      exports.Calc = Calc;
      exports.LengthUnit = LengthUnit;
      exports.Length = Length;
      exports.PercentageUnit = PercentageUnit;
      exports.Percentage = Percentage;
      exports.LengthPercentage = LengthPercentage;
      exports.LengthPercentageAuto = LengthPercentageAuto;
      exports.LengthPercentageNone = LengthPercentageNone;
      exports.NumberPercentage = NumberPercentage;
      exports.Angle = Angle;
      exports.Color = Color;
      exports.Gradient = Gradient;
      exports.Url = Url;
      exports.$$Image = $$Image;
      exports.Display = Display;
      exports.Position = Position;
      exports.BorderStyle = BorderStyle;
      exports.BorderWidth = BorderWidth;
      exports.Border = Border;
      exports.BackgroundImage = BackgroundImage;
      exports.BackgroundAttachment = BackgroundAttachment;
      exports.BackgroundBlendMode = BackgroundBlendMode;
      exports.BackgroundBox = BackgroundBox;
      exports.BackgroundRepeat = BackgroundRepeat;
      exports.BackgroundSize = BackgroundSize;
      exports.BackgroundPosition = BackgroundPosition;
      exports.ListStyleType = ListStyleType;
      exports.ListStylePosition = ListStylePosition;
      exports.ListStyleImage = ListStyleImage;
      exports.ListStyle = ListStyle;
      exports.BoxSizing = BoxSizing;
      exports.TableLayout = TableLayout;
      exports.BorderCollapse = BorderCollapse;
      exports.Float = Float;
      exports.Clear = Clear;
      exports.Overflow = Overflow;
      exports.FontStyle = FontStyle;
      exports.FontVariant = FontVariant;
      exports.FontKerning = FontKerning;
      exports.FontStretch = FontStretch;
      exports.FontSrc = FontSrc;
      exports.LineHeight = LineHeight;
      exports.LetterSpacing = LetterSpacing;
      exports.Hyphens = Hyphens;
      exports.TextAlign = TextAlign;
      exports.TextDecorationLine = TextDecorationLine;
      exports.TextDecorationStyle = TextDecorationStyle;
      exports.TextOverflow = TextOverflow;
      exports.TextShadow = TextShadow;
      exports.TextTransform = TextTransform;
      exports.UserSelect = UserSelect;
      exports.VerticalAlign = VerticalAlign;
      exports.WhiteSpace = WhiteSpace;
      exports.WordBreak = WordBreak;
      exports.WordSpacing = WordSpacing;
      exports.WordWrap = WordWrap;
      exports.Direction = Direction;
      exports.OutlineStyle = OutlineStyle;
      exports.Outline = Outline;
      exports.BoxShadow = BoxShadow;
      exports.Visibility = Visibility;
      exports.Cursor = Cursor;
      exports.PointerEvents = PointerEvents;
      exports.Timing = Timing;
      exports.TimingFunction = TimingFunction;
      exports.TransitionProperty = TransitionProperty;
      exports.TransitionDuration = TransitionDuration;
      exports.TransitionDelay = TransitionDelay;
      exports.TransitionTimingFunction = TransitionTimingFunction;
      exports.Transition = Transition;
      exports.Transform = Transform;
      exports.TransformStyle = TransformStyle;
      exports.Perspective = Perspective;
      exports.AnimationDirection = AnimationDirection;
      exports.AnimationFillMode = AnimationFillMode;
      exports.AnimationIterationCount = AnimationIterationCount;
      exports.AnimationPlayState = AnimationPlayState;
      exports.AnimationName = AnimationName;
      exports.AnimationDuration = AnimationDuration;
      exports.AnimationDelay = AnimationDelay;
      exports.AnimationTimingFunction = AnimationTimingFunction;
      exports.Animation = Animation;
      exports.FillRule = FillRule;
      exports.StrokeLinecap = StrokeLinecap;
      exports.StrokeLinejoin = StrokeLinejoin;
      exports.FilterFunction = FilterFunction;
      exports.Filter = Filter;
      exports.Appearance = Appearance;
      exports.Flex = Flex$1;
      exports.Grid = Grid;
      exports.AlignItems = AlignItems;
      exports.AlignSelf = AlignSelf;
      exports.AlignContent = AlignContent;
      exports.JustifyItems = JustifyItems;
      exports.JustifySelf = JustifySelf;
      exports.JustifyContent = JustifyContent;
      exports.BasicShape = BasicShape;
      exports.GeometryBox = GeometryBox;
      exports.ClipPath = ClipPath;
    }
  });

  // node_modules/@rescript/std/lib/js/js_dict.js
  var require_js_dict = __commonJS({
    "node_modules/@rescript/std/lib/js/js_dict.js"(exports) {
      "use strict";
      var Caml_option = require_caml_option();
      function get(dict, k) {
        if (k in dict) {
          return Caml_option.some(dict[k]);
        }
      }
      var unsafeDeleteKey = function(dict, key) {
        delete dict[key];
      };
      function entries(dict) {
        var keys = Object.keys(dict);
        var l = keys.length;
        var values2 = new Array(l);
        for (var i = 0; i < l; ++i) {
          var key = keys[i];
          values2[i] = [
            key,
            dict[key]
          ];
        }
        return values2;
      }
      function values(dict) {
        var keys = Object.keys(dict);
        var l = keys.length;
        var values$1 = new Array(l);
        for (var i = 0; i < l; ++i) {
          values$1[i] = dict[keys[i]];
        }
        return values$1;
      }
      function fromList(entries2) {
        var dict = {};
        var _param = entries2;
        while (true) {
          var param = _param;
          if (!param) {
            return dict;
          }
          var match = param.hd;
          dict[match[0]] = match[1];
          _param = param.tl;
          continue;
        }
        ;
      }
      function fromArray(entries2) {
        var dict = {};
        var l = entries2.length;
        for (var i = 0; i < l; ++i) {
          var match = entries2[i];
          dict[match[0]] = match[1];
        }
        return dict;
      }
      function map(f, source) {
        var target = {};
        var keys = Object.keys(source);
        var l = keys.length;
        for (var i = 0; i < l; ++i) {
          var key = keys[i];
          target[key] = f(source[key]);
        }
        return target;
      }
      exports.get = get;
      exports.unsafeDeleteKey = unsafeDeleteKey;
      exports.entries = entries;
      exports.values = values;
      exports.fromList = fromList;
      exports.fromArray = fromArray;
      exports.map = map;
    }
  });

  // node_modules/@emotion/memoize/dist/memoize.cjs.js
  var require_memoize_cjs = __commonJS({
    "node_modules/@emotion/memoize/dist/memoize.cjs.js"(exports, module) {
      "use strict";
      function memoize(fn) {
        var cache = {};
        return function(arg) {
          if (cache[arg] === void 0)
            cache[arg] = fn(arg);
          return cache[arg];
        };
      }
      module.exports = memoize;
    }
  });

  // node_modules/@emotion/unitless/dist/unitless.cjs.js
  var require_unitless_cjs = __commonJS({
    "node_modules/@emotion/unitless/dist/unitless.cjs.js"(exports, module) {
      "use strict";
      var unitlessKeys = {
        animationIterationCount: 1,
        borderImageOutset: 1,
        borderImageSlice: 1,
        borderImageWidth: 1,
        boxFlex: 1,
        boxFlexGroup: 1,
        boxOrdinalGroup: 1,
        columnCount: 1,
        columns: 1,
        flex: 1,
        flexGrow: 1,
        flexPositive: 1,
        flexShrink: 1,
        flexNegative: 1,
        flexOrder: 1,
        gridRow: 1,
        gridRowEnd: 1,
        gridRowSpan: 1,
        gridRowStart: 1,
        gridColumn: 1,
        gridColumnEnd: 1,
        gridColumnSpan: 1,
        gridColumnStart: 1,
        fontWeight: 1,
        lineHeight: 1,
        opacity: 1,
        order: 1,
        orphans: 1,
        tabSize: 1,
        widows: 1,
        zIndex: 1,
        zoom: 1,
        WebkitLineClamp: 1,
        fillOpacity: 1,
        floodOpacity: 1,
        stopOpacity: 1,
        strokeDasharray: 1,
        strokeDashoffset: 1,
        strokeMiterlimit: 1,
        strokeOpacity: 1,
        strokeWidth: 1
      };
      module.exports = unitlessKeys;
    }
  });

  // node_modules/@emotion/hash/dist/hash.cjs.js
  var require_hash_cjs = __commonJS({
    "node_modules/@emotion/hash/dist/hash.cjs.js"(exports, module) {
      "use strict";
      function murmurhash2_32_gc(str) {
        var l = str.length, h = l ^ l, i = 0, k;
        while (l >= 4) {
          k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
          k = (k & 65535) * 1540483477 + (((k >>> 16) * 1540483477 & 65535) << 16);
          k ^= k >>> 24;
          k = (k & 65535) * 1540483477 + (((k >>> 16) * 1540483477 & 65535) << 16);
          h = (h & 65535) * 1540483477 + (((h >>> 16) * 1540483477 & 65535) << 16) ^ k;
          l -= 4;
          ++i;
        }
        switch (l) {
          case 3:
            h ^= (str.charCodeAt(i + 2) & 255) << 16;
          case 2:
            h ^= (str.charCodeAt(i + 1) & 255) << 8;
          case 1:
            h ^= str.charCodeAt(i) & 255;
            h = (h & 65535) * 1540483477 + (((h >>> 16) * 1540483477 & 65535) << 16);
        }
        h ^= h >>> 13;
        h = (h & 65535) * 1540483477 + (((h >>> 16) * 1540483477 & 65535) << 16);
        h ^= h >>> 15;
        return (h >>> 0).toString(36);
      }
      module.exports = murmurhash2_32_gc;
    }
  });

  // node_modules/@emotion/stylis/dist/stylis.cjs.js
  var require_stylis_cjs = __commonJS({
    "node_modules/@emotion/stylis/dist/stylis.cjs.js"(exports, module) {
      "use strict";
      function stylis_min(W) {
        function M(d, c, e, h, a) {
          for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B2 = e.length, J = B2 - 1, y, f = "", p = "", F2 = "", G2 = "", C; l < B2; ) {
            g = e.charCodeAt(l);
            l === J && b + n + v + m !== 0 && (b !== 0 && (g = b === 47 ? 10 : 47), n = v = m = 0, B2++, J++);
            if (b + n + v + m === 0) {
              if (l === J && (0 < r && (f = f.replace(N, "")), 0 < f.trim().length)) {
                switch (g) {
                  case 32:
                  case 9:
                  case 59:
                  case 13:
                  case 10:
                    break;
                  default:
                    f += e.charAt(l);
                }
                g = 59;
              }
              switch (g) {
                case 123:
                  f = f.trim();
                  q = f.charCodeAt(0);
                  k = 1;
                  for (t = ++l; l < B2; ) {
                    switch (g = e.charCodeAt(l)) {
                      case 123:
                        k++;
                        break;
                      case 125:
                        k--;
                        break;
                      case 47:
                        switch (g = e.charCodeAt(l + 1)) {
                          case 42:
                          case 47:
                            a: {
                              for (u = l + 1; u < J; ++u) {
                                switch (e.charCodeAt(u)) {
                                  case 47:
                                    if (g === 42 && e.charCodeAt(u - 1) === 42 && l + 2 !== u) {
                                      l = u + 1;
                                      break a;
                                    }
                                    break;
                                  case 10:
                                    if (g === 47) {
                                      l = u + 1;
                                      break a;
                                    }
                                }
                              }
                              l = u;
                            }
                        }
                        break;
                      case 91:
                        g++;
                      case 40:
                        g++;
                      case 34:
                      case 39:
                        for (; l++ < J && e.charCodeAt(l) !== g; ) {
                        }
                    }
                    if (k === 0)
                      break;
                    l++;
                  }
                  k = e.substring(t, l);
                  q === 0 && (q = (f = f.replace(ca, "").trim()).charCodeAt(0));
                  switch (q) {
                    case 64:
                      0 < r && (f = f.replace(N, ""));
                      g = f.charCodeAt(1);
                      switch (g) {
                        case 100:
                        case 109:
                        case 115:
                        case 45:
                          r = c;
                          break;
                        default:
                          r = O;
                      }
                      k = M(c, r, k, g, a + 1);
                      t = k.length;
                      0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(""), C !== void 0 && (t = (k = C.trim()).length) === 0 && (g = 0, k = ""));
                      if (0 < t)
                        switch (g) {
                          case 115:
                            f = f.replace(da, ea);
                          case 100:
                          case 109:
                          case 45:
                            k = f + "{" + k + "}";
                            break;
                          case 107:
                            f = f.replace(fa, "$1 $2");
                            k = f + "{" + k + "}";
                            k = w === 1 || w === 2 && L("@" + k, 3) ? "@-webkit-" + k + "@" + k : "@" + k;
                            break;
                          default:
                            k = f + k, h === 112 && (k = (p += k, ""));
                        }
                      else
                        k = "";
                      break;
                    default:
                      k = M(c, X(c, f, I), k, h, a + 1);
                  }
                  F2 += k;
                  k = I = r = u = q = 0;
                  f = "";
                  g = e.charCodeAt(++l);
                  break;
                case 125:
                case 59:
                  f = (0 < r ? f.replace(N, "") : f).trim();
                  if (1 < (t = f.length))
                    switch (u === 0 && (q = f.charCodeAt(0), q === 45 || 96 < q && 123 > q) && (t = (f = f.replace(" ", ":")).length), 0 < A && (C = H(1, f, c, d, D, z, p.length, h, a, h)) !== void 0 && (t = (f = C.trim()).length) === 0 && (f = "\0\0"), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {
                      case 0:
                        break;
                      case 64:
                        if (g === 105 || g === 99) {
                          G2 += f + e.charAt(l);
                          break;
                        }
                      default:
                        f.charCodeAt(t - 1) !== 58 && (p += P(f, q, g, f.charCodeAt(2)));
                    }
                  I = r = u = q = 0;
                  f = "";
                  g = e.charCodeAt(++l);
              }
            }
            switch (g) {
              case 13:
              case 10:
                b === 47 ? b = 0 : 1 + q === 0 && h !== 107 && 0 < f.length && (r = 1, f += "\0");
                0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);
                z = 1;
                D++;
                break;
              case 59:
              case 125:
                if (b + n + v + m === 0) {
                  z++;
                  break;
                }
              default:
                z++;
                y = e.charAt(l);
                switch (g) {
                  case 9:
                  case 32:
                    if (n + m + b === 0)
                      switch (x) {
                        case 44:
                        case 58:
                        case 9:
                        case 32:
                          y = "";
                          break;
                        default:
                          g !== 32 && (y = " ");
                      }
                    break;
                  case 0:
                    y = "\\0";
                    break;
                  case 12:
                    y = "\\f";
                    break;
                  case 11:
                    y = "\\v";
                    break;
                  case 38:
                    n + b + m === 0 && (r = I = 1, y = "\f" + y);
                    break;
                  case 108:
                    if (n + b + m + E === 0 && 0 < u)
                      switch (l - u) {
                        case 2:
                          x === 112 && e.charCodeAt(l - 3) === 58 && (E = x);
                        case 8:
                          K === 111 && (E = K);
                      }
                    break;
                  case 58:
                    n + b + m === 0 && (u = l);
                    break;
                  case 44:
                    b + v + n + m === 0 && (r = 1, y += "\r");
                    break;
                  case 34:
                  case 39:
                    b === 0 && (n = n === g ? 0 : n === 0 ? g : n);
                    break;
                  case 91:
                    n + b + v === 0 && m++;
                    break;
                  case 93:
                    n + b + v === 0 && m--;
                    break;
                  case 41:
                    n + b + m === 0 && v--;
                    break;
                  case 40:
                    if (n + b + m === 0) {
                      if (q === 0)
                        switch (2 * x + 3 * K) {
                          case 533:
                            break;
                          default:
                            q = 1;
                        }
                      v++;
                    }
                    break;
                  case 64:
                    b + v + n + m + u + k === 0 && (k = 1);
                    break;
                  case 42:
                  case 47:
                    if (!(0 < n + m + v))
                      switch (b) {
                        case 0:
                          switch (2 * g + 3 * e.charCodeAt(l + 1)) {
                            case 235:
                              b = 47;
                              break;
                            case 220:
                              t = l, b = 42;
                          }
                          break;
                        case 42:
                          g === 47 && x === 42 && t + 2 !== l && (e.charCodeAt(t + 2) === 33 && (p += e.substring(t, l + 1)), y = "", b = 0);
                      }
                }
                b === 0 && (f += y);
            }
            K = x;
            x = g;
            l++;
          }
          t = p.length;
          if (0 < t) {
            r = c;
            if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), C !== void 0 && (p = C).length === 0))
              return G2 + p + F2;
            p = r.join(",") + "{" + p + "}";
            if (w * E !== 0) {
              w !== 2 || L(p, 2) || (E = 0);
              switch (E) {
                case 111:
                  p = p.replace(ha, ":-moz-$1") + p;
                  break;
                case 112:
                  p = p.replace(Q, "::-webkit-input-$1") + p.replace(Q, "::-moz-$1") + p.replace(Q, ":-ms-input-$1") + p;
              }
              E = 0;
            }
          }
          return G2 + p + F2;
        }
        function X(d, c, e) {
          var h = c.trim().split(ia);
          c = h;
          var a = h.length, m = d.length;
          switch (m) {
            case 0:
            case 1:
              var b = 0;
              for (d = m === 0 ? "" : d[0] + " "; b < a; ++b) {
                c[b] = Z(d, c[b], e, m).trim();
              }
              break;
            default:
              var v = b = 0;
              for (c = []; b < a; ++b) {
                for (var n = 0; n < m; ++n) {
                  c[v++] = Z(d[n] + " ", h[b], e, m).trim();
                }
              }
          }
          return c;
        }
        function Z(d, c, e) {
          var h = c.charCodeAt(0);
          33 > h && (h = (c = c.trim()).charCodeAt(0));
          switch (h) {
            case 38:
              return c.replace(F, "$1" + d.trim());
            case 58:
              return d.trim() + c.replace(F, "$1" + d.trim());
            default:
              if (0 < 1 * e && 0 < c.indexOf("\f"))
                return c.replace(F, (d.charCodeAt(0) === 58 ? "" : "$1") + d.trim());
          }
          return d + c;
        }
        function P(d, c, e, h) {
          var a = d + ";", m = 2 * c + 3 * e + 4 * h;
          if (m === 944) {
            d = a.indexOf(":", 9) + 1;
            var b = a.substring(d, a.length - 1).trim();
            b = a.substring(0, d).trim() + b + ";";
            return w === 1 || w === 2 && L(b, 1) ? "-webkit-" + b + b : b;
          }
          if (w === 0 || w === 2 && !L(a, 1))
            return a;
          switch (m) {
            case 1015:
              return a.charCodeAt(10) === 97 ? "-webkit-" + a + a : a;
            case 951:
              return a.charCodeAt(3) === 116 ? "-webkit-" + a + a : a;
            case 963:
              return a.charCodeAt(5) === 110 ? "-webkit-" + a + a : a;
            case 1009:
              if (a.charCodeAt(4) !== 100)
                break;
            case 969:
            case 942:
              return "-webkit-" + a + a;
            case 978:
              return "-webkit-" + a + "-moz-" + a + a;
            case 1019:
            case 983:
              return "-webkit-" + a + "-moz-" + a + "-ms-" + a + a;
            case 883:
              if (a.charCodeAt(8) === 45)
                return "-webkit-" + a + a;
              if (0 < a.indexOf("image-set(", 11))
                return a.replace(ja, "$1-webkit-$2") + a;
              break;
            case 932:
              if (a.charCodeAt(4) === 45)
                switch (a.charCodeAt(5)) {
                  case 103:
                    return "-webkit-box-" + a.replace("-grow", "") + "-webkit-" + a + "-ms-" + a.replace("grow", "positive") + a;
                  case 115:
                    return "-webkit-" + a + "-ms-" + a.replace("shrink", "negative") + a;
                  case 98:
                    return "-webkit-" + a + "-ms-" + a.replace("basis", "preferred-size") + a;
                }
              return "-webkit-" + a + "-ms-" + a + a;
            case 964:
              return "-webkit-" + a + "-ms-flex-" + a + a;
            case 1023:
              if (a.charCodeAt(8) !== 99)
                break;
              b = a.substring(a.indexOf(":", 15)).replace("flex-", "").replace("space-between", "justify");
              return "-webkit-box-pack" + b + "-webkit-" + a + "-ms-flex-pack" + b + a;
            case 1005:
              return ka.test(a) ? a.replace(aa, ":-webkit-") + a.replace(aa, ":-moz-") + a : a;
            case 1e3:
              b = a.substring(13).trim();
              c = b.indexOf("-") + 1;
              switch (b.charCodeAt(0) + b.charCodeAt(c)) {
                case 226:
                  b = a.replace(G, "tb");
                  break;
                case 232:
                  b = a.replace(G, "tb-rl");
                  break;
                case 220:
                  b = a.replace(G, "lr");
                  break;
                default:
                  return a;
              }
              return "-webkit-" + a + "-ms-" + b + a;
            case 1017:
              if (a.indexOf("sticky", 9) === -1)
                break;
            case 975:
              c = (a = d).length - 10;
              b = (a.charCodeAt(c) === 33 ? a.substring(0, c) : a).substring(d.indexOf(":", 7) + 1).trim();
              switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {
                case 203:
                  if (111 > b.charCodeAt(8))
                    break;
                case 115:
                  a = a.replace(b, "-webkit-" + b) + ";" + a;
                  break;
                case 207:
                case 102:
                  a = a.replace(b, "-webkit-" + (102 < m ? "inline-" : "") + "box") + ";" + a.replace(b, "-webkit-" + b) + ";" + a.replace(b, "-ms-" + b + "box") + ";" + a;
              }
              return a + ";";
            case 938:
              if (a.charCodeAt(5) === 45)
                switch (a.charCodeAt(6)) {
                  case 105:
                    return b = a.replace("-items", ""), "-webkit-" + a + "-webkit-box-" + b + "-ms-flex-" + b + a;
                  case 115:
                    return "-webkit-" + a + "-ms-flex-item-" + a.replace(ba, "") + a;
                  default:
                    return "-webkit-" + a + "-ms-flex-line-pack" + a.replace("align-content", "").replace(ba, "") + a;
                }
              break;
            case 973:
            case 989:
              if (a.charCodeAt(3) !== 45 || a.charCodeAt(4) === 122)
                break;
            case 931:
            case 953:
              if (la.test(d) === true)
                return (b = d.substring(d.indexOf(":") + 1)).charCodeAt(0) === 115 ? P(d.replace("stretch", "fill-available"), c, e, h).replace(":fill-available", ":stretch") : a.replace(b, "-webkit-" + b) + a.replace(b, "-moz-" + b.replace("fill-", "")) + a;
              break;
            case 962:
              if (a = "-webkit-" + a + (a.charCodeAt(5) === 102 ? "-ms-" + a : "") + a, e + h === 211 && a.charCodeAt(13) === 105 && 0 < a.indexOf("transform", 10))
                return a.substring(0, a.indexOf(";", 27) + 1).replace(ma, "$1-webkit-$2") + a;
          }
          return a;
        }
        function L(d, c) {
          var e = d.indexOf(c === 1 ? ":" : "{"), h = d.substring(0, c !== 3 ? e : 10);
          e = d.substring(e + 1, d.length - 1);
          return R(c !== 2 ? h : h.replace(na, "$1"), e, c);
        }
        function ea(d, c) {
          var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));
          return e !== c + ";" ? e.replace(oa, " or ($1)").substring(4) : "(" + c + ")";
        }
        function H(d, c, e, h, a, m, b, v, n, q) {
          for (var g = 0, x = c, w2; g < A; ++g) {
            switch (w2 = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {
              case void 0:
              case false:
              case true:
              case null:
                break;
              default:
                x = w2;
            }
          }
          if (x !== c)
            return x;
        }
        function T(d) {
          switch (d) {
            case void 0:
            case null:
              A = S.length = 0;
              break;
            default:
              switch (d.constructor) {
                case Array:
                  for (var c = 0, e = d.length; c < e; ++c) {
                    T(d[c]);
                  }
                  break;
                case Function:
                  S[A++] = d;
                  break;
                case Boolean:
                  Y = !!d | 0;
              }
          }
          return T;
        }
        function U(d) {
          d = d.prefix;
          d !== void 0 && (R = null, d ? typeof d !== "function" ? w = 1 : (w = 2, R = d) : w = 0);
          return U;
        }
        function B(d, c) {
          var e = d;
          33 > e.charCodeAt(0) && (e = e.trim());
          V = e;
          e = [V];
          if (0 < A) {
            var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);
            h !== void 0 && typeof h === "string" && (c = h);
          }
          var a = M(O, e, c, 0, 0);
          0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), h !== void 0 && (a = h));
          V = "";
          E = 0;
          z = D = 1;
          return a;
        }
        var ca = /^\0+/g, N = /[\0\r\f]/g, aa = /: */g, ka = /zoo|gra/, ma = /([,: ])(transform)/g, ia = /,\r+?/g, F = /([\t\r\n ])*\f?&/g, fa = /@(k\w+)\s*(\S*)\s*/, Q = /::(place)/g, ha = /:(read-only)/g, G = /[svh]\w+-[tblr]{2}/, da = /\(\s*(.*)\s*\)/g, oa = /([\s\S]*?);/g, ba = /-self|flex-/g, na = /[^]*?(:[rp][el]a[\w-]+)[^]*/, la = /stretch|:\s*\w+\-(?:conte|avail)/, ja = /([^-])(image-set\()/, z = 1, D = 1, E = 0, w = 1, O = [], S = [], A = 0, R = null, Y = 0, V = "";
        B.use = T;
        B.set = U;
        W !== void 0 && U(W);
        return B;
      }
      module.exports = stylis_min;
    }
  });

  // node_modules/stylis-rule-sheet/index.js
  var require_stylis_rule_sheet = __commonJS({
    "node_modules/stylis-rule-sheet/index.js"(exports, module) {
      (function(factory) {
        typeof exports === "object" && typeof module !== "undefined" ? module["exports"] = factory() : typeof define === "function" && define["amd"] ? define(factory()) : window["stylisRuleSheet"] = factory();
      })(function() {
        "use strict";
        return function(insertRule) {
          var delimiter = "/*|*/";
          var needle = delimiter + "}";
          function toSheet(block) {
            if (block)
              try {
                insertRule(block + "}");
              } catch (e) {
              }
          }
          return function ruleSheet(context, content, selectors, parents, line, column, length, ns, depth, at) {
            switch (context) {
              case 1:
                if (depth === 0 && content.charCodeAt(0) === 64)
                  return insertRule(content + ";"), "";
                break;
              case 2:
                if (ns === 0)
                  return content + delimiter;
                break;
              case 3:
                switch (ns) {
                  case 102:
                  case 112:
                    return insertRule(selectors[0] + content), "";
                  default:
                    return content + (at === 0 ? delimiter : "");
                }
              case -2:
                content.split(needle).forEach(toSheet);
            }
          };
        };
      });
    }
  });

  // node_modules/create-emotion/dist/index.cjs.js
  var require_index_cjs = __commonJS({
    "node_modules/create-emotion/dist/index.cjs.js"(exports, module) {
      "use strict";
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var memoize = _interopDefault(require_memoize_cjs());
      var unitless = _interopDefault(require_unitless_cjs());
      var hashString = _interopDefault(require_hash_cjs());
      var Stylis = _interopDefault(require_stylis_cjs());
      var stylisRuleSheet = _interopDefault(require_stylis_rule_sheet());
      var hyphenateRegex = /[A-Z]|^ms/g;
      var processStyleName = memoize(function(styleName) {
        return styleName.replace(hyphenateRegex, "-$&").toLowerCase();
      });
      var processStyleValue = function processStyleValue2(key, value) {
        if (value == null || typeof value === "boolean") {
          return "";
        }
        if (unitless[key] !== 1 && key.charCodeAt(1) !== 45 && !isNaN(value) && value !== 0) {
          return value + "px";
        }
        return value;
      };
      if (true) {
        contentValuePattern = /(attr|calc|counters?|url)\(/;
        contentValues = ["normal", "none", "counter", "open-quote", "close-quote", "no-open-quote", "no-close-quote", "initial", "inherit", "unset"];
        oldProcessStyleValue = processStyleValue;
        processStyleValue = function processStyleValue2(key, value) {
          if (key === "content") {
            if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
              console.error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
            }
          }
          return oldProcessStyleValue(key, value);
        };
      }
      var contentValuePattern;
      var contentValues;
      var oldProcessStyleValue;
      var classnames = function classnames2(args) {
        var len = args.length;
        var i = 0;
        var cls = "";
        for (; i < len; i++) {
          var arg = args[i];
          if (arg == null)
            continue;
          var toAdd = void 0;
          switch (typeof arg) {
            case "boolean":
              break;
            case "function":
              if (true) {
                console.error("Passing functions to cx is deprecated and will be removed in the next major version of Emotion.\nPlease call the function before passing it to cx.");
              }
              toAdd = classnames2([arg()]);
              break;
            case "object": {
              if (Array.isArray(arg)) {
                toAdd = classnames2(arg);
              } else {
                toAdd = "";
                for (var k in arg) {
                  if (arg[k] && k) {
                    toAdd && (toAdd += " ");
                    toAdd += k;
                  }
                }
              }
              break;
            }
            default: {
              toAdd = arg;
            }
          }
          if (toAdd) {
            cls && (cls += " ");
            cls += toAdd;
          }
        }
        return cls;
      };
      var isBrowser = typeof document !== "undefined";
      function sheetForTag(tag) {
        if (tag.sheet) {
          return tag.sheet;
        }
        for (var i = 0; i < document.styleSheets.length; i++) {
          if (document.styleSheets[i].ownerNode === tag) {
            return document.styleSheets[i];
          }
        }
      }
      function makeStyleTag(opts) {
        var tag = document.createElement("style");
        tag.setAttribute("data-emotion", opts.key || "");
        if (opts.nonce !== void 0) {
          tag.setAttribute("nonce", opts.nonce);
        }
        tag.appendChild(document.createTextNode(""));
        (opts.container !== void 0 ? opts.container : document.head).appendChild(tag);
        return tag;
      }
      var StyleSheet = /* @__PURE__ */ function() {
        function StyleSheet2(options) {
          this.isSpeedy = false;
          this.tags = [];
          this.ctr = 0;
          this.opts = options;
        }
        var _proto = StyleSheet2.prototype;
        _proto.inject = function inject() {
          if (this.injected) {
            throw new Error("already injected!");
          }
          this.tags[0] = makeStyleTag(this.opts);
          this.injected = true;
        };
        _proto.speedy = function speedy(bool) {
          if (this.ctr !== 0) {
            throw new Error("cannot change speedy now");
          }
          this.isSpeedy = !!bool;
        };
        _proto.insert = function insert(rule, sourceMap) {
          if (this.isSpeedy) {
            var tag = this.tags[this.tags.length - 1];
            var sheet = sheetForTag(tag);
            try {
              sheet.insertRule(rule, sheet.cssRules.length);
            } catch (e) {
              if (true) {
                console.warn("illegal rule", rule);
              }
            }
          } else {
            var _tag = makeStyleTag(this.opts);
            this.tags.push(_tag);
            _tag.appendChild(document.createTextNode(rule + (sourceMap || "")));
          }
          this.ctr++;
          if (this.ctr % 65e3 === 0) {
            this.tags.push(makeStyleTag(this.opts));
          }
        };
        _proto.flush = function flush() {
          this.tags.forEach(function(tag) {
            return tag.parentNode.removeChild(tag);
          });
          this.tags = [];
          this.ctr = 0;
          this.injected = false;
        };
        return StyleSheet2;
      }();
      function createEmotion(context, options) {
        if (context.__SECRET_EMOTION__ !== void 0) {
          return context.__SECRET_EMOTION__;
        }
        if (options === void 0)
          options = {};
        var key = options.key || "css";
        if (true) {
          if (/[^a-z-]/.test(key)) {
            throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
          }
        }
        var current;
        function insertRule(rule) {
          current += rule;
          if (isBrowser) {
            sheet.insert(rule, currentSourceMap);
          }
        }
        var insertionPlugin = stylisRuleSheet(insertRule);
        var stylisOptions;
        if (options.prefix !== void 0) {
          stylisOptions = {
            prefix: options.prefix
          };
        }
        var caches = {
          registered: {},
          inserted: {},
          nonce: options.nonce,
          key
        };
        var sheet = new StyleSheet(options);
        if (isBrowser) {
          sheet.inject();
        }
        var stylis = new Stylis(stylisOptions);
        stylis.use(options.stylisPlugins)(insertionPlugin);
        var currentSourceMap = "";
        function handleInterpolation(interpolation, couldBeSelectorInterpolation) {
          if (interpolation == null) {
            return "";
          }
          switch (typeof interpolation) {
            case "boolean":
              return "";
            case "function":
              if (interpolation.__emotion_styles !== void 0) {
                var selector = interpolation.toString();
                if (selector === "NO_COMPONENT_SELECTOR" && true) {
                  throw new Error("Component selectors can only be used in conjunction with babel-plugin-emotion.");
                }
                return selector;
              }
              if (this === void 0 && true) {
                console.error("Interpolating functions in css calls is deprecated and will be removed in the next major version of Emotion.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
              }
              return handleInterpolation.call(this, this === void 0 ? interpolation() : interpolation(this.mergedProps, this.context), couldBeSelectorInterpolation);
            case "object":
              return createStringFromObject.call(this, interpolation);
            default:
              var cached = caches.registered[interpolation];
              return couldBeSelectorInterpolation === false && cached !== void 0 ? cached : interpolation;
          }
        }
        var objectToStringCache = new WeakMap();
        function createStringFromObject(obj) {
          if (objectToStringCache.has(obj)) {
            return objectToStringCache.get(obj);
          }
          var string = "";
          if (Array.isArray(obj)) {
            obj.forEach(function(interpolation) {
              string += handleInterpolation.call(this, interpolation, false);
            }, this);
          } else {
            Object.keys(obj).forEach(function(key2) {
              if (typeof obj[key2] !== "object") {
                if (caches.registered[obj[key2]] !== void 0) {
                  string += key2 + "{" + caches.registered[obj[key2]] + "}";
                } else {
                  string += processStyleName(key2) + ":" + processStyleValue(key2, obj[key2]) + ";";
                }
              } else {
                if (key2 === "NO_COMPONENT_SELECTOR" && true) {
                  throw new Error("Component selectors can only be used in conjunction with babel-plugin-emotion.");
                }
                if (Array.isArray(obj[key2]) && typeof obj[key2][0] === "string" && caches.registered[obj[key2][0]] === void 0) {
                  obj[key2].forEach(function(value) {
                    string += processStyleName(key2) + ":" + processStyleValue(key2, value) + ";";
                  });
                } else {
                  string += key2 + "{" + handleInterpolation.call(this, obj[key2], false) + "}";
                }
              }
            }, this);
          }
          objectToStringCache.set(obj, string);
          return string;
        }
        var name;
        var stylesWithLabel;
        var labelPattern = /label:\s*([^\s;\n{]+)\s*;/g;
        var createClassName = function createClassName2(styles, identifierName) {
          return hashString(styles + identifierName) + identifierName;
        };
        if (true) {
          var oldCreateClassName = createClassName;
          var sourceMappingUrlPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
          createClassName = function createClassName2(styles, identifierName) {
            return oldCreateClassName(styles.replace(sourceMappingUrlPattern, function(sourceMap) {
              currentSourceMap = sourceMap;
              return "";
            }), identifierName);
          };
        }
        var createStyles = function createStyles2(strings) {
          var stringMode = true;
          var styles = "";
          var identifierName = "";
          if (strings == null || strings.raw === void 0) {
            stringMode = false;
            styles += handleInterpolation.call(this, strings, false);
          } else {
            styles += strings[0];
          }
          for (var _len = arguments.length, interpolations = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            interpolations[_key - 1] = arguments[_key];
          }
          interpolations.forEach(function(interpolation, i) {
            styles += handleInterpolation.call(this, interpolation, styles.charCodeAt(styles.length - 1) === 46);
            if (stringMode === true && strings[i + 1] !== void 0) {
              styles += strings[i + 1];
            }
          }, this);
          stylesWithLabel = styles;
          styles = styles.replace(labelPattern, function(match, p1) {
            identifierName += "-" + p1;
            return "";
          });
          name = createClassName(styles, identifierName);
          return styles;
        };
        if (true) {
          var oldStylis = stylis;
          stylis = function stylis2(selector, styles) {
            oldStylis(selector, styles);
            currentSourceMap = "";
          };
        }
        function insert(scope, styles) {
          if (caches.inserted[name] === void 0) {
            current = "";
            stylis(scope, styles);
            caches.inserted[name] = current;
          }
        }
        var css = function css2() {
          var styles = createStyles.apply(this, arguments);
          var selector = key + "-" + name;
          if (caches.registered[selector] === void 0) {
            caches.registered[selector] = stylesWithLabel;
          }
          insert("." + selector, styles);
          return selector;
        };
        var keyframes = function keyframes2() {
          var styles = createStyles.apply(this, arguments);
          var animation = "animation-" + name;
          insert("", "@keyframes " + animation + "{" + styles + "}");
          return animation;
        };
        var injectGlobal = function injectGlobal2() {
          var styles = createStyles.apply(this, arguments);
          insert("", styles);
        };
        function getRegisteredStyles(registeredStyles, classNames) {
          var rawClassName = "";
          classNames.split(" ").forEach(function(className) {
            if (caches.registered[className] !== void 0) {
              registeredStyles.push(className);
            } else {
              rawClassName += className + " ";
            }
          });
          return rawClassName;
        }
        function merge(className, sourceMap) {
          var registeredStyles = [];
          var rawClassName = getRegisteredStyles(registeredStyles, className);
          if (registeredStyles.length < 2) {
            return className;
          }
          return rawClassName + css(registeredStyles, sourceMap);
        }
        function cx() {
          for (var _len2 = arguments.length, classNames = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            classNames[_key2] = arguments[_key2];
          }
          return merge(classnames(classNames));
        }
        function hydrateSingleId(id) {
          caches.inserted[id] = true;
        }
        function hydrate(ids) {
          ids.forEach(hydrateSingleId);
        }
        function flush() {
          if (isBrowser) {
            sheet.flush();
            sheet.inject();
          }
          caches.inserted = {};
          caches.registered = {};
        }
        if (isBrowser) {
          var chunks = document.querySelectorAll("[data-emotion-" + key + "]");
          Array.prototype.forEach.call(chunks, function(node) {
            sheet.tags[0].parentNode.insertBefore(node, sheet.tags[0]);
            node.getAttribute("data-emotion-" + key).split(" ").forEach(hydrateSingleId);
          });
        }
        var emotion = {
          flush,
          hydrate,
          cx,
          merge,
          getRegisteredStyles,
          injectGlobal,
          keyframes,
          css,
          sheet,
          caches
        };
        context.__SECRET_EMOTION__ = emotion;
        return emotion;
      }
      module.exports = createEmotion;
    }
  });

  // node_modules/emotion/dist/index.cjs.js
  var require_index_cjs2 = __commonJS({
    "node_modules/emotion/dist/index.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var createEmotion = _interopDefault(require_index_cjs());
      var context = typeof global !== "undefined" ? global : {};
      var _createEmotion = createEmotion(context);
      var flush = _createEmotion.flush;
      var hydrate = _createEmotion.hydrate;
      var cx = _createEmotion.cx;
      var merge = _createEmotion.merge;
      var getRegisteredStyles = _createEmotion.getRegisteredStyles;
      var injectGlobal = _createEmotion.injectGlobal;
      var keyframes = _createEmotion.keyframes;
      var css = _createEmotion.css;
      var sheet = _createEmotion.sheet;
      var caches = _createEmotion.caches;
      exports.flush = flush;
      exports.hydrate = hydrate;
      exports.cx = cx;
      exports.merge = merge;
      exports.getRegisteredStyles = getRegisteredStyles;
      exports.injectGlobal = injectGlobal;
      exports.keyframes = keyframes;
      exports.css = css;
      exports.sheet = sheet;
      exports.caches = caches;
    }
  });

  // node_modules/@rescript/std/lib/js/js_null_undefined.js
  var require_js_null_undefined = __commonJS({
    "node_modules/@rescript/std/lib/js/js_null_undefined.js"(exports) {
      "use strict";
      var Caml_option = require_caml_option();
      function bind(x, f) {
        if (x == null) {
          return x;
        } else {
          return f(x);
        }
      }
      function iter(x, f) {
        if (!(x == null)) {
          return f(x);
        }
      }
      function fromOption(x) {
        if (x !== void 0) {
          return Caml_option.valFromOption(x);
        }
      }
      var from_opt = fromOption;
      exports.bind = bind;
      exports.iter = iter;
      exports.fromOption = fromOption;
      exports.from_opt = from_opt;
    }
  });

  // node_modules/@ahrefs/bs-emotion/src/Emotion.bs.js
  var require_Emotion_bs = __commonJS({
    "node_modules/@ahrefs/bs-emotion/src/Emotion.bs.js"(exports) {
      "use strict";
      var Css = require_Css_bs();
      var Curry = require_curry();
      var Js_dict = require_js_dict();
      var Emotion = require_index_cjs2();
      var Belt_List = require_belt_List();
      var Js_null_undefined = require_js_null_undefined();
      var Css$1 = Css;
      var Declaration = {};
      function toDict(declarations) {
        return Js_dict.fromList(Belt_List.flatten(declarations));
      }
      var Declarations = {
        toDict
      };
      var Selector = {};
      function p(prop, value) {
        return {
          hd: [
            prop,
            value
          ],
          tl: 0
        };
      }
      function important(v) {
        if (!v) {
          return v;
        }
        if (v.tl) {
          return v;
        }
        var match = v.hd;
        return {
          hd: [
            match[0],
            match[1] + " !important"
          ],
          tl: 0
        };
      }
      function label(x) {
        return p("label", x);
      }
      function display(x) {
        return p("display", Css.Display.toString(x));
      }
      function boxSizing(x) {
        return p("boxSizing", Css.BoxSizing.toString(x));
      }
      function position(x) {
        return p("position", Css.Position.toString(x));
      }
      function top(x) {
        return p("top", Css.LengthPercentageAuto.toString(x));
      }
      function bottom(x) {
        return p("bottom", Css.LengthPercentageAuto.toString(x));
      }
      function left(x) {
        return p("left", Css.LengthPercentageAuto.toString(x));
      }
      function right(x) {
        return p("right", Css.LengthPercentageAuto.toString(x));
      }
      function width(x) {
        return p("width", Css.LengthPercentageAuto.toString(x));
      }
      function minWidth(x) {
        return p("minWidth", Css.LengthPercentageAuto.toString(x));
      }
      function maxWidth(x) {
        return p("maxWidth", Css.LengthPercentageNone.toString(x));
      }
      function height(x) {
        return p("height", Css.LengthPercentageAuto.toString(x));
      }
      function minHeight(x) {
        return p("minHeight", Css.LengthPercentageAuto.toString(x));
      }
      function maxHeight(x) {
        return p("maxHeight", Css.LengthPercentageNone.toString(x));
      }
      function margin(x) {
        return p("margin", Css.LengthPercentageAuto.toString(x));
      }
      function margin2(v, h) {
        return p("margin", Css.LengthPercentageAuto.toString2(v, h));
      }
      function margin3(t, h, b) {
        return p("margin", Css.LengthPercentageAuto.toString3(t, h, b));
      }
      function margin4(t, r, b, l) {
        return p("margin", Css.LengthPercentageAuto.toString4(t, r, b, l));
      }
      function marginLeft(x) {
        return p("marginLeft", Css.LengthPercentageAuto.toString(x));
      }
      function marginRight(x) {
        return p("marginRight", Css.LengthPercentageAuto.toString(x));
      }
      function marginTop(x) {
        return p("marginTop", Css.LengthPercentageAuto.toString(x));
      }
      function marginBottom(x) {
        return p("marginBottom", Css.LengthPercentageAuto.toString(x));
      }
      function padding(x) {
        return p("padding", Css.LengthPercentage.toString(x));
      }
      function padding2(v, h) {
        return p("padding", Css.LengthPercentage.toString2(v, h));
      }
      function padding3(t, h, b) {
        return p("padding", Css.LengthPercentage.toString3(t, h, b));
      }
      function padding4(t, r, b, l) {
        return p("padding", Css.LengthPercentage.toString4(t, r, b, l));
      }
      function paddingLeft(x) {
        return p("paddingLeft", Css.LengthPercentage.toString(x));
      }
      function paddingRight(x) {
        return p("paddingRight", Css.LengthPercentage.toString(x));
      }
      function paddingTop(x) {
        return p("paddingTop", Css.LengthPercentage.toString(x));
      }
      function paddingBottom(x) {
        return p("paddingBottom", Css.LengthPercentage.toString(x));
      }
      function border(width2, style, color2) {
        return p("border", Css.Border.toString(width2, style, color2));
      }
      function borderWidth(x) {
        return p("borderWidth", Css.BorderWidth.toString(x));
      }
      function borderStyle(x) {
        return p("borderStyle", Css.BorderStyle.toString(x));
      }
      function borderColor(x) {
        return p("borderColor", Css.Color.toString(x));
      }
      function borderLeft(width2, style, color2) {
        return p("borderLeft", Css.Border.toString(width2, style, color2));
      }
      function borderLeftWidth(x) {
        return p("borderLeftWidth", Css.BorderWidth.toString(x));
      }
      function borderLeftStyle(x) {
        return p("borderLeftStyle", Css.BorderStyle.toString(x));
      }
      function borderLeftColor(x) {
        return p("borderLeftColor", Css.Color.toString(x));
      }
      function borderRight(width2, style, color2) {
        return p("borderRight", Css.Border.toString(width2, style, color2));
      }
      function borderRightWidth(x) {
        return p("borderRightWidth", Css.BorderWidth.toString(x));
      }
      function borderRightStyle(x) {
        return p("borderRightStyle", Css.BorderStyle.toString(x));
      }
      function borderRightColor(x) {
        return p("borderRightColor", Css.Color.toString(x));
      }
      function borderTop(width2, style, color2) {
        return p("borderTop", Css.Border.toString(width2, style, color2));
      }
      function borderTopWidth(x) {
        return p("borderTopWidth", Css.BorderWidth.toString(x));
      }
      function borderTopStyle(x) {
        return p("borderTopStyle", Css.BorderStyle.toString(x));
      }
      function borderTopColor(x) {
        return p("borderTopColor", Css.Color.toString(x));
      }
      function borderBottom(width2, style, color2) {
        return p("borderBottom", Css.Border.toString(width2, style, color2));
      }
      function borderBottomWidth(x) {
        return p("borderBottomWidth", Css.BorderWidth.toString(x));
      }
      function borderBottomStyle(x) {
        return p("borderBottomStyle", Css.BorderStyle.toString(x));
      }
      function borderBottomColor(x) {
        return p("borderBottomColor", Css.Color.toString(x));
      }
      function borderRadius(x) {
        return p("borderRadius", Css.LengthPercentage.toString(x));
      }
      function borderTopLeftRadius(x) {
        return p("borderTopLeftRadius", Css.LengthPercentage.toString(x));
      }
      function borderTopRightRadius(x) {
        return p("borderTopRightRadius", Css.LengthPercentage.toString(x));
      }
      function borderBottomLeftRadius(x) {
        return p("borderBottomLeftRadius", Css.LengthPercentage.toString(x));
      }
      function borderBottomRightRadius(x) {
        return p("borderBottomRightRadius", Css.LengthPercentage.toString(x));
      }
      function borderCollapse(x) {
        return p("borderCollapse", Css.BorderCollapse.toString(x));
      }
      function borderSpacing(x) {
        return p("borderSpacing", Css.Length.toString(x));
      }
      function borderSpacing2(x, y) {
        return p("borderSpacing", Css.Length.toString2(x, y));
      }
      function backgroundAttachment(x) {
        return p("backgroundAttachment", Css.BackgroundAttachment.toString(x));
      }
      function backgroundAttachments(x) {
        return p("backgroundAttachment", Css.Helpers.joinWith(Belt_List.map(x, Css.BackgroundAttachment.toString), ", "));
      }
      function backgroundBlendMode(x) {
        return p("backgroundBlendMode", Css.BackgroundBlendMode.toString(x));
      }
      function backgroundBlendModes(x) {
        return p("backgroundBlendMode", Css.Helpers.joinWith(Belt_List.map(x, Css.BackgroundBlendMode.toString), ", "));
      }
      function backgroundClip(x) {
        return p("backgroundClip", Css.BackgroundBox.toString(x));
      }
      function backgroundColor(x) {
        return p("backgroundColor", Css.Color.toString(x));
      }
      function backgroundImage(x) {
        return p("backgroundImage", Css.BackgroundImage.toString(x));
      }
      function backgroundImages(x) {
        return p("backgroundImage", Css.Helpers.joinWith(Belt_List.map(x, Css.BackgroundImage.toString), ", "));
      }
      function backgroundOrigin(x) {
        return p("backgroundOrigin", Css.BackgroundBox.toString(x));
      }
      function backgroundPosition(x) {
        return p("backgroundPosition", Css.BackgroundPosition.toString(x));
      }
      function backgroundPositions(x) {
        return p("backgroundPosition", Css.Helpers.joinWith(Belt_List.map(x, Css.BackgroundPosition.toString), ", "));
      }
      function backgroundRepeat(x) {
        return p("backgroundRepeat", Css.BackgroundRepeat.toString(x));
      }
      function backgroundRepeat2(x) {
        return p("backgroundRepeat", function(param) {
          return Css.BackgroundRepeat.toString2(x, param);
        });
      }
      function backgroundSize(x) {
        return p("backgroundSize", Css.BackgroundSize.toString(x));
      }
      function backgroundSizes(x) {
        return p("backgroundSize", Css.Helpers.joinWith(Belt_List.map(x, Css.BackgroundSize.toString), ", "));
      }
      function boxShadow(xOpt, yOpt, blurOpt, spreadOpt, insetOpt, color2) {
        var x = xOpt !== void 0 ? xOpt : "zero";
        var y = yOpt !== void 0 ? yOpt : "zero";
        var blur = blurOpt !== void 0 ? blurOpt : "zero";
        var spread = spreadOpt !== void 0 ? spreadOpt : "zero";
        var inset2 = insetOpt !== void 0 ? insetOpt : false;
        return p("boxShadow", Css.BoxShadow.toString(x, y, blur, spread, inset2, color2));
      }
      function boxShadows(x) {
        return p("boxShadow", Css.Helpers.joinWith(Belt_List.mapU(x, function(param) {
          return Css.BoxShadow.toString(param[0], param[1], param[2], param[3], param[5], param[4]);
        }), ", "));
      }
      function clipPath(x) {
        return p("clipPath", Css.ClipPath.toString(x));
      }
      function visibility(x) {
        return p("visibility", Css.Visibility.toString(x));
      }
      function backfaceVisibility(x) {
        return p("backfaceVisibility", Css.Visibility.toString(x));
      }
      function color(x) {
        return p("color", Css.Color.toString(x));
      }
      function fontFamily(x) {
        return p("fontFamily", x);
      }
      function fontSize(x) {
        return p("fontSize", Css.LengthPercentage.toString(x));
      }
      function fontWeight(x) {
        return p("fontWeight", "" + x);
      }
      function fontStyle(x) {
        return p("fontStyle", Css.FontStyle.toString(x));
      }
      function fontVariant(x) {
        return p("fontVariant", Css.FontVariant.toString(x));
      }
      function fontKerning(x) {
        return p("fontKerning", Css.FontKerning.toString(x));
      }
      function fontStretch(x) {
        return p("fontStretch", Css.FontStretch.toString(x));
      }
      function src(srcs) {
        return p("src", Css.Helpers.joinWith(Belt_List.map(srcs, function(param) {
          return Css.FontSrc.toString(param[1], param[0]);
        }), ", "));
      }
      function lineHeight(x) {
        return p("lineHeight", Css.LineHeight.toString(x));
      }
      function letterSpacing(x) {
        return p("letterSpacing", Css.LetterSpacing.toString(x));
      }
      function hyphens(x) {
        return p("hyphens", Css.Hyphens.toString(x));
      }
      function textAlign(x) {
        return p("textAlign", Css.TextAlign.toString(x));
      }
      function textDecoration(x) {
        return p("textDecoration", Css.TextDecorationLine.toString(x));
      }
      function textDecorationColor(x) {
        return p("textDecorationColor", Css.Color.toString(x));
      }
      function textDecorationStyle(x) {
        return p("textDecorationStyle", Css.TextDecorationStyle.toString(x));
      }
      function textIndent(x) {
        return p("textIndent", Css.LengthPercentage.toString(x));
      }
      function textOverflow(x) {
        return p("textOverflow", Css.TextOverflow.toString(x));
      }
      function textTransform(x) {
        return p("textTransform", Css.TextTransform.toString(x));
      }
      function textShadow(xOpt, yOpt, blurOpt, color2) {
        var x = xOpt !== void 0 ? xOpt : "zero";
        var y = yOpt !== void 0 ? yOpt : "zero";
        var blur = blurOpt !== void 0 ? blurOpt : "zero";
        return p("textShadow", Css.TextShadow.toString(x, y, blur, color2));
      }
      function textShadows(xs) {
        return p("textShadow", Css.Helpers.joinWith(Belt_List.mapU(xs, function(param) {
          return Css.TextShadow.toString(param[0], param[1], param[2], param[3]);
        }), ", "));
      }
      function $$float(x) {
        return p("float", Css.Float.toString(x));
      }
      function clear(x) {
        return p("clear", Css.Clear.toString(x));
      }
      function overflow(x) {
        return p("overflow", Css.Overflow.toString(x));
      }
      function overflowX(x) {
        return p("overflow-x", Css.Overflow.toString(x));
      }
      function overflowY(x) {
        return p("overflow-y", Css.Overflow.toString(x));
      }
      function overflowWrap(x) {
        return p("overflow-wrap", Css.WordWrap.toString(x));
      }
      function whiteSpace(x) {
        return p("whiteSpace", Css.WhiteSpace.toString(x));
      }
      function userSelect(x) {
        return p("userSelect", Css.UserSelect.toString(x));
      }
      function verticalAlign(x) {
        return p("verticalAlign", Css.VerticalAlign.toString(x));
      }
      function wordBreak(x) {
        return p("wordBreak", Css.WordBreak.toString(x));
      }
      function wordSpacing(x) {
        return p("wordSpacing", Css.WordSpacing.toString(x));
      }
      function wordWrap(x) {
        return p("wordWrap", Css.WordWrap.toString(x));
      }
      function direction(x) {
        return p("direction", Css.Direction.toString(x));
      }
      function listStyle(style, position2, image) {
        return p("listStyle", Css.ListStyle.toString(style, position2, image));
      }
      function listStyleType(x) {
        return p("listStyleType", Css.ListStyleType.toString(x));
      }
      function listStylePosition(x) {
        return p("listStylePosition", Css.ListStylePosition.toString(x));
      }
      function listStyleImage(x) {
        return p("listStyleImage", Css.ListStyleImage.toString(x));
      }
      function opacity(x) {
        return p("opacity", "" + x);
      }
      function cursor(x) {
        return p("cursor", Css.Cursor.toString(x));
      }
      function pointerEvents(x) {
        return p("pointerEvents", Css.PointerEvents.toString(x));
      }
      function outline(size, style, color2) {
        return p("outline", Css.Outline.toString(size, style, color2));
      }
      function outlineStyle(x) {
        return p("outlineStyle", Css.OutlineStyle.toString(x));
      }
      function outlineWidth(x) {
        return p("outlineWidth", Css.Length.toString(x));
      }
      function outlineColor(x) {
        return p("outlineColor", Css.Color.toString(x));
      }
      function outlineOffset(x) {
        return p("outlineOffset", Css.Length.toString(x));
      }
      function tableLayout(x) {
        return p("tableLayout", Css.TableLayout.toString(x));
      }
      function transition(property, duration, timingFunction, delay) {
        return p("transition", Css.Transition.toString(property, duration, delay, timingFunction));
      }
      function transitions(xs) {
        return p("transition", Css.Helpers.joinWith(Belt_List.map(xs, function(param) {
          return Css.Transition.toString(param[0], param[1], param[3], param[2]);
        }), ", "));
      }
      function transitionProperty(x) {
        return p("transitionProperty", x);
      }
      function transitionDuration(x) {
        return p("transitionDuration", Css.Timing.toString(x));
      }
      function transitionDelay(x) {
        return p("transitionDelay", Css.Timing.toString(x));
      }
      function transitionTimingFunction(x) {
        return p("transitionTimingFunction", Css.TimingFunction.toString(x));
      }
      function transform(x) {
        return p("transform", Css.Transform.toString(x));
      }
      function transforms(xs) {
        return p("transform", Css.Helpers.joinWith(Belt_List.map(xs, Css.Transform.toString), " "));
      }
      function transformOrigin(x, y) {
        return p("transformOrigin", Css.LengthPercentage.toString2(x, y));
      }
      function transformOrigin3d(x, y, z) {
        return p("transformOrigin", Css.LengthPercentage.toString3(x, y, z));
      }
      function transformStyle(x) {
        return p("transformStyle", Css.TransformStyle.toString(x));
      }
      function perspective(x) {
        return p("perspective", Css.Perspective.toString(x));
      }
      function perspectiveOrigin(x, y) {
        return p("perspectiveOrigin", Css.LengthPercentage.toString2(x, y));
      }
      function fill(x) {
        return p("fill", Css.Color.toString(x));
      }
      function fillOpacity(x) {
        return p("fillOpacity", "" + x);
      }
      function fillRule(x) {
        return p("fillRule", Css.FillRule.toString(x));
      }
      function stroke(x) {
        return p("stroke", Css.Color.toString(x));
      }
      function strokeWidth(x) {
        return p("strokeWidth", Css.LengthPercentage.toString(x));
      }
      function strokeOpacity(x) {
        return p("strokeOpacity", "" + x);
      }
      function strokeMiterlimit(x) {
        return p("strokeMiterlimit", "" + x);
      }
      function strokeLinecap(x) {
        return p("strokeLinecap", Css.StrokeLinecap.toString(x));
      }
      function strokeLinejoin(x) {
        return p("strokeLinejoin", Css.StrokeLinejoin.toString(x));
      }
      function stopColor(x) {
        return p("stopColor", Css.Color.toString(x));
      }
      function stopOpacity(x) {
        return p("stopOpacity", "" + x);
      }
      function animation(name, duration, delay, direction2, timingFunction, fillMode, playState, iterationCount) {
        return p("animation", Css.Animation.toString(name, duration, delay, direction2, timingFunction, fillMode, playState, iterationCount));
      }
      function animations(xs) {
        return p("animation", Css.Helpers.joinWith(Belt_List.mapU(xs, function(param) {
          return Css.Animation.toString(param[0], param[1], param[2], param[3], param[4], param[5], param[6], param[7]);
        }), ", "));
      }
      function animationDelay(x) {
        return p("animationDelay", Css.Timing.toString(x));
      }
      function animationDelays(x) {
        return p("animationDelay", Css.Helpers.joinWith(Belt_List.map(x, Css.Timing.toString), ", "));
      }
      function animationDirection(x) {
        return p("animationDirection", Css.AnimationDirection.toString(x));
      }
      function animationDirections(x) {
        return p("animationDirection", Css.Helpers.joinWith(Belt_List.map(x, Css.AnimationDirection.toString), ", "));
      }
      function animationDuration(x) {
        return p("animationDuration", Css.Timing.toString(x));
      }
      function animationDurations(x) {
        return p("animationDuration", Css.Helpers.joinWith(Belt_List.map(x, Css.Timing.toString), ", "));
      }
      function animationFillMode(x) {
        return p("animationFillMode", Css.AnimationFillMode.toString(x));
      }
      function animationFillModes(x) {
        return p("animationFillMode", Css.Helpers.joinWith(Belt_List.map(x, Css.AnimationFillMode.toString), ", "));
      }
      function animationIterationCount(x) {
        return p("animationIterationCount", Css.AnimationIterationCount.toString(x));
      }
      function animationIterationCounts(x) {
        return p("animationIterationCount", Css.Helpers.joinWith(Belt_List.map(x, Css.AnimationIterationCount.toString), ", "));
      }
      function animationName(x) {
        return p("animationName", x);
      }
      function animationNames(x) {
        return p("animationName", Css.Helpers.joinWith(x, ", "));
      }
      function animationPlayState(x) {
        return p("animationPlayState", Css.AnimationPlayState.toString(x));
      }
      function animationPlayStates(x) {
        return p("animationPlayState", Css.Helpers.joinWith(Belt_List.map(x, Css.AnimationPlayState.toString), ", "));
      }
      function animationTimingFunction(x) {
        return p("animationTimingFunction", Css.TimingFunction.toString(x));
      }
      function animationTimingFunctions(x) {
        return p("animationTimingFunction", Css.Helpers.joinWith(Belt_List.map(x, Css.TimingFunction.toString), ", "));
      }
      function filter(x) {
        return p("filter", Css.Filter.toString(x));
      }
      function filters(x) {
        return p("filter", Css.Helpers.joinWith(Belt_List.map(x, Css.Filter.toString), " "));
      }
      function appearance(x) {
        return p("appearance", Css.Appearance.toString(x));
      }
      function flex(x) {
        return p("flex", Curry._1(Css.Flex.Flex.toString, x));
      }
      function flexGrow(x) {
        return p("flexGrow", "" + x);
      }
      function flexShrink(x) {
        return p("flexShrink", "" + x);
      }
      function flexBasis(x) {
        return p("flexBasis", Css.LengthPercentageAuto.toString(x));
      }
      function flexDirection(x) {
        return p("flexDirection", Curry._1(Css.Flex.Direction.toString, x));
      }
      function flexWrap(x) {
        return p("flexWrap", Curry._1(Css.Flex.Wrap.toString, x));
      }
      function flexFlow(direction2, wrap2) {
        return p("flex-flow", Curry._2(Css.Flex.Flow.toString, direction2, wrap2));
      }
      function order(x) {
        return p("order", "" + x);
      }
      function gridTemplateRows(x) {
        return p("gridTemplateRows", Curry._1(Css.Grid.Template.toString, x));
      }
      function gridTemplateColumns(x) {
        return p("gridTemplateColumns", Curry._1(Css.Grid.Template.toString, x));
      }
      function gridAutoRows(x) {
        return p("gridAutoRows", Curry._1(Css.Grid.AutoRows.toString, x));
      }
      function gridAutoColumns(x) {
        return p("gridAutoColumns", Curry._1(Css.Grid.AutoColumns.toString, x));
      }
      function gridRowStart(x) {
        return p("gridRowStart", Curry._1(Css.Grid.Line.toString, x));
      }
      function gridRowEnd(x) {
        return p("gridRowEnd", Curry._1(Css.Grid.Line.toString, x));
      }
      function gridColumnStart(x) {
        return p("gridColumnStart", Curry._1(Css.Grid.Line.toString, x));
      }
      function gridColumnEnd(x) {
        return p("gridColumnEnd", Curry._1(Css.Grid.Line.toString, x));
      }
      function gridGap(x) {
        return p("gridGap", Css.LengthPercentage.toString(x));
      }
      function gridGaps(x, y) {
        return p("gridGap", Css.LengthPercentage.toString2(x, y));
      }
      function gridRowGap(x) {
        return p("gridRowGap", Curry._1(Css.Grid.Gap.toString, x));
      }
      function gridColumnGap(x) {
        return p("gridColumnGap", Curry._1(Css.Grid.Gap.toString, x));
      }
      function gridArea(x) {
        return p("gridArea", x);
      }
      function gridTemplateAreas(x) {
        return p("gridTemplateAreas", Curry._1(Css.Grid.TemplateAreas.toString, x));
      }
      function gridAutoFlow(x) {
        return p("gridAutoFlow", Curry._1(Css.Grid.AutoFlow.toString, x));
      }
      function alignSelf(x) {
        return p("alignSelf", Css.AlignSelf.toString(x));
      }
      function alignItems(x) {
        return p("alignItems", Css.AlignItems.toString(x));
      }
      function alignContent(x) {
        return p("alignContent", Css.AlignContent.toString(x));
      }
      function justifySelf(x) {
        return p("justifySelf", Css.JustifySelf.toString(x));
      }
      function justifyItems(x) {
        return p("justifyItems", Css.JustifyItems.toString(x));
      }
      function justifyContent(x) {
        return p("justifyContent", Css.JustifyContent.toString(x));
      }
      function zIndex(x) {
        return p("zIndex", "" + x);
      }
      function content(x) {
        return p("content", '"' + x + '"');
      }
      function select(selector, declarations) {
        return {
          hd: [
            selector,
            Js_dict.fromList(Belt_List.flatten(declarations))
          ],
          tl: 0
        };
      }
      function active(param) {
        return select(":active", param);
      }
      function after(param) {
        return select("::after", param);
      }
      function before(param) {
        return select("::before", param);
      }
      function checked(param) {
        return select(":checked", param);
      }
      function disabled(param) {
        return select(":disabled", param);
      }
      function firstChild(param) {
        return select(":first-child", param);
      }
      function firstOfType(param) {
        return select(":first-of-type", param);
      }
      function focus(param) {
        return select(":focus", param);
      }
      function hover(param) {
        return select(":hover", param);
      }
      function lastChild(param) {
        return select(":last-child", param);
      }
      function lastOfType(param) {
        return select(":last-of-type", param);
      }
      function link(param) {
        return select(":link", param);
      }
      function readOnly(param) {
        return select(":read-only", param);
      }
      function required(param) {
        return select(":required", param);
      }
      function visited(param) {
        return select(":visited", param);
      }
      function enabled(param) {
        return select(":enabled", param);
      }
      function noContent(param) {
        return select(":empty", param);
      }
      function $$default(param) {
        return select(":default", param);
      }
      function anyLink(param) {
        return select(":any-link", param);
      }
      function onlyChild(param) {
        return select(":only-child", param);
      }
      function onlyOfType(param) {
        return select(":only-of-type", param);
      }
      function optional(param) {
        return select(":optional", param);
      }
      function invalid(param) {
        return select(":invalid", param);
      }
      function outOfRange(param) {
        return select(":out-of-range", param);
      }
      function target(param) {
        return select(":target", param);
      }
      function firstLine(param) {
        return select("::first-line", param);
      }
      function firstLetter(param) {
        return select("::first-letter", param);
      }
      function selection(param) {
        return select("::selection", param);
      }
      function placeholder(param) {
        return select("::placeholder", param);
      }
      function not__(selector, declarations) {
        return select(":not(" + selector + ")", declarations);
      }
      function nthChild(selector, declarations) {
        return select(":nth-child(" + selector + ")", declarations);
      }
      function nthLastChild(selector, declarations) {
        return select(":nth-last-child(" + selector + ")", declarations);
      }
      function nthOfType(selector, declarations) {
        return select(":nth-of-type(" + selector + ")", declarations);
      }
      function nthLastOfType(selector, declarations) {
        return select(":nth-last-of-type(" + selector + ")", declarations);
      }
      function media(query, declarations) {
        return select("@media " + query, declarations);
      }
      function supports(query, declarations) {
        return select("@supports " + query, declarations);
      }
      function em(x) {
        return {
          NAME: "em",
          VAL: x
        };
      }
      function ex(x) {
        return {
          NAME: "ex",
          VAL: x
        };
      }
      function ch(x) {
        return {
          NAME: "ch",
          VAL: x
        };
      }
      function rem(x) {
        return {
          NAME: "rem",
          VAL: x
        };
      }
      function vw(x) {
        return {
          NAME: "vw",
          VAL: x
        };
      }
      function vh(x) {
        return {
          NAME: "vh",
          VAL: x
        };
      }
      function vmin(x) {
        return {
          NAME: "vmin",
          VAL: x
        };
      }
      function vmax(x) {
        return {
          NAME: "vmax",
          VAL: x
        };
      }
      function cm(x) {
        return {
          NAME: "cm",
          VAL: x
        };
      }
      function mm(x) {
        return {
          NAME: "mm",
          VAL: x
        };
      }
      function q(x) {
        return {
          NAME: "q",
          VAL: x
        };
      }
      function inch(x) {
        return {
          NAME: "inch",
          VAL: x
        };
      }
      function pc(x) {
        return {
          NAME: "pc",
          VAL: x
        };
      }
      function pt(x) {
        return {
          NAME: "pt",
          VAL: x
        };
      }
      function px(x) {
        return {
          NAME: "px",
          VAL: x
        };
      }
      function pct(x) {
        return {
          NAME: "pct",
          VAL: x
        };
      }
      function fr(x) {
        return {
          NAME: "fr",
          VAL: x
        };
      }
      function n(x) {
        return {
          NAME: "n",
          VAL: x
        };
      }
      function i(x) {
        return {
          NAME: "i",
          VAL: x
        };
      }
      function f(x) {
        return {
          NAME: "f",
          VAL: x
        };
      }
      function deg(x) {
        return {
          NAME: "deg",
          VAL: x
        };
      }
      function rad(x) {
        return {
          NAME: "rad",
          VAL: x
        };
      }
      function grad(x) {
        return {
          NAME: "grad",
          VAL: x
        };
      }
      function turn(x) {
        return {
          NAME: "turn",
          VAL: x
        };
      }
      function rgb(r, g, b) {
        return {
          NAME: "rgb",
          VAL: [
            r,
            g,
            b
          ]
        };
      }
      function rgba(r, g, b, a) {
        return {
          NAME: "rgba",
          VAL: [
            r,
            g,
            b,
            a
          ]
        };
      }
      function hsl(h, s2, l) {
        return {
          NAME: "hsl",
          VAL: [
            h,
            s2,
            l
          ]
        };
      }
      function hsla(h, s2, l, a) {
        return {
          NAME: "hsla",
          VAL: [
            h,
            s2,
            l,
            a
          ]
        };
      }
      function hex(x) {
        return {
          NAME: "hex",
          VAL: x
        };
      }
      function linearGradient(a, s2) {
        return {
          NAME: "linearGradient",
          VAL: [
            a,
            s2
          ]
        };
      }
      function repeatingLinearGradient(a, s2) {
        return {
          NAME: "repeatingLinearGradient",
          VAL: [
            a,
            s2
          ]
        };
      }
      function radialGradient(s2) {
        return {
          NAME: "radialGradient",
          VAL: s2
        };
      }
      function repeatingRadialGradient(s2) {
        return {
          NAME: "repeatingRadialGradient",
          VAL: s2
        };
      }
      function s(x) {
        return {
          NAME: "s",
          VAL: x
        };
      }
      function ms(x) {
        return {
          NAME: "ms",
          VAL: x
        };
      }
      function steps(i2, se) {
        return {
          NAME: "steps",
          VAL: [
            i2,
            se
          ]
        };
      }
      function cubicBezier(a, b, c, d) {
        return {
          NAME: "cubicBezier",
          VAL: [
            a,
            b,
            c,
            d
          ]
        };
      }
      function translate(x, y) {
        return {
          NAME: "translate",
          VAL: [
            x,
            y
          ]
        };
      }
      function translate3d(x, y, z) {
        return {
          NAME: "translate3d",
          VAL: [
            x,
            y,
            z
          ]
        };
      }
      function translateX(x) {
        return {
          NAME: "translateX",
          VAL: x
        };
      }
      function translateY(y) {
        return {
          NAME: "translateY",
          VAL: y
        };
      }
      function translateZ(z) {
        return {
          NAME: "translateZ",
          VAL: z
        };
      }
      function scale(x) {
        return {
          NAME: "scale",
          VAL: x
        };
      }
      function scaleXY(x, y) {
        return {
          NAME: "scaleXY",
          VAL: [
            x,
            y
          ]
        };
      }
      function scaleX(x) {
        return {
          NAME: "scaleX",
          VAL: x
        };
      }
      function scaleY(y) {
        return {
          NAME: "scaleY",
          VAL: y
        };
      }
      function scaleZ(z) {
        return {
          NAME: "scaleZ",
          VAL: z
        };
      }
      function scale3d(x, y, z) {
        return {
          NAME: "scale3d",
          VAL: [
            x,
            y,
            z
          ]
        };
      }
      function rotate(a) {
        return {
          NAME: "rotate",
          VAL: a
        };
      }
      function rotate3d(x, y, z, a) {
        return {
          NAME: "rotate3d",
          VAL: [
            x,
            y,
            z,
            a
          ]
        };
      }
      function rotateX(x) {
        return {
          NAME: "rotateX",
          VAL: x
        };
      }
      function rotateY(z) {
        return {
          NAME: "rotateY",
          VAL: z
        };
      }
      function rotateZ(z) {
        return {
          NAME: "rotateZ",
          VAL: z
        };
      }
      function skew(x, y) {
        return {
          NAME: "skew",
          VAL: [
            x,
            y
          ]
        };
      }
      function skewX(x) {
        return {
          NAME: "skewX",
          VAL: x
        };
      }
      function skewY(y) {
        return {
          NAME: "skewY",
          VAL: y
        };
      }
      function matrix(a, b, c, d, e, f2) {
        return {
          NAME: "matrix",
          VAL: [
            a,
            b,
            c,
            d,
            e,
            f2
          ]
        };
      }
      function matrix3d(a, b, c, d, e, f2, g, h, i2, j, k, l, m, n2, o, p2) {
        return {
          NAME: "matrix3d",
          VAL: [
            a,
            b,
            c,
            d,
            e,
            f2,
            g,
            h,
            i2,
            j,
            k,
            l,
            m,
            n2,
            o,
            p2
          ]
        };
      }
      function minmax(min, max) {
        return {
          NAME: "minmax",
          VAL: [
            min,
            max
          ]
        };
      }
      function fitContent(x) {
        return {
          NAME: "fitContent",
          VAL: x
        };
      }
      function repeat(value, trackList) {
        return {
          NAME: "repeat",
          VAL: [
            value,
            trackList
          ]
        };
      }
      function list(xs) {
        return {
          NAME: "list",
          VAL: xs
        };
      }
      function ident(x) {
        return {
          NAME: "ident",
          VAL: x
        };
      }
      function nIdent(n2, ident2) {
        return {
          NAME: "nIdent",
          VAL: [
            n2,
            ident2
          ]
        };
      }
      function span(x) {
        return {
          NAME: "span",
          VAL: x
        };
      }
      function areas(xs) {
        return {
          NAME: "areas",
          VAL: xs
        };
      }
      function css(extend, declarations) {
        var __x = Js_dict.fromList(Belt_List.flatten(declarations));
        return Emotion.css(Js_null_undefined.fromOption(extend), __x);
      }
      function $$global(selector, declarations) {
        var css2 = {};
        css2[selector] = Js_dict.fromList(Belt_List.flatten(declarations));
        Emotion.injectGlobal(css2);
      }
      function keyframes(frames) {
        return Emotion.keyframes(Belt_List.reduce(frames, {}, function(acc, item) {
          var stop = item[0];
          acc["" + stop + "%"] = Js_dict.fromList(Belt_List.flatten(item[1]));
          return acc;
        }));
      }
      function fontFace(declarations) {
        return $$global("@font-face", declarations);
      }
      function page(selectors, declarations) {
        if (selectors !== void 0) {
          return $$global("@page " + selectors, declarations);
        } else {
          return $$global("@page", declarations);
        }
      }
      var Calc;
      var unsafe = p;
      var auto = "auto";
      var zero = "zero";
      var none = "none";
      var transparent = "transparent";
      var currentColor = "currentColor";
      var inline = "inline";
      var listItem = "listItem";
      var block = "block";
      var inlineBlock = "inlineBlock";
      var flexBox = "flex";
      var inlineFlex = "inlineFlex";
      var grid = "grid";
      var inlineGrid = "inlineGrid";
      var table = "table";
      var inlineTable = "inlineTable";
      var tableRowGroup = "tableRowGroup";
      var tableHeaderGroup = "tableHeaderGroup";
      var tableFooterGroup = "tableFooterGroup";
      var tableRow = "tableRow";
      var tableColumnGroup = "tableColumnGroup";
      var tableColumn = "tableColumn";
      var tableCell = "tableCell";
      var tableCaption = "tableCaption";
      var absolute = "absolute";
      var $$static = "static";
      var fixed = "fixed";
      var relative = "relative";
      var sticky = "sticky";
      var hidden = "hidden";
      var dotted = "dotted";
      var dashed = "dashed";
      var solid = "solid";
      var $$double = "double";
      var groove = "groove";
      var ridge = "ridge";
      var inset = "inset";
      var outset = "outset";
      var thin = "thin";
      var medium = "medium";
      var thick = "thick";
      var linear = "linear";
      var ease = "ease";
      var easeIn = "easeIn";
      var easeOut = "easeOut";
      var easeInOut = "easeInOut";
      var stepStart = "stepStart";
      var stepEnd = "stepEnd";
      var row = "row";
      var column = "column";
      var rowReverse = "rowReverse";
      var columnReverse = "columnReverse";
      var nowrap = "nowrap";
      var wrap = "wrap";
      var wrapReverse = "wrapReverse";
      var normal = "normal";
      var flexStart = "flexStart";
      var flexEnd = "flexEnd";
      var center = "center";
      var baseline = "baseline";
      var stretch = "stretch";
      var selfStart = "selfStart";
      var selfEnd = "selfEnd";
      var spaceAround = "spaceAround";
      var spaceBetween = "spaceBetween";
      var minContent = "minContent";
      var maxContent = "maxContent";
      var autoFill = "autoFill";
      var autoFit = "autoFit";
      var gridStart = "gridStart";
      var gridEnd = "gridEnd";
      var firstBaseline = "firstBaseline";
      var lastBaseline = "lastBaseline";
      var spaceEvenly = "spaceEvenly";
      var rowDense = "rowDense";
      var columnDense = "columnDense";
      exports.Css = Css$1;
      exports.Calc = Calc;
      exports.Declaration = Declaration;
      exports.Declarations = Declarations;
      exports.Selector = Selector;
      exports.p = p;
      exports.important = important;
      exports.label = label;
      exports.display = display;
      exports.boxSizing = boxSizing;
      exports.position = position;
      exports.top = top;
      exports.bottom = bottom;
      exports.left = left;
      exports.right = right;
      exports.width = width;
      exports.minWidth = minWidth;
      exports.maxWidth = maxWidth;
      exports.height = height;
      exports.minHeight = minHeight;
      exports.maxHeight = maxHeight;
      exports.margin = margin;
      exports.margin2 = margin2;
      exports.margin3 = margin3;
      exports.margin4 = margin4;
      exports.marginLeft = marginLeft;
      exports.marginRight = marginRight;
      exports.marginTop = marginTop;
      exports.marginBottom = marginBottom;
      exports.padding = padding;
      exports.padding2 = padding2;
      exports.padding3 = padding3;
      exports.padding4 = padding4;
      exports.paddingLeft = paddingLeft;
      exports.paddingRight = paddingRight;
      exports.paddingTop = paddingTop;
      exports.paddingBottom = paddingBottom;
      exports.border = border;
      exports.borderWidth = borderWidth;
      exports.borderStyle = borderStyle;
      exports.borderColor = borderColor;
      exports.borderLeft = borderLeft;
      exports.borderLeftWidth = borderLeftWidth;
      exports.borderLeftStyle = borderLeftStyle;
      exports.borderLeftColor = borderLeftColor;
      exports.borderRight = borderRight;
      exports.borderRightWidth = borderRightWidth;
      exports.borderRightStyle = borderRightStyle;
      exports.borderRightColor = borderRightColor;
      exports.borderTop = borderTop;
      exports.borderTopWidth = borderTopWidth;
      exports.borderTopStyle = borderTopStyle;
      exports.borderTopColor = borderTopColor;
      exports.borderBottom = borderBottom;
      exports.borderBottomWidth = borderBottomWidth;
      exports.borderBottomStyle = borderBottomStyle;
      exports.borderBottomColor = borderBottomColor;
      exports.borderRadius = borderRadius;
      exports.borderTopLeftRadius = borderTopLeftRadius;
      exports.borderTopRightRadius = borderTopRightRadius;
      exports.borderBottomLeftRadius = borderBottomLeftRadius;
      exports.borderBottomRightRadius = borderBottomRightRadius;
      exports.borderCollapse = borderCollapse;
      exports.borderSpacing = borderSpacing;
      exports.borderSpacing2 = borderSpacing2;
      exports.backgroundAttachment = backgroundAttachment;
      exports.backgroundAttachments = backgroundAttachments;
      exports.backgroundBlendMode = backgroundBlendMode;
      exports.backgroundBlendModes = backgroundBlendModes;
      exports.backgroundClip = backgroundClip;
      exports.backgroundColor = backgroundColor;
      exports.backgroundImage = backgroundImage;
      exports.backgroundImages = backgroundImages;
      exports.backgroundOrigin = backgroundOrigin;
      exports.backgroundPosition = backgroundPosition;
      exports.backgroundPositions = backgroundPositions;
      exports.backgroundRepeat = backgroundRepeat;
      exports.backgroundRepeat2 = backgroundRepeat2;
      exports.backgroundSize = backgroundSize;
      exports.backgroundSizes = backgroundSizes;
      exports.boxShadow = boxShadow;
      exports.boxShadows = boxShadows;
      exports.clipPath = clipPath;
      exports.visibility = visibility;
      exports.backfaceVisibility = backfaceVisibility;
      exports.color = color;
      exports.fontFamily = fontFamily;
      exports.fontSize = fontSize;
      exports.fontWeight = fontWeight;
      exports.fontStyle = fontStyle;
      exports.fontVariant = fontVariant;
      exports.fontKerning = fontKerning;
      exports.fontStretch = fontStretch;
      exports.src = src;
      exports.lineHeight = lineHeight;
      exports.letterSpacing = letterSpacing;
      exports.hyphens = hyphens;
      exports.textAlign = textAlign;
      exports.textDecoration = textDecoration;
      exports.textDecorationColor = textDecorationColor;
      exports.textDecorationStyle = textDecorationStyle;
      exports.textIndent = textIndent;
      exports.textOverflow = textOverflow;
      exports.textTransform = textTransform;
      exports.textShadow = textShadow;
      exports.textShadows = textShadows;
      exports.$$float = $$float;
      exports.clear = clear;
      exports.overflow = overflow;
      exports.overflowX = overflowX;
      exports.overflowY = overflowY;
      exports.overflowWrap = overflowWrap;
      exports.whiteSpace = whiteSpace;
      exports.userSelect = userSelect;
      exports.verticalAlign = verticalAlign;
      exports.wordBreak = wordBreak;
      exports.wordSpacing = wordSpacing;
      exports.wordWrap = wordWrap;
      exports.direction = direction;
      exports.listStyle = listStyle;
      exports.listStyleType = listStyleType;
      exports.listStylePosition = listStylePosition;
      exports.listStyleImage = listStyleImage;
      exports.opacity = opacity;
      exports.cursor = cursor;
      exports.pointerEvents = pointerEvents;
      exports.outline = outline;
      exports.outlineStyle = outlineStyle;
      exports.outlineWidth = outlineWidth;
      exports.outlineColor = outlineColor;
      exports.outlineOffset = outlineOffset;
      exports.tableLayout = tableLayout;
      exports.transition = transition;
      exports.transitions = transitions;
      exports.transitionProperty = transitionProperty;
      exports.transitionDuration = transitionDuration;
      exports.transitionDelay = transitionDelay;
      exports.transitionTimingFunction = transitionTimingFunction;
      exports.transform = transform;
      exports.transforms = transforms;
      exports.transformOrigin = transformOrigin;
      exports.transformOrigin3d = transformOrigin3d;
      exports.transformStyle = transformStyle;
      exports.perspective = perspective;
      exports.perspectiveOrigin = perspectiveOrigin;
      exports.fill = fill;
      exports.fillOpacity = fillOpacity;
      exports.fillRule = fillRule;
      exports.stroke = stroke;
      exports.strokeWidth = strokeWidth;
      exports.strokeOpacity = strokeOpacity;
      exports.strokeMiterlimit = strokeMiterlimit;
      exports.strokeLinecap = strokeLinecap;
      exports.strokeLinejoin = strokeLinejoin;
      exports.stopColor = stopColor;
      exports.stopOpacity = stopOpacity;
      exports.animation = animation;
      exports.animations = animations;
      exports.animationDelay = animationDelay;
      exports.animationDelays = animationDelays;
      exports.animationDirection = animationDirection;
      exports.animationDirections = animationDirections;
      exports.animationDuration = animationDuration;
      exports.animationDurations = animationDurations;
      exports.animationFillMode = animationFillMode;
      exports.animationFillModes = animationFillModes;
      exports.animationIterationCount = animationIterationCount;
      exports.animationIterationCounts = animationIterationCounts;
      exports.animationName = animationName;
      exports.animationNames = animationNames;
      exports.animationPlayState = animationPlayState;
      exports.animationPlayStates = animationPlayStates;
      exports.animationTimingFunction = animationTimingFunction;
      exports.animationTimingFunctions = animationTimingFunctions;
      exports.filter = filter;
      exports.filters = filters;
      exports.appearance = appearance;
      exports.flex = flex;
      exports.flexGrow = flexGrow;
      exports.flexShrink = flexShrink;
      exports.flexBasis = flexBasis;
      exports.flexDirection = flexDirection;
      exports.flexWrap = flexWrap;
      exports.flexFlow = flexFlow;
      exports.order = order;
      exports.gridTemplateRows = gridTemplateRows;
      exports.gridTemplateColumns = gridTemplateColumns;
      exports.gridAutoRows = gridAutoRows;
      exports.gridAutoColumns = gridAutoColumns;
      exports.gridRowStart = gridRowStart;
      exports.gridRowEnd = gridRowEnd;
      exports.gridColumnStart = gridColumnStart;
      exports.gridColumnEnd = gridColumnEnd;
      exports.gridGap = gridGap;
      exports.gridGaps = gridGaps;
      exports.gridRowGap = gridRowGap;
      exports.gridColumnGap = gridColumnGap;
      exports.gridArea = gridArea;
      exports.gridTemplateAreas = gridTemplateAreas;
      exports.gridAutoFlow = gridAutoFlow;
      exports.alignSelf = alignSelf;
      exports.alignItems = alignItems;
      exports.alignContent = alignContent;
      exports.justifySelf = justifySelf;
      exports.justifyItems = justifyItems;
      exports.justifyContent = justifyContent;
      exports.zIndex = zIndex;
      exports.content = content;
      exports.unsafe = unsafe;
      exports.select = select;
      exports.active = active;
      exports.after = after;
      exports.before = before;
      exports.checked = checked;
      exports.disabled = disabled;
      exports.firstChild = firstChild;
      exports.firstOfType = firstOfType;
      exports.focus = focus;
      exports.hover = hover;
      exports.lastChild = lastChild;
      exports.lastOfType = lastOfType;
      exports.link = link;
      exports.readOnly = readOnly;
      exports.required = required;
      exports.visited = visited;
      exports.enabled = enabled;
      exports.noContent = noContent;
      exports.$$default = $$default;
      exports.default = $$default;
      exports.__esModule = true;
      exports.anyLink = anyLink;
      exports.onlyChild = onlyChild;
      exports.onlyOfType = onlyOfType;
      exports.optional = optional;
      exports.invalid = invalid;
      exports.outOfRange = outOfRange;
      exports.target = target;
      exports.firstLine = firstLine;
      exports.firstLetter = firstLetter;
      exports.selection = selection;
      exports.placeholder = placeholder;
      exports.not__ = not__;
      exports.nthChild = nthChild;
      exports.nthLastChild = nthLastChild;
      exports.nthOfType = nthOfType;
      exports.nthLastOfType = nthLastOfType;
      exports.media = media;
      exports.supports = supports;
      exports.auto = auto;
      exports.zero = zero;
      exports.none = none;
      exports.em = em;
      exports.ex = ex;
      exports.ch = ch;
      exports.rem = rem;
      exports.vw = vw;
      exports.vh = vh;
      exports.vmin = vmin;
      exports.vmax = vmax;
      exports.cm = cm;
      exports.mm = mm;
      exports.q = q;
      exports.inch = inch;
      exports.pc = pc;
      exports.pt = pt;
      exports.px = px;
      exports.pct = pct;
      exports.fr = fr;
      exports.n = n;
      exports.i = i;
      exports.f = f;
      exports.deg = deg;
      exports.rad = rad;
      exports.grad = grad;
      exports.turn = turn;
      exports.rgb = rgb;
      exports.rgba = rgba;
      exports.hsl = hsl;
      exports.hsla = hsla;
      exports.hex = hex;
      exports.transparent = transparent;
      exports.currentColor = currentColor;
      exports.linearGradient = linearGradient;
      exports.repeatingLinearGradient = repeatingLinearGradient;
      exports.radialGradient = radialGradient;
      exports.repeatingRadialGradient = repeatingRadialGradient;
      exports.inline = inline;
      exports.listItem = listItem;
      exports.block = block;
      exports.inlineBlock = inlineBlock;
      exports.flexBox = flexBox;
      exports.inlineFlex = inlineFlex;
      exports.grid = grid;
      exports.inlineGrid = inlineGrid;
      exports.table = table;
      exports.inlineTable = inlineTable;
      exports.tableRowGroup = tableRowGroup;
      exports.tableHeaderGroup = tableHeaderGroup;
      exports.tableFooterGroup = tableFooterGroup;
      exports.tableRow = tableRow;
      exports.tableColumnGroup = tableColumnGroup;
      exports.tableColumn = tableColumn;
      exports.tableCell = tableCell;
      exports.tableCaption = tableCaption;
      exports.absolute = absolute;
      exports.$$static = $$static;
      exports.fixed = fixed;
      exports.relative = relative;
      exports.sticky = sticky;
      exports.hidden = hidden;
      exports.dotted = dotted;
      exports.dashed = dashed;
      exports.solid = solid;
      exports.$$double = $$double;
      exports.groove = groove;
      exports.ridge = ridge;
      exports.inset = inset;
      exports.outset = outset;
      exports.thin = thin;
      exports.medium = medium;
      exports.thick = thick;
      exports.s = s;
      exports.ms = ms;
      exports.linear = linear;
      exports.ease = ease;
      exports.easeIn = easeIn;
      exports.easeOut = easeOut;
      exports.easeInOut = easeInOut;
      exports.stepStart = stepStart;
      exports.stepEnd = stepEnd;
      exports.steps = steps;
      exports.cubicBezier = cubicBezier;
      exports.translate = translate;
      exports.translate3d = translate3d;
      exports.translateX = translateX;
      exports.translateY = translateY;
      exports.translateZ = translateZ;
      exports.scale = scale;
      exports.scaleXY = scaleXY;
      exports.scaleX = scaleX;
      exports.scaleY = scaleY;
      exports.scaleZ = scaleZ;
      exports.scale3d = scale3d;
      exports.rotate = rotate;
      exports.rotate3d = rotate3d;
      exports.rotateX = rotateX;
      exports.rotateY = rotateY;
      exports.rotateZ = rotateZ;
      exports.skew = skew;
      exports.skewX = skewX;
      exports.skewY = skewY;
      exports.matrix = matrix;
      exports.matrix3d = matrix3d;
      exports.row = row;
      exports.column = column;
      exports.rowReverse = rowReverse;
      exports.columnReverse = columnReverse;
      exports.nowrap = nowrap;
      exports.wrap = wrap;
      exports.wrapReverse = wrapReverse;
      exports.normal = normal;
      exports.flexStart = flexStart;
      exports.flexEnd = flexEnd;
      exports.center = center;
      exports.baseline = baseline;
      exports.stretch = stretch;
      exports.selfStart = selfStart;
      exports.selfEnd = selfEnd;
      exports.spaceAround = spaceAround;
      exports.spaceBetween = spaceBetween;
      exports.minmax = minmax;
      exports.minContent = minContent;
      exports.maxContent = maxContent;
      exports.fitContent = fitContent;
      exports.repeat = repeat;
      exports.autoFill = autoFill;
      exports.autoFit = autoFit;
      exports.list = list;
      exports.ident = ident;
      exports.nIdent = nIdent;
      exports.span = span;
      exports.gridStart = gridStart;
      exports.gridEnd = gridEnd;
      exports.firstBaseline = firstBaseline;
      exports.lastBaseline = lastBaseline;
      exports.spaceEvenly = spaceEvenly;
      exports.areas = areas;
      exports.rowDense = rowDense;
      exports.columnDense = columnDense;
      exports.css = css;
      exports.$$global = $$global;
      exports.keyframes = keyframes;
      exports.fontFace = fontFace;
      exports.page = page;
    }
  });

  // node_modules/@rescript/std/lib/js/caml_hash_primitive.js
  var require_caml_hash_primitive = __commonJS({
    "node_modules/@rescript/std/lib/js/caml_hash_primitive.js"(exports) {
      "use strict";
      function rotl32(x, n) {
        return x << n | x >>> (32 - n | 0) | 0;
      }
      function caml_hash_mix_int(h, d) {
        var d$1 = d;
        d$1 = Math.imul(d$1, -862048943);
        d$1 = rotl32(d$1, 15);
        d$1 = Math.imul(d$1, 461845907);
        var h$1 = h ^ d$1;
        h$1 = rotl32(h$1, 13);
        return (h$1 + (h$1 << 2) | 0) - 430675100 | 0;
      }
      function caml_hash_final_mix(h) {
        var h$1 = h ^ h >>> 16;
        h$1 = Math.imul(h$1, -2048144789);
        h$1 = h$1 ^ h$1 >>> 13;
        h$1 = Math.imul(h$1, -1028477387);
        return h$1 ^ h$1 >>> 16;
      }
      function caml_hash_mix_string(h, s) {
        var len = s.length;
        var block = (len / 4 | 0) - 1 | 0;
        var hash = h;
        for (var i = 0; i <= block; ++i) {
          var j = i << 2;
          var w = s.charCodeAt(j) | s.charCodeAt(j + 1 | 0) << 8 | s.charCodeAt(j + 2 | 0) << 16 | s.charCodeAt(j + 3 | 0) << 24;
          hash = caml_hash_mix_int(hash, w);
        }
        var modulo = len & 3;
        if (modulo !== 0) {
          var w$1 = modulo === 3 ? s.charCodeAt(len - 1 | 0) << 16 | s.charCodeAt(len - 2 | 0) << 8 | s.charCodeAt(len - 3 | 0) : modulo === 2 ? s.charCodeAt(len - 1 | 0) << 8 | s.charCodeAt(len - 2 | 0) : s.charCodeAt(len - 1 | 0);
          hash = caml_hash_mix_int(hash, w$1);
        }
        hash = hash ^ len;
        return hash;
      }
      exports.caml_hash_mix_int = caml_hash_mix_int;
      exports.caml_hash_mix_string = caml_hash_mix_string;
      exports.caml_hash_final_mix = caml_hash_final_mix;
    }
  });

  // node_modules/@rescript/std/lib/js/belt_internalBuckets.js
  var require_belt_internalBuckets = __commonJS({
    "node_modules/@rescript/std/lib/js/belt_internalBuckets.js"(exports) {
      "use strict";
      var Curry = require_curry();
      var Belt_Array = require_belt_Array();
      var Caml_option = require_caml_option();
      function copyBucket(c) {
        if (c === void 0) {
          return c;
        }
        var head = {
          key: c.key,
          value: c.value,
          next: void 0
        };
        copyAuxCont(c.next, head);
        return head;
      }
      function copyAuxCont(_c, _prec) {
        while (true) {
          var prec = _prec;
          var c = _c;
          if (c === void 0) {
            return;
          }
          var ncopy = {
            key: c.key,
            value: c.value,
            next: void 0
          };
          prec.next = ncopy;
          _prec = ncopy;
          _c = c.next;
          continue;
        }
        ;
      }
      function copyBuckets(buckets) {
        var len = buckets.length;
        var newBuckets = new Array(len);
        for (var i = 0; i < len; ++i) {
          newBuckets[i] = copyBucket(buckets[i]);
        }
        return newBuckets;
      }
      function copy(x) {
        return {
          size: x.size,
          buckets: copyBuckets(x.buckets),
          hash: x.hash,
          eq: x.eq
        };
      }
      function bucketLength(_accu, _buckets) {
        while (true) {
          var buckets = _buckets;
          var accu = _accu;
          if (buckets === void 0) {
            return accu;
          }
          _buckets = buckets.next;
          _accu = accu + 1 | 0;
          continue;
        }
        ;
      }
      function do_bucket_iter(f, _buckets) {
        while (true) {
          var buckets = _buckets;
          if (buckets === void 0) {
            return;
          }
          f(buckets.key, buckets.value);
          _buckets = buckets.next;
          continue;
        }
        ;
      }
      function forEachU(h, f) {
        var d = h.buckets;
        for (var i = 0, i_finish = d.length; i < i_finish; ++i) {
          do_bucket_iter(f, d[i]);
        }
      }
      function forEach(h, f) {
        return forEachU(h, Curry.__2(f));
      }
      function do_bucket_fold(f, _b, _accu) {
        while (true) {
          var accu = _accu;
          var b = _b;
          if (b === void 0) {
            return accu;
          }
          _accu = f(accu, b.key, b.value);
          _b = b.next;
          continue;
        }
        ;
      }
      function reduceU(h, init, f) {
        var d = h.buckets;
        var accu = init;
        for (var i = 0, i_finish = d.length; i < i_finish; ++i) {
          accu = do_bucket_fold(f, d[i], accu);
        }
        return accu;
      }
      function reduce(h, init, f) {
        return reduceU(h, init, Curry.__3(f));
      }
      function getMaxBucketLength(h) {
        return Belt_Array.reduceU(h.buckets, 0, function(m, b) {
          var len = bucketLength(0, b);
          if (m > len) {
            return m;
          } else {
            return len;
          }
        });
      }
      function getBucketHistogram(h) {
        var mbl = getMaxBucketLength(h);
        var histo = Belt_Array.makeByU(mbl + 1 | 0, function(param) {
          return 0;
        });
        Belt_Array.forEachU(h.buckets, function(b) {
          var l = bucketLength(0, b);
          histo[l] = histo[l] + 1 | 0;
        });
        return histo;
      }
      function logStats(h) {
        var histogram = getBucketHistogram(h);
        console.log({
          bindings: h.size,
          buckets: h.buckets.length,
          histogram
        });
      }
      function filterMapInplaceBucket(f, h, i, _prec, _cell) {
        while (true) {
          var cell = _cell;
          var prec = _prec;
          var n = cell.next;
          var data = f(cell.key, cell.value);
          if (data !== void 0) {
            if (prec !== void 0) {
              cell.next = cell;
            } else {
              h.buckets[i] = cell;
            }
            cell.value = Caml_option.valFromOption(data);
            if (n === void 0) {
              cell.next = n;
              return;
            }
            _cell = n;
            _prec = cell;
            continue;
          }
          h.size = h.size - 1 | 0;
          if (n === void 0) {
            if (prec !== void 0) {
              prec.next = n;
            } else {
              h.buckets[i] = prec;
            }
            return;
          }
          _cell = n;
          continue;
        }
        ;
      }
      function keepMapInPlaceU(h, f) {
        var h_buckets = h.buckets;
        for (var i = 0, i_finish = h_buckets.length; i < i_finish; ++i) {
          var v = h_buckets[i];
          if (v !== void 0) {
            filterMapInplaceBucket(f, h, i, void 0, v);
          }
        }
      }
      function keepMapInPlace(h, f) {
        return keepMapInPlaceU(h, Curry.__2(f));
      }
      function fillArray(_i, arr, _cell) {
        while (true) {
          var cell = _cell;
          var i = _i;
          arr[i] = [
            cell.key,
            cell.value
          ];
          var v = cell.next;
          if (v === void 0) {
            return i + 1 | 0;
          }
          _cell = v;
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      function fillArrayMap(_i, arr, _cell, f) {
        while (true) {
          var cell = _cell;
          var i = _i;
          arr[i] = f(cell);
          var v = cell.next;
          if (v === void 0) {
            return i + 1 | 0;
          }
          _cell = v;
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      function linear(h, f) {
        var d = h.buckets;
        var current = 0;
        var arr = new Array(h.size);
        for (var i = 0, i_finish = d.length; i < i_finish; ++i) {
          var cell = d[i];
          if (cell !== void 0) {
            current = fillArrayMap(current, arr, cell, f);
          }
        }
        return arr;
      }
      function keysToArray(h) {
        return linear(h, function(x) {
          return x.key;
        });
      }
      function valuesToArray(h) {
        return linear(h, function(x) {
          return x.value;
        });
      }
      function toArray(h) {
        return linear(h, function(x) {
          return [
            x.key,
            x.value
          ];
        });
      }
      var C;
      exports.C = C;
      exports.copy = copy;
      exports.forEachU = forEachU;
      exports.forEach = forEach;
      exports.reduceU = reduceU;
      exports.reduce = reduce;
      exports.logStats = logStats;
      exports.keepMapInPlaceU = keepMapInPlaceU;
      exports.keepMapInPlace = keepMapInPlace;
      exports.fillArray = fillArray;
      exports.keysToArray = keysToArray;
      exports.valuesToArray = valuesToArray;
      exports.toArray = toArray;
      exports.getBucketHistogram = getBucketHistogram;
    }
  });

  // node_modules/@rescript/std/lib/js/belt_internalBucketsType.js
  var require_belt_internalBucketsType = __commonJS({
    "node_modules/@rescript/std/lib/js/belt_internalBucketsType.js"(exports) {
      "use strict";
      function power_2_above(_x, n) {
        while (true) {
          var x = _x;
          if (x >= n) {
            return x;
          }
          if (x << 1 < x) {
            return x;
          }
          _x = x << 1;
          continue;
        }
        ;
      }
      function make(hash, eq, hintSize) {
        var s = power_2_above(16, hintSize);
        return {
          size: 0,
          buckets: new Array(s),
          hash,
          eq
        };
      }
      function clear(h) {
        h.size = 0;
        var h_buckets = h.buckets;
        var len = h_buckets.length;
        for (var i = 0; i < len; ++i) {
          h_buckets[i] = void 0;
        }
      }
      function isEmpty(h) {
        return h.size === 0;
      }
      var emptyOpt;
      exports.emptyOpt = emptyOpt;
      exports.make = make;
      exports.clear = clear;
      exports.isEmpty = isEmpty;
    }
  });

  // node_modules/@rescript/std/lib/js/belt_HashMapString.js
  var require_belt_HashMapString = __commonJS({
    "node_modules/@rescript/std/lib/js/belt_HashMapString.js"(exports) {
      "use strict";
      var Caml_option = require_caml_option();
      var Caml_hash_primitive = require_caml_hash_primitive();
      var Belt_internalBuckets = require_belt_internalBuckets();
      var Belt_internalBucketsType = require_belt_internalBucketsType();
      function copyBucketReHash(h_buckets, ndata_tail, _old_bucket) {
        while (true) {
          var old_bucket = _old_bucket;
          if (old_bucket === void 0) {
            return;
          }
          var nidx = Caml_hash_primitive.caml_hash_final_mix(Caml_hash_primitive.caml_hash_mix_string(0, old_bucket.key)) & (h_buckets.length - 1 | 0);
          var tail = ndata_tail[nidx];
          if (tail !== void 0) {
            tail.next = old_bucket;
          } else {
            h_buckets[nidx] = old_bucket;
          }
          ndata_tail[nidx] = old_bucket;
          _old_bucket = old_bucket.next;
          continue;
        }
        ;
      }
      function replaceInBucket(key, info, _cell) {
        while (true) {
          var cell = _cell;
          if (cell.key === key) {
            cell.value = info;
            return false;
          }
          var cell$1 = cell.next;
          if (cell$1 === void 0) {
            return true;
          }
          _cell = cell$1;
          continue;
        }
        ;
      }
      function set(h, key, value) {
        var h_buckets = h.buckets;
        var buckets_len = h_buckets.length;
        var i = Caml_hash_primitive.caml_hash_final_mix(Caml_hash_primitive.caml_hash_mix_string(0, key)) & (buckets_len - 1 | 0);
        var l = h_buckets[i];
        if (l !== void 0) {
          if (replaceInBucket(key, value, l)) {
            h_buckets[i] = {
              key,
              value,
              next: l
            };
            h.size = h.size + 1 | 0;
          }
        } else {
          h_buckets[i] = {
            key,
            value,
            next: void 0
          };
          h.size = h.size + 1 | 0;
        }
        if (h.size > buckets_len << 1) {
          var odata = h.buckets;
          var osize = odata.length;
          var nsize = osize << 1;
          if (nsize < osize) {
            return;
          }
          var h_buckets$1 = new Array(nsize);
          var ndata_tail = new Array(nsize);
          h.buckets = h_buckets$1;
          for (var i$1 = 0; i$1 < osize; ++i$1) {
            copyBucketReHash(h_buckets$1, ndata_tail, odata[i$1]);
          }
          for (var i$2 = 0; i$2 < nsize; ++i$2) {
            var tail = ndata_tail[i$2];
            if (tail !== void 0) {
              tail.next = void 0;
            }
          }
          return;
        }
      }
      function remove(h, key) {
        var h_buckets = h.buckets;
        var i = Caml_hash_primitive.caml_hash_final_mix(Caml_hash_primitive.caml_hash_mix_string(0, key)) & (h_buckets.length - 1 | 0);
        var bucket = h_buckets[i];
        if (bucket !== void 0) {
          if (bucket.key === key) {
            h_buckets[i] = bucket.next;
            h.size = h.size - 1 | 0;
            return;
          } else {
            var _prec = bucket;
            var _buckets = bucket.next;
            while (true) {
              var buckets = _buckets;
              var prec = _prec;
              if (buckets === void 0) {
                return;
              }
              var cell_next = buckets.next;
              if (buckets.key === key) {
                prec.next = cell_next;
                h.size = h.size - 1 | 0;
                return;
              }
              _buckets = cell_next;
              _prec = buckets;
              continue;
            }
            ;
          }
        }
      }
      function get(h, key) {
        var h_buckets = h.buckets;
        var nid = Caml_hash_primitive.caml_hash_final_mix(Caml_hash_primitive.caml_hash_mix_string(0, key)) & (h_buckets.length - 1 | 0);
        var cell1 = h_buckets[nid];
        if (cell1 === void 0) {
          return;
        }
        if (key === cell1.key) {
          return Caml_option.some(cell1.value);
        }
        var cell2 = cell1.next;
        if (cell2 === void 0) {
          return;
        }
        if (key === cell2.key) {
          return Caml_option.some(cell2.value);
        }
        var cell3 = cell2.next;
        if (cell3 !== void 0) {
          if (key === cell3.key) {
            return Caml_option.some(cell3.value);
          } else {
            var _buckets = cell3.next;
            while (true) {
              var buckets = _buckets;
              if (buckets === void 0) {
                return;
              }
              if (key === buckets.key) {
                return Caml_option.some(buckets.value);
              }
              _buckets = buckets.next;
              continue;
            }
            ;
          }
        }
      }
      function has(h, key) {
        var h_buckets = h.buckets;
        var nid = Caml_hash_primitive.caml_hash_final_mix(Caml_hash_primitive.caml_hash_mix_string(0, key)) & (h_buckets.length - 1 | 0);
        var bucket = h_buckets[nid];
        if (bucket !== void 0) {
          var _cell = bucket;
          while (true) {
            var cell = _cell;
            if (cell.key === key) {
              return true;
            }
            var nextCell = cell.next;
            if (nextCell === void 0) {
              return false;
            }
            _cell = nextCell;
            continue;
          }
          ;
        } else {
          return false;
        }
      }
      function make(hintSize) {
        return Belt_internalBucketsType.make(void 0, void 0, hintSize);
      }
      function size(h) {
        return h.size;
      }
      function fromArray(arr) {
        var len = arr.length;
        var v = Belt_internalBucketsType.make(void 0, void 0, len);
        for (var i = 0; i < len; ++i) {
          var match = arr[i];
          set(v, match[0], match[1]);
        }
        return v;
      }
      function mergeMany(h, arr) {
        var len = arr.length;
        for (var i = 0; i < len; ++i) {
          var match = arr[i];
          set(h, match[0], match[1]);
        }
      }
      var clear = Belt_internalBucketsType.clear;
      var isEmpty = Belt_internalBucketsType.isEmpty;
      var copy = Belt_internalBuckets.copy;
      var forEachU = Belt_internalBuckets.forEachU;
      var forEach = Belt_internalBuckets.forEach;
      var reduceU = Belt_internalBuckets.reduceU;
      var reduce = Belt_internalBuckets.reduce;
      var keepMapInPlaceU = Belt_internalBuckets.keepMapInPlaceU;
      var keepMapInPlace = Belt_internalBuckets.keepMapInPlace;
      var toArray = Belt_internalBuckets.toArray;
      var keysToArray = Belt_internalBuckets.keysToArray;
      var valuesToArray = Belt_internalBuckets.valuesToArray;
      var getBucketHistogram = Belt_internalBuckets.getBucketHistogram;
      var logStats = Belt_internalBuckets.logStats;
      exports.make = make;
      exports.clear = clear;
      exports.isEmpty = isEmpty;
      exports.set = set;
      exports.copy = copy;
      exports.get = get;
      exports.has = has;
      exports.remove = remove;
      exports.forEachU = forEachU;
      exports.forEach = forEach;
      exports.reduceU = reduceU;
      exports.reduce = reduce;
      exports.keepMapInPlaceU = keepMapInPlaceU;
      exports.keepMapInPlace = keepMapInPlace;
      exports.size = size;
      exports.toArray = toArray;
      exports.keysToArray = keysToArray;
      exports.valuesToArray = valuesToArray;
      exports.fromArray = fromArray;
      exports.mergeMany = mergeMany;
      exports.getBucketHistogram = getBucketHistogram;
      exports.logStats = logStats;
    }
  });

  // src/lib/Config.bs.js
  var require_Config_bs = __commonJS({
    "src/lib/Config.bs.js"(exports) {
      "use strict";
      var boardSize = 32;
      var tileSize = ".75rem";
      exports.boardSize = boardSize;
      exports.tileSize = tileSize;
    }
  });

  // src/lib/Util.bs.js
  var require_Util_bs = __commonJS({
    "src/lib/Util.bs.js"(exports) {
      "use strict";
      var Js_math = require_js_math();
      var Belt_HashMapString = require_belt_HashMapString();
      var Config$ReasonGameOfLife = require_Config_bs();
      function avgFrameRate(ticks, startedAt) {
        return Js_math.ceil(ticks / ((Date.now() - startedAt) / 1e3));
      }
      var sqrSize = Math.imul(Config$ReasonGameOfLife.boardSize, Config$ReasonGameOfLife.boardSize);
      var sumOfSquares = sqrSize << 1;
      var diagonalLength = Math.sqrt(sumOfSquares);
      var hueIncrement = 360 / diagonalLength;
      var colorCache = Belt_HashMapString.make(sqrSize);
      function rainbowHSL(y, x) {
        var cacheKey = "" + y + "-" + x;
        var found = Belt_HashMapString.get(colorCache, cacheKey);
        var match;
        if (found !== void 0) {
          match = [
            found,
            true
          ];
        } else {
          var sumOfPoints = Math.imul(y, y) + Math.imul(x, x) | 0;
          var raw = Math.sqrt(sumOfPoints) * hueIncrement;
          var h = Js_math.floor(raw);
          var color = "hsl(" + h + ", 100%, 60%)";
          match = [
            color,
            false
          ];
        }
        var color$1 = match[0];
        if (!match[1]) {
          Belt_HashMapString.set(colorCache, cacheKey, color$1);
        }
        return color$1;
      }
      var Colors = {
        sqrSize,
        sumOfSquares,
        diagonalLength,
        hueIncrement,
        colorCache,
        rainbowHSL
      };
      exports.avgFrameRate = avgFrameRate;
      exports.Colors = Colors;
    }
  });

  // src/components/Tile.bs.js
  var require_Tile_bs = __commonJS({
    "src/components/Tile.bs.js"(exports) {
      "use strict";
      var Curry = require_curry();
      var React = require_react();
      var Emotion = require_Emotion_bs();
      var Util$ReasonGameOfLife = require_Util_bs();
      var Config$ReasonGameOfLife = require_Config_bs();
      function styles(background, shadow, tileSize) {
        return Emotion.css(void 0, {
          hd: Emotion.p("width", tileSize),
          tl: {
            hd: Emotion.p("height", tileSize),
            tl: {
              hd: Emotion.p("background", background),
              tl: {
                hd: Emotion.borderRadius(Emotion.pct(50)),
                tl: {
                  hd: Emotion.margin2(Emotion.px(2), Emotion.px(1)),
                  tl: {
                    hd: Emotion.padding("zero"),
                    tl: {
                      hd: Emotion.transitionProperty("all"),
                      tl: {
                        hd: Emotion.transitionDuration(Emotion.s(0.1)),
                        tl: {
                          hd: Emotion.transitionTimingFunction(Emotion.easeInOut),
                          tl: {
                            hd: Emotion.cursor("pointer"),
                            tl: {
                              hd: Emotion.p("box-shadow", shadow),
                              tl: 0
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        });
      }
      function make(props) {
        var stylesObject = {
          className: styles(props.background, props.shadow, props.tileSize)
        };
        var newProps = Object.assign(stylesObject, props);
        var chil = props.children;
        return React.createElement("div", newProps, [chil !== void 0 ? chil : null]);
      }
      var Wrapper = {
        styles,
        make
      };
      function Tile(Props) {
        var isAlive = Props.isAlive;
        var onToggle = Props.onToggle;
        var y = Props.y;
        var x = Props.x;
        var aliveColor = Util$ReasonGameOfLife.Colors.rainbowHSL(y, x);
        var match = isAlive ? [
          aliveColor,
          "0 0 0 0 " + aliveColor
        ] : [
          "#272B30",
          ""
        ];
        var handleMouseEvent = React.useCallback(function(callback) {
          return function(e) {
            if (e.nativeEvent.which === 1) {
              return Curry._1(callback, void 0);
            }
          };
        }, []);
        return React.createElement(make, {
          onMouseDown: Curry._1(handleMouseEvent, onToggle),
          onMouseOver: Curry._1(handleMouseEvent, onToggle),
          tileSize: Config$ReasonGameOfLife.tileSize,
          shadow: match[1],
          background: match[0]
        });
      }
      var make$1 = Tile;
      exports.Wrapper = Wrapper;
      exports.make = make$1;
    }
  });

  // src/components/Grid.bs.js
  var require_Grid_bs = __commonJS({
    "src/components/Grid.bs.js"(exports) {
      "use strict";
      var Curry = require_curry();
      var React = require_react();
      var Emotion = require_Emotion_bs();
      var Belt_Array = require_belt_Array();
      var Tile$ReasonGameOfLife = require_Tile_bs();
      var styles = Emotion.css(void 0, {
        hd: Emotion.display("flex"),
        tl: {
          hd: Emotion.border(Emotion.rem(0.25), Emotion.solid, Emotion.hex("222")),
          tl: {
            hd: Emotion.borderRadius(Emotion.rem(0.75)),
            tl: {
              hd: Emotion.padding(Emotion.rem(0.125)),
              tl: 0
            }
          }
        }
      });
      function make(props) {
        var stylesObject = {
          className: styles
        };
        var newProps = Object.assign(stylesObject, props);
        var chil = props.children;
        return React.createElement("div", newProps, [chil !== void 0 ? chil : null]);
      }
      var Wrapper = {
        styles,
        make
      };
      function Grid(Props) {
        var data = Props.data;
        var onToggle = Props.onToggle;
        var renderTile = React.useCallback(function(y) {
          return function(x, cellState) {
            var key = "" + x + "-" + y;
            return React.createElement(Tile$ReasonGameOfLife.make, {
              isAlive: cellState === 1,
              onToggle: function(param) {
                return Curry._2(onToggle, y, x);
              },
              y,
              x,
              key
            });
          };
        }, []);
        var renderRow = React.useCallback(function(y) {
          return function(row) {
            return React.createElement("div", {
              key: String(y)
            }, Belt_Array.mapWithIndex(row, Curry._1(renderTile, y)));
          };
        }, []);
        return React.createElement(make, {
          children: Belt_Array.mapWithIndex(data, renderRow)
        });
      }
      var R;
      var A;
      var make$1 = Grid;
      exports.R = R;
      exports.A = A;
      exports.Wrapper = Wrapper;
      exports.make = make$1;
    }
  });

  // node_modules/@rescript/std/lib/js/caml_obj.js
  var require_caml_obj = __commonJS({
    "node_modules/@rescript/std/lib/js/caml_obj.js"(exports) {
      "use strict";
      var Caml = require_caml();
      var for_in = function(o, foo) {
        for (var x in o) {
          foo(x);
        }
      };
      var caml_obj_dup = function(x) {
        if (Array.isArray(x)) {
          var len = x.length;
          var v = new Array(len);
          for (var i = 0; i < len; ++i) {
            v[i] = x[i];
          }
          if (x.TAG !== void 0) {
            v.TAG = x.TAG;
          }
          return v;
        }
        return Object.assign({}, x);
      };
      var update_dummy = function(x, y) {
        var k;
        if (Array.isArray(y)) {
          for (k = 0; k < y.length; ++k) {
            x[k] = y[k];
          }
          if (y.TAG !== void 0) {
            x.TAG = y.TAG;
          }
        } else {
          for (var k in y) {
            x[k] = y[k];
          }
        }
      };
      function caml_compare(a, b) {
        if (a === b) {
          return 0;
        }
        var a_type = typeof a;
        var b_type = typeof b;
        switch (a_type) {
          case "boolean":
            if (b_type === "boolean") {
              return Caml.caml_bool_compare(a, b);
            }
            break;
          case "function":
            if (b_type === "function") {
              throw {
                RE_EXN_ID: "Invalid_argument",
                _1: "compare: functional value",
                Error: new Error()
              };
            }
            break;
          case "number":
            if (b_type === "number") {
              return Caml.caml_int_compare(a, b);
            }
            break;
          case "string":
            if (b_type === "string") {
              return Caml.caml_string_compare(a, b);
            } else {
              return 1;
            }
          case "undefined":
            return -1;
          default:
        }
        switch (b_type) {
          case "string":
            return -1;
          case "undefined":
            return 1;
          default:
            if (a_type === "boolean") {
              return 1;
            }
            if (b_type === "boolean") {
              return -1;
            }
            if (a_type === "function") {
              return 1;
            }
            if (b_type === "function") {
              return -1;
            }
            if (a_type === "number") {
              if (b === null || b.BS_PRIVATE_NESTED_SOME_NONE !== void 0) {
                return 1;
              } else {
                return -1;
              }
            }
            if (b_type === "number") {
              if (a === null || a.BS_PRIVATE_NESTED_SOME_NONE !== void 0) {
                return -1;
              } else {
                return 1;
              }
            }
            if (a === null) {
              if (b.BS_PRIVATE_NESTED_SOME_NONE !== void 0) {
                return 1;
              } else {
                return -1;
              }
            }
            if (b === null) {
              if (a.BS_PRIVATE_NESTED_SOME_NONE !== void 0) {
                return -1;
              } else {
                return 1;
              }
            }
            if (a.BS_PRIVATE_NESTED_SOME_NONE !== void 0) {
              if (b.BS_PRIVATE_NESTED_SOME_NONE !== void 0) {
                return aux_obj_compare(a, b);
              } else {
                return -1;
              }
            }
            var tag_a = a.TAG | 0;
            var tag_b = b.TAG | 0;
            if (tag_a === 248) {
              return Caml.caml_int_compare(a[1], b[1]);
            }
            if (tag_a === 251) {
              throw {
                RE_EXN_ID: "Invalid_argument",
                _1: "equal: abstract value",
                Error: new Error()
              };
            }
            if (tag_a !== tag_b) {
              if (tag_a < tag_b) {
                return -1;
              } else {
                return 1;
              }
            }
            var len_a = a.length | 0;
            var len_b = b.length | 0;
            if (len_a === len_b) {
              if (Array.isArray(a)) {
                var _i = 0;
                while (true) {
                  var i = _i;
                  if (i === len_a) {
                    return 0;
                  }
                  var res = caml_compare(a[i], b[i]);
                  if (res !== 0) {
                    return res;
                  }
                  _i = i + 1 | 0;
                  continue;
                }
                ;
              } else if (a instanceof Date && b instanceof Date) {
                return a - b;
              } else {
                return aux_obj_compare(a, b);
              }
            } else if (len_a < len_b) {
              var _i$1 = 0;
              while (true) {
                var i$1 = _i$1;
                if (i$1 === len_a) {
                  return -1;
                }
                var res$1 = caml_compare(a[i$1], b[i$1]);
                if (res$1 !== 0) {
                  return res$1;
                }
                _i$1 = i$1 + 1 | 0;
                continue;
              }
              ;
            } else {
              var _i$2 = 0;
              while (true) {
                var i$2 = _i$2;
                if (i$2 === len_b) {
                  return 1;
                }
                var res$2 = caml_compare(a[i$2], b[i$2]);
                if (res$2 !== 0) {
                  return res$2;
                }
                _i$2 = i$2 + 1 | 0;
                continue;
              }
              ;
            }
        }
      }
      function aux_obj_compare(a, b) {
        var min_key_lhs = {
          contents: void 0
        };
        var min_key_rhs = {
          contents: void 0
        };
        var do_key = function(param, key) {
          var min_key = param[2];
          var b2 = param[1];
          if (!(!b2.hasOwnProperty(key) || caml_compare(param[0][key], b2[key]) > 0)) {
            return;
          }
          var mk = min_key.contents;
          if (mk !== void 0 && key >= mk) {
            return;
          } else {
            min_key.contents = key;
            return;
          }
        };
        var partial_arg = [
          a,
          b,
          min_key_rhs
        ];
        var do_key_a = function(param) {
          return do_key(partial_arg, param);
        };
        var partial_arg$1 = [
          b,
          a,
          min_key_lhs
        ];
        var do_key_b = function(param) {
          return do_key(partial_arg$1, param);
        };
        for_in(a, do_key_a);
        for_in(b, do_key_b);
        var match = min_key_lhs.contents;
        var match$1 = min_key_rhs.contents;
        if (match !== void 0) {
          if (match$1 !== void 0) {
            return Caml.caml_string_compare(match, match$1);
          } else {
            return -1;
          }
        } else if (match$1 !== void 0) {
          return 1;
        } else {
          return 0;
        }
      }
      function caml_equal(a, b) {
        if (a === b) {
          return true;
        }
        var a_type = typeof a;
        if (a_type === "string" || a_type === "number" || a_type === "boolean" || a_type === "undefined" || a === null) {
          return false;
        }
        var b_type = typeof b;
        if (a_type === "function" || b_type === "function") {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "equal: functional value",
            Error: new Error()
          };
        }
        if (b_type === "number" || b_type === "undefined" || b === null) {
          return false;
        }
        var tag_a = a.TAG | 0;
        var tag_b = b.TAG | 0;
        if (tag_a === 248) {
          return a[1] === b[1];
        }
        if (tag_a === 251) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "equal: abstract value",
            Error: new Error()
          };
        }
        if (tag_a !== tag_b) {
          return false;
        }
        var len_a = a.length | 0;
        var len_b = b.length | 0;
        if (len_a === len_b) {
          if (Array.isArray(a)) {
            var _i = 0;
            while (true) {
              var i = _i;
              if (i === len_a) {
                return true;
              }
              if (!caml_equal(a[i], b[i])) {
                return false;
              }
              _i = i + 1 | 0;
              continue;
            }
            ;
          } else if (a instanceof Date && b instanceof Date) {
            return !(a > b || a < b);
          } else {
            var result = {
              contents: true
            };
            var do_key_a = function(key) {
              if (!b.hasOwnProperty(key)) {
                result.contents = false;
                return;
              }
            };
            var do_key_b = function(key) {
              if (!a.hasOwnProperty(key) || !caml_equal(b[key], a[key])) {
                result.contents = false;
                return;
              }
            };
            for_in(a, do_key_a);
            if (result.contents) {
              for_in(b, do_key_b);
            }
            return result.contents;
          }
        } else {
          return false;
        }
      }
      function caml_equal_null(x, y) {
        if (y !== null) {
          return caml_equal(x, y);
        } else {
          return x === y;
        }
      }
      function caml_equal_undefined(x, y) {
        if (y !== void 0) {
          return caml_equal(x, y);
        } else {
          return x === y;
        }
      }
      function caml_equal_nullable(x, y) {
        if (y == null) {
          return x === y;
        } else {
          return caml_equal(x, y);
        }
      }
      function caml_notequal(a, b) {
        return !caml_equal(a, b);
      }
      function caml_greaterequal(a, b) {
        return caml_compare(a, b) >= 0;
      }
      function caml_greaterthan(a, b) {
        return caml_compare(a, b) > 0;
      }
      function caml_lessequal(a, b) {
        return caml_compare(a, b) <= 0;
      }
      function caml_lessthan(a, b) {
        return caml_compare(a, b) < 0;
      }
      function caml_min(x, y) {
        if (caml_compare(x, y) <= 0) {
          return x;
        } else {
          return y;
        }
      }
      function caml_max(x, y) {
        if (caml_compare(x, y) >= 0) {
          return x;
        } else {
          return y;
        }
      }
      exports.caml_obj_dup = caml_obj_dup;
      exports.update_dummy = update_dummy;
      exports.caml_compare = caml_compare;
      exports.caml_equal = caml_equal;
      exports.caml_equal_null = caml_equal_null;
      exports.caml_equal_undefined = caml_equal_undefined;
      exports.caml_equal_nullable = caml_equal_nullable;
      exports.caml_notequal = caml_notequal;
      exports.caml_greaterequal = caml_greaterequal;
      exports.caml_greaterthan = caml_greaterthan;
      exports.caml_lessthan = caml_lessthan;
      exports.caml_lessequal = caml_lessequal;
      exports.caml_min = caml_min;
      exports.caml_max = caml_max;
    }
  });

  // node_modules/@rescript/std/lib/js/caml_exceptions.js
  var require_caml_exceptions = __commonJS({
    "node_modules/@rescript/std/lib/js/caml_exceptions.js"(exports) {
      "use strict";
      var id = {
        contents: 0
      };
      function create(str) {
        id.contents = id.contents + 1 | 0;
        return str + ("/" + id.contents);
      }
      function caml_is_extension(e) {
        if (e == null) {
          return false;
        } else {
          return typeof e.RE_EXN_ID === "string";
        }
      }
      function caml_exn_slot_name(x) {
        return x.RE_EXN_ID;
      }
      exports.id = id;
      exports.create = create;
      exports.caml_is_extension = caml_is_extension;
      exports.caml_exn_slot_name = caml_exn_slot_name;
    }
  });

  // node_modules/@rescript/std/lib/js/caml_js_exceptions.js
  var require_caml_js_exceptions = __commonJS({
    "node_modules/@rescript/std/lib/js/caml_js_exceptions.js"(exports) {
      "use strict";
      var Caml_option = require_caml_option();
      var Caml_exceptions = require_caml_exceptions();
      var $$Error = /* @__PURE__ */ Caml_exceptions.create("Caml_js_exceptions.Error");
      function internalToOCamlException(e) {
        if (Caml_exceptions.caml_is_extension(e)) {
          return e;
        } else {
          return {
            RE_EXN_ID: $$Error,
            _1: e
          };
        }
      }
      function caml_as_js_exn(exn) {
        if (exn.RE_EXN_ID === $$Error) {
          return Caml_option.some(exn._1);
        }
      }
      exports.$$Error = $$Error;
      exports.internalToOCamlException = internalToOCamlException;
      exports.caml_as_js_exn = caml_as_js_exn;
    }
  });

  // node_modules/@rescript/std/lib/js/array.js
  var require_array = __commonJS({
    "node_modules/@rescript/std/lib/js/array.js"(exports) {
      "use strict";
      var Curry = require_curry();
      var Caml_obj = require_caml_obj();
      var Caml_array = require_caml_array();
      var Caml_exceptions = require_caml_exceptions();
      var Caml_js_exceptions = require_caml_js_exceptions();
      var make_float = Caml_array.make_float;
      var Floatarray = {};
      function init(l, f) {
        if (l === 0) {
          return [];
        }
        if (l < 0) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Array.init",
            Error: new Error()
          };
        }
        var res = Caml_array.make(l, Curry._1(f, 0));
        for (var i = 1; i < l; ++i) {
          res[i] = Curry._1(f, i);
        }
        return res;
      }
      function make_matrix(sx, sy, init2) {
        var res = Caml_array.make(sx, []);
        for (var x = 0; x < sx; ++x) {
          res[x] = Caml_array.make(sy, init2);
        }
        return res;
      }
      function copy(a) {
        var l = a.length;
        if (l === 0) {
          return [];
        } else {
          return Caml_array.sub(a, 0, l);
        }
      }
      function append(a1, a2) {
        var l1 = a1.length;
        if (l1 === 0) {
          return copy(a2);
        } else if (a2.length === 0) {
          return Caml_array.sub(a1, 0, l1);
        } else {
          return a1.concat(a2);
        }
      }
      function sub(a, ofs, len) {
        if (ofs < 0 || len < 0 || ofs > (a.length - len | 0)) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Array.sub",
            Error: new Error()
          };
        }
        return Caml_array.sub(a, ofs, len);
      }
      function fill(a, ofs, len, v) {
        if (ofs < 0 || len < 0 || ofs > (a.length - len | 0)) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Array.fill",
            Error: new Error()
          };
        }
        for (var i = ofs, i_finish = ofs + len | 0; i < i_finish; ++i) {
          a[i] = v;
        }
      }
      function blit(a1, ofs1, a2, ofs2, len) {
        if (len < 0 || ofs1 < 0 || ofs1 > (a1.length - len | 0) || ofs2 < 0 || ofs2 > (a2.length - len | 0)) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Array.blit",
            Error: new Error()
          };
        }
        return Caml_array.blit(a1, ofs1, a2, ofs2, len);
      }
      function iter(f, a) {
        for (var i = 0, i_finish = a.length; i < i_finish; ++i) {
          Curry._1(f, a[i]);
        }
      }
      function iter2(f, a, b) {
        if (a.length !== b.length) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Array.iter2: arrays must have the same length",
            Error: new Error()
          };
        }
        for (var i = 0, i_finish = a.length; i < i_finish; ++i) {
          Curry._2(f, a[i], b[i]);
        }
      }
      function map(f, a) {
        var l = a.length;
        if (l === 0) {
          return [];
        }
        var r = Caml_array.make(l, Curry._1(f, a[0]));
        for (var i = 1; i < l; ++i) {
          r[i] = Curry._1(f, a[i]);
        }
        return r;
      }
      function map2(f, a, b) {
        var la = a.length;
        var lb = b.length;
        if (la !== lb) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Array.map2: arrays must have the same length",
            Error: new Error()
          };
        }
        if (la === 0) {
          return [];
        }
        var r = Caml_array.make(la, Curry._2(f, a[0], b[0]));
        for (var i = 1; i < la; ++i) {
          r[i] = Curry._2(f, a[i], b[i]);
        }
        return r;
      }
      function iteri(f, a) {
        for (var i = 0, i_finish = a.length; i < i_finish; ++i) {
          Curry._2(f, i, a[i]);
        }
      }
      function mapi(f, a) {
        var l = a.length;
        if (l === 0) {
          return [];
        }
        var r = Caml_array.make(l, Curry._2(f, 0, a[0]));
        for (var i = 1; i < l; ++i) {
          r[i] = Curry._2(f, i, a[i]);
        }
        return r;
      }
      function to_list(a) {
        var _i = a.length - 1 | 0;
        var _res = 0;
        while (true) {
          var res = _res;
          var i = _i;
          if (i < 0) {
            return res;
          }
          _res = {
            hd: a[i],
            tl: res
          };
          _i = i - 1 | 0;
          continue;
        }
        ;
      }
      function list_length(_accu, _param) {
        while (true) {
          var param = _param;
          var accu = _accu;
          if (!param) {
            return accu;
          }
          _param = param.tl;
          _accu = accu + 1 | 0;
          continue;
        }
        ;
      }
      function of_list(l) {
        if (!l) {
          return [];
        }
        var a = Caml_array.make(list_length(0, l), l.hd);
        var _i = 1;
        var _param = l.tl;
        while (true) {
          var param = _param;
          var i = _i;
          if (!param) {
            return a;
          }
          a[i] = param.hd;
          _param = param.tl;
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      function fold_left(f, x, a) {
        var r = x;
        for (var i = 0, i_finish = a.length; i < i_finish; ++i) {
          r = Curry._2(f, r, a[i]);
        }
        return r;
      }
      function fold_right(f, a, x) {
        var r = x;
        for (var i = a.length - 1 | 0; i >= 0; --i) {
          r = Curry._2(f, a[i], r);
        }
        return r;
      }
      function exists(p, a) {
        var n = a.length;
        var _i = 0;
        while (true) {
          var i = _i;
          if (i === n) {
            return false;
          }
          if (Curry._1(p, a[i])) {
            return true;
          }
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      function for_all(p, a) {
        var n = a.length;
        var _i = 0;
        while (true) {
          var i = _i;
          if (i === n) {
            return true;
          }
          if (!Curry._1(p, a[i])) {
            return false;
          }
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      function mem(x, a) {
        var n = a.length;
        var _i = 0;
        while (true) {
          var i = _i;
          if (i === n) {
            return false;
          }
          if (Caml_obj.caml_equal(a[i], x)) {
            return true;
          }
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      function memq(x, a) {
        var n = a.length;
        var _i = 0;
        while (true) {
          var i = _i;
          if (i === n) {
            return false;
          }
          if (x === a[i]) {
            return true;
          }
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      var Bottom = /* @__PURE__ */ Caml_exceptions.create("Array.Bottom");
      function sort(cmp, a) {
        var maxson = function(l2, i2) {
          var i31 = ((i2 + i2 | 0) + i2 | 0) + 1 | 0;
          var x = i31;
          if ((i31 + 2 | 0) < l2) {
            if (Curry._2(cmp, Caml_array.get(a, i31), Caml_array.get(a, i31 + 1 | 0)) < 0) {
              x = i31 + 1 | 0;
            }
            if (Curry._2(cmp, Caml_array.get(a, x), Caml_array.get(a, i31 + 2 | 0)) < 0) {
              x = i31 + 2 | 0;
            }
            return x;
          }
          if ((i31 + 1 | 0) < l2 && Curry._2(cmp, Caml_array.get(a, i31), Caml_array.get(a, i31 + 1 | 0)) < 0) {
            return i31 + 1 | 0;
          }
          if (i31 < l2) {
            return i31;
          }
          throw {
            RE_EXN_ID: Bottom,
            _1: i2,
            Error: new Error()
          };
        };
        var trickle = function(l2, i2, e2) {
          try {
            var _i = i2;
            while (true) {
              var i$12 = _i;
              var j = maxson(l2, i$12);
              if (Curry._2(cmp, Caml_array.get(a, j), e2) <= 0) {
                return Caml_array.set(a, i$12, e2);
              }
              Caml_array.set(a, i$12, Caml_array.get(a, j));
              _i = j;
              continue;
            }
            ;
          } catch (raw_i) {
            var i$2 = Caml_js_exceptions.internalToOCamlException(raw_i);
            if (i$2.RE_EXN_ID === Bottom) {
              return Caml_array.set(a, i$2._1, e2);
            }
            throw i$2;
          }
        };
        var bubble = function(l2, i2) {
          try {
            var _i = i2;
            while (true) {
              var i$12 = _i;
              var j = maxson(l2, i$12);
              Caml_array.set(a, i$12, Caml_array.get(a, j));
              _i = j;
              continue;
            }
            ;
          } catch (raw_i) {
            var i$2 = Caml_js_exceptions.internalToOCamlException(raw_i);
            if (i$2.RE_EXN_ID === Bottom) {
              return i$2._1;
            }
            throw i$2;
          }
        };
        var trickleup = function(_i, e2) {
          while (true) {
            var i2 = _i;
            var father = (i2 - 1 | 0) / 3 | 0;
            if (i2 === father) {
              throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "array.ml",
                  238,
                  4
                ],
                Error: new Error()
              };
            }
            if (Curry._2(cmp, Caml_array.get(a, father), e2) >= 0) {
              return Caml_array.set(a, i2, e2);
            }
            Caml_array.set(a, i2, Caml_array.get(a, father));
            if (father <= 0) {
              return Caml_array.set(a, 0, e2);
            }
            _i = father;
            continue;
          }
          ;
        };
        var l = a.length;
        for (var i = ((l + 1 | 0) / 3 | 0) - 1 | 0; i >= 0; --i) {
          trickle(l, i, Caml_array.get(a, i));
        }
        for (var i$1 = l - 1 | 0; i$1 >= 2; --i$1) {
          var e = Caml_array.get(a, i$1);
          Caml_array.set(a, i$1, Caml_array.get(a, 0));
          trickleup(bubble(i$1, 0), e);
        }
        if (l <= 1) {
          return;
        }
        var e$1 = Caml_array.get(a, 1);
        Caml_array.set(a, 1, Caml_array.get(a, 0));
        return Caml_array.set(a, 0, e$1);
      }
      function stable_sort(cmp, a) {
        var merge = function(src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs) {
          var src1r = src1ofs + src1len | 0;
          var src2r = src2ofs + src2len | 0;
          var _i1 = src1ofs;
          var _s1 = Caml_array.get(a, src1ofs);
          var _i2 = src2ofs;
          var _s2 = Caml_array.get(src2, src2ofs);
          var _d = dstofs;
          while (true) {
            var d = _d;
            var s2 = _s2;
            var i2 = _i2;
            var s1 = _s1;
            var i1 = _i1;
            if (Curry._2(cmp, s1, s2) <= 0) {
              Caml_array.set(dst, d, s1);
              var i1$1 = i1 + 1 | 0;
              if (i1$1 >= src1r) {
                return blit(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);
              }
              _d = d + 1 | 0;
              _s1 = Caml_array.get(a, i1$1);
              _i1 = i1$1;
              continue;
            }
            Caml_array.set(dst, d, s2);
            var i2$1 = i2 + 1 | 0;
            if (i2$1 >= src2r) {
              return blit(a, i1, dst, d + 1 | 0, src1r - i1 | 0);
            }
            _d = d + 1 | 0;
            _s2 = Caml_array.get(src2, i2$1);
            _i2 = i2$1;
            continue;
          }
          ;
        };
        var isortto = function(srcofs, dst, dstofs, len) {
          for (var i = 0; i < len; ++i) {
            var e = Caml_array.get(a, srcofs + i | 0);
            var j = (dstofs + i | 0) - 1 | 0;
            while (j >= dstofs && Curry._2(cmp, Caml_array.get(dst, j), e) > 0) {
              Caml_array.set(dst, j + 1 | 0, Caml_array.get(dst, j));
              j = j - 1 | 0;
            }
            ;
            Caml_array.set(dst, j + 1 | 0, e);
          }
        };
        var sortto = function(srcofs, dst, dstofs, len) {
          if (len <= 5) {
            return isortto(srcofs, dst, dstofs, len);
          }
          var l12 = len / 2 | 0;
          var l22 = len - l12 | 0;
          sortto(srcofs + l12 | 0, dst, dstofs + l12 | 0, l22);
          sortto(srcofs, a, srcofs + l22 | 0, l12);
          return merge(srcofs + l22 | 0, l12, dst, dstofs + l12 | 0, l22, dst, dstofs);
        };
        var l = a.length;
        if (l <= 5) {
          return isortto(0, a, 0, l);
        }
        var l1 = l / 2 | 0;
        var l2 = l - l1 | 0;
        var t = Caml_array.make(l2, Caml_array.get(a, 0));
        sortto(l1, t, 0, l2);
        sortto(0, a, l2, l1);
        return merge(l2, l1, t, 0, l2, a, 0);
      }
      var create_matrix = make_matrix;
      var concat = Caml_array.concat;
      var fast_sort = stable_sort;
      exports.make_float = make_float;
      exports.init = init;
      exports.make_matrix = make_matrix;
      exports.create_matrix = create_matrix;
      exports.append = append;
      exports.concat = concat;
      exports.sub = sub;
      exports.copy = copy;
      exports.fill = fill;
      exports.blit = blit;
      exports.to_list = to_list;
      exports.of_list = of_list;
      exports.iter = iter;
      exports.iteri = iteri;
      exports.map = map;
      exports.mapi = mapi;
      exports.fold_left = fold_left;
      exports.fold_right = fold_right;
      exports.iter2 = iter2;
      exports.map2 = map2;
      exports.for_all = for_all;
      exports.exists = exists;
      exports.mem = mem;
      exports.memq = memq;
      exports.sort = sort;
      exports.stable_sort = stable_sort;
      exports.fast_sort = fast_sort;
      exports.Floatarray = Floatarray;
    }
  });

  // node_modules/@rescript/std/lib/js/caml_int64.js
  var require_caml_int64 = __commonJS({
    "node_modules/@rescript/std/lib/js/caml_int64.js"(exports) {
      "use strict";
      var Caml = require_caml();
      function mk(lo, hi) {
        return [
          hi,
          lo >>> 0
        ];
      }
      var min_int = [
        -2147483648,
        0
      ];
      var max_int = [
        2147483647,
        4294967295
      ];
      var one = [
        0,
        1
      ];
      var zero = [
        0,
        0
      ];
      var neg_one = [
        -1,
        4294967295
      ];
      function neg_signed(x) {
        return (x & -2147483648) !== 0;
      }
      function non_neg_signed(x) {
        return (x & -2147483648) === 0;
      }
      function succ(param) {
        var x_lo = param[1];
        var x_hi = param[0];
        var lo = x_lo + 1 | 0;
        return [
          x_hi + (lo === 0 ? 1 : 0) | 0,
          lo >>> 0
        ];
      }
      function neg(param) {
        var other_lo = (param[1] ^ -1) + 1 | 0;
        return [
          (param[0] ^ -1) + (other_lo === 0 ? 1 : 0) | 0,
          other_lo >>> 0
        ];
      }
      function add_aux(param, y_lo, y_hi) {
        var x_lo = param[1];
        var lo = x_lo + y_lo | 0;
        var overflow = neg_signed(x_lo) && (neg_signed(y_lo) || non_neg_signed(lo)) || neg_signed(y_lo) && non_neg_signed(lo) ? 1 : 0;
        return [
          param[0] + y_hi + overflow | 0,
          lo >>> 0
        ];
      }
      function add(self2, param) {
        return add_aux(self2, param[1], param[0]);
      }
      function equal_null(x, y) {
        if (y !== null) {
          return Caml.i64_eq(x, y);
        } else {
          return false;
        }
      }
      function equal_undefined(x, y) {
        if (y !== void 0) {
          return Caml.i64_eq(x, y);
        } else {
          return false;
        }
      }
      function equal_nullable(x, y) {
        if (y == null) {
          return false;
        } else {
          return Caml.i64_eq(x, y);
        }
      }
      function sub_aux(x, lo, hi) {
        var y_lo = (lo ^ -1) + 1 >>> 0;
        var y_hi = (hi ^ -1) + (y_lo === 0 ? 1 : 0) | 0;
        return add_aux(x, y_lo, y_hi);
      }
      function sub(self2, param) {
        return sub_aux(self2, param[1], param[0]);
      }
      function lsl_(x, numBits) {
        if (numBits === 0) {
          return x;
        }
        var lo = x[1];
        if (numBits >= 32) {
          return [
            lo << (numBits - 32 | 0),
            0
          ];
        } else {
          return [
            lo >>> (32 - numBits | 0) | x[0] << numBits,
            lo << numBits >>> 0
          ];
        }
      }
      function lsr_(x, numBits) {
        if (numBits === 0) {
          return x;
        }
        var hi = x[0];
        var offset = numBits - 32 | 0;
        if (offset === 0) {
          return [
            0,
            hi >>> 0
          ];
        } else if (offset > 0) {
          return [
            0,
            hi >>> offset
          ];
        } else {
          return [
            hi >>> numBits,
            (hi << (-offset | 0) | x[1] >>> numBits) >>> 0
          ];
        }
      }
      function asr_(x, numBits) {
        if (numBits === 0) {
          return x;
        }
        var hi = x[0];
        if (numBits < 32) {
          return [
            hi >> numBits,
            (hi << (32 - numBits | 0) | x[1] >>> numBits) >>> 0
          ];
        } else {
          return [
            hi >= 0 ? 0 : -1,
            hi >> (numBits - 32 | 0) >>> 0
          ];
        }
      }
      function is_zero(param) {
        if (param[0] !== 0) {
          return false;
        } else {
          return param[1] === 0;
        }
      }
      function mul(_this, _other) {
        while (true) {
          var other = _other;
          var $$this = _this;
          var lo;
          var this_hi = $$this[0];
          var exit = 0;
          var exit$1 = 0;
          var exit$2 = 0;
          if (this_hi !== 0) {
            exit$2 = 4;
          } else {
            if ($$this[1] === 0) {
              return zero;
            }
            exit$2 = 4;
          }
          if (exit$2 === 4) {
            if (other[0] !== 0) {
              exit$1 = 3;
            } else {
              if (other[1] === 0) {
                return zero;
              }
              exit$1 = 3;
            }
          }
          if (exit$1 === 3) {
            if (this_hi !== -2147483648 || $$this[1] !== 0) {
              exit = 2;
            } else {
              lo = other[1];
            }
          }
          if (exit === 2) {
            var other_hi = other[0];
            var lo$1 = $$this[1];
            var exit$3 = 0;
            if (other_hi !== -2147483648 || other[1] !== 0) {
              exit$3 = 3;
            } else {
              lo = lo$1;
            }
            if (exit$3 === 3) {
              var other_lo = other[1];
              if (this_hi < 0) {
                if (other_hi >= 0) {
                  return neg(mul(neg($$this), other));
                }
                _other = neg(other);
                _this = neg($$this);
                continue;
              }
              if (other_hi < 0) {
                return neg(mul($$this, neg(other)));
              }
              var a48 = this_hi >>> 16;
              var a32 = this_hi & 65535;
              var a16 = lo$1 >>> 16;
              var a00 = lo$1 & 65535;
              var b48 = other_hi >>> 16;
              var b32 = other_hi & 65535;
              var b16 = other_lo >>> 16;
              var b00 = other_lo & 65535;
              var c48 = 0;
              var c32 = 0;
              var c16 = 0;
              var c00 = a00 * b00;
              c16 = (c00 >>> 16) + a16 * b00;
              c32 = c16 >>> 16;
              c16 = (c16 & 65535) + a00 * b16;
              c32 = c32 + (c16 >>> 16) + a32 * b00;
              c48 = c32 >>> 16;
              c32 = (c32 & 65535) + a16 * b16;
              c48 = c48 + (c32 >>> 16);
              c32 = (c32 & 65535) + a00 * b32;
              c48 = c48 + (c32 >>> 16);
              c32 = c32 & 65535;
              c48 = c48 + (a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48) & 65535;
              return [
                c32 | c48 << 16,
                (c00 & 65535 | (c16 & 65535) << 16) >>> 0
              ];
            }
          }
          if ((lo & 1) === 0) {
            return zero;
          } else {
            return min_int;
          }
        }
        ;
      }
      function xor(param, param$1) {
        return [
          param[0] ^ param$1[0],
          (param[1] ^ param$1[1]) >>> 0
        ];
      }
      function or_(param, param$1) {
        return [
          param[0] | param$1[0],
          (param[1] | param$1[1]) >>> 0
        ];
      }
      function and_(param, param$1) {
        return [
          param[0] & param$1[0],
          (param[1] & param$1[1]) >>> 0
        ];
      }
      function to_float(param) {
        return param[0] * 4294967296 + param[1];
      }
      function of_float(x) {
        if (isNaN(x) || !isFinite(x)) {
          return zero;
        }
        if (x <= -9223372036854776e3) {
          return min_int;
        }
        if (x + 1 >= 9223372036854776e3) {
          return max_int;
        }
        if (x < 0) {
          return neg(of_float(-x));
        }
        var hi = x / 4294967296 | 0;
        var lo = x % 4294967296 | 0;
        return [
          hi,
          lo >>> 0
        ];
      }
      function isSafeInteger(param) {
        var hi = param[0];
        var top11Bits = hi >> 21;
        if (top11Bits === 0) {
          return true;
        } else if (top11Bits === -1) {
          return !(param[1] === 0 && hi === -2097152);
        } else {
          return false;
        }
      }
      function to_string(self2) {
        if (isSafeInteger(self2)) {
          return String(to_float(self2));
        }
        if (self2[0] < 0) {
          if (Caml.i64_eq(self2, min_int)) {
            return "-9223372036854775808";
          } else {
            return "-" + to_string(neg(self2));
          }
        }
        var approx_div1 = of_float(Math.floor(to_float(self2) / 10));
        var lo = approx_div1[1];
        var hi = approx_div1[0];
        var match = sub_aux(sub_aux(self2, lo << 3, lo >>> 29 | hi << 3), lo << 1, lo >>> 31 | hi << 1);
        var rem_lo = match[1];
        var rem_hi = match[0];
        if (rem_lo === 0 && rem_hi === 0) {
          return to_string(approx_div1) + "0";
        }
        if (rem_hi < 0) {
          var rem_lo$1 = (rem_lo ^ -1) + 1 >>> 0;
          var delta = Math.ceil(rem_lo$1 / 10);
          var remainder = 10 * delta - rem_lo$1;
          return to_string(sub_aux(approx_div1, delta | 0, 0)) + String(remainder | 0);
        }
        var delta$1 = Math.floor(rem_lo / 10);
        var remainder$1 = rem_lo - 10 * delta$1;
        return to_string(add_aux(approx_div1, delta$1 | 0, 0)) + String(remainder$1 | 0);
      }
      function div(_self, _other) {
        while (true) {
          var other = _other;
          var self2 = _self;
          var self_hi = self2[0];
          var exit = 0;
          var exit$1 = 0;
          if (other[0] !== 0 || other[1] !== 0) {
            exit$1 = 2;
          } else {
            throw {
              RE_EXN_ID: "Division_by_zero",
              Error: new Error()
            };
          }
          if (exit$1 === 2) {
            if (self_hi !== -2147483648) {
              if (self_hi !== 0) {
                exit = 1;
              } else {
                if (self2[1] === 0) {
                  return zero;
                }
                exit = 1;
              }
            } else if (self2[1] !== 0) {
              exit = 1;
            } else {
              if (Caml.i64_eq(other, one) || Caml.i64_eq(other, neg_one)) {
                return self2;
              }
              if (Caml.i64_eq(other, min_int)) {
                return one;
              }
              var half_this = asr_(self2, 1);
              var approx = lsl_(div(half_this, other), 1);
              var exit$2 = 0;
              if (approx[0] !== 0) {
                exit$2 = 3;
              } else {
                if (approx[1] === 0) {
                  if (other[0] < 0) {
                    return one;
                  } else {
                    return neg(one);
                  }
                }
                exit$2 = 3;
              }
              if (exit$2 === 3) {
                var rem = sub(self2, mul(other, approx));
                return add(approx, div(rem, other));
              }
            }
          }
          if (exit === 1) {
            var other_hi = other[0];
            var exit$3 = 0;
            if (other_hi !== -2147483648) {
              exit$3 = 2;
            } else {
              if (other[1] === 0) {
                return zero;
              }
              exit$3 = 2;
            }
            if (exit$3 === 2) {
              if (self_hi < 0) {
                if (other_hi >= 0) {
                  return neg(div(neg(self2), other));
                }
                _other = neg(other);
                _self = neg(self2);
                continue;
              }
              if (other_hi < 0) {
                return neg(div(self2, neg(other)));
              }
              var res = zero;
              var rem$1 = self2;
              while (Caml.i64_ge(rem$1, other)) {
                var b = Math.floor(to_float(rem$1) / to_float(other));
                var approx$1 = 1 > b ? 1 : b;
                var log2 = Math.ceil(Math.log(approx$1) / Math.LN2);
                var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
                var approxRes = of_float(approx$1);
                var approxRem = mul(approxRes, other);
                while (approxRem[0] < 0 || Caml.i64_gt(approxRem, rem$1)) {
                  approx$1 = approx$1 - delta;
                  approxRes = of_float(approx$1);
                  approxRem = mul(approxRes, other);
                }
                ;
                if (is_zero(approxRes)) {
                  approxRes = one;
                }
                res = add(res, approxRes);
                rem$1 = sub(rem$1, approxRem);
              }
              ;
              return res;
            }
          }
        }
        ;
      }
      function mod_(self2, other) {
        return sub(self2, mul(div(self2, other), other));
      }
      function div_mod(self2, other) {
        var quotient = div(self2, other);
        return [
          quotient,
          sub(self2, mul(quotient, other))
        ];
      }
      function compare(self2, other) {
        var y = other[0];
        var x = self2[0];
        var v = x < y ? -1 : x === y ? 0 : 1;
        if (v !== 0) {
          return v;
        }
        var y$1 = other[1];
        var x$1 = self2[1];
        if (x$1 < y$1) {
          return -1;
        } else if (x$1 === y$1) {
          return 0;
        } else {
          return 1;
        }
      }
      function of_int32(lo) {
        return [
          lo < 0 ? -1 : 0,
          lo >>> 0
        ];
      }
      function to_int32(x) {
        return x[1] | 0;
      }
      function to_hex(x) {
        var x_lo = x[1];
        var x_hi = x[0];
        var aux = function(v) {
          return (v >>> 0).toString(16);
        };
        if (x_hi === 0 && x_lo === 0) {
          return "0";
        }
        if (x_lo === 0) {
          return aux(x_hi) + "00000000";
        }
        if (x_hi === 0) {
          return aux(x_lo);
        }
        var lo = aux(x_lo);
        var pad = 8 - lo.length | 0;
        if (pad <= 0) {
          return aux(x_hi) + lo;
        } else {
          return aux(x_hi) + ("0".repeat(pad) + lo);
        }
      }
      function discard_sign(x) {
        return [
          2147483647 & x[0],
          x[1]
        ];
      }
      function float_of_bits(x) {
        return function(lo, hi) {
          return new Float64Array(new Int32Array([lo, hi]).buffer)[0];
        }(x[1], x[0]);
      }
      function bits_of_float(x) {
        var match = function(x2) {
          return new Int32Array(new Float64Array([x2]).buffer);
        }(x);
        return [
          match[1],
          match[0] >>> 0
        ];
      }
      exports.mk = mk;
      exports.succ = succ;
      exports.min_int = min_int;
      exports.max_int = max_int;
      exports.one = one;
      exports.zero = zero;
      exports.neg_one = neg_one;
      exports.of_int32 = of_int32;
      exports.to_int32 = to_int32;
      exports.add = add;
      exports.neg = neg;
      exports.sub = sub;
      exports.lsl_ = lsl_;
      exports.lsr_ = lsr_;
      exports.asr_ = asr_;
      exports.is_zero = is_zero;
      exports.mul = mul;
      exports.xor = xor;
      exports.or_ = or_;
      exports.and_ = and_;
      exports.equal_null = equal_null;
      exports.equal_undefined = equal_undefined;
      exports.equal_nullable = equal_nullable;
      exports.to_float = to_float;
      exports.of_float = of_float;
      exports.div = div;
      exports.mod_ = mod_;
      exports.compare = compare;
      exports.float_of_bits = float_of_bits;
      exports.bits_of_float = bits_of_float;
      exports.div_mod = div_mod;
      exports.to_hex = to_hex;
      exports.discard_sign = discard_sign;
      exports.to_string = to_string;
    }
  });

  // node_modules/@rescript/std/lib/js/caml_format.js
  var require_caml_format = __commonJS({
    "node_modules/@rescript/std/lib/js/caml_format.js"(exports) {
      "use strict";
      var Caml = require_caml();
      var Caml_int64 = require_caml_int64();
      function parse_digit(c) {
        if (c >= 65) {
          if (c >= 97) {
            if (c >= 123) {
              return -1;
            } else {
              return c - 87 | 0;
            }
          } else if (c >= 91) {
            return -1;
          } else {
            return c - 55 | 0;
          }
        } else if (c > 57 || c < 48) {
          return -1;
        } else {
          return c - 48 | 0;
        }
      }
      function int_of_string_base(param) {
        switch (param) {
          case 0:
            return 8;
          case 1:
            return 16;
          case 2:
            return 10;
          case 3:
            return 2;
        }
      }
      function parse_sign_and_base(s) {
        var sign = 1;
        var base = 2;
        var i = 0;
        var match = s.charCodeAt(i);
        switch (match) {
          case 43:
            i = i + 1 | 0;
            break;
          case 44:
            break;
          case 45:
            sign = -1;
            i = i + 1 | 0;
            break;
          default:
        }
        if (s[i] === "0") {
          var match$1 = s.charCodeAt(i + 1 | 0);
          if (match$1 >= 89) {
            if (match$1 >= 111) {
              if (match$1 < 121) {
                switch (match$1) {
                  case 111:
                    base = 0;
                    i = i + 2 | 0;
                    break;
                  case 117:
                    i = i + 2 | 0;
                    break;
                  case 112:
                  case 113:
                  case 114:
                  case 115:
                  case 116:
                  case 118:
                  case 119:
                    break;
                  case 120:
                    base = 1;
                    i = i + 2 | 0;
                    break;
                }
              }
            } else if (match$1 === 98) {
              base = 3;
              i = i + 2 | 0;
            }
          } else if (match$1 !== 66) {
            if (match$1 >= 79) {
              switch (match$1) {
                case 79:
                  base = 0;
                  i = i + 2 | 0;
                  break;
                case 85:
                  i = i + 2 | 0;
                  break;
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 86:
                case 87:
                  break;
                case 88:
                  base = 1;
                  i = i + 2 | 0;
                  break;
              }
            }
          } else {
            base = 3;
            i = i + 2 | 0;
          }
        }
        return [
          i,
          sign,
          base
        ];
      }
      function caml_int_of_string(s) {
        var match = parse_sign_and_base(s);
        var i = match[0];
        var base = int_of_string_base(match[2]);
        var threshold = 4294967295;
        var len = s.length;
        var c = i < len ? s.charCodeAt(i) : 0;
        var d = parse_digit(c);
        if (d < 0 || d >= base) {
          throw {
            RE_EXN_ID: "Failure",
            _1: "int_of_string",
            Error: new Error()
          };
        }
        var aux = function(_acc, _k) {
          while (true) {
            var k = _k;
            var acc = _acc;
            if (k === len) {
              return acc;
            }
            var a = s.charCodeAt(k);
            if (a === 95) {
              _k = k + 1 | 0;
              continue;
            }
            var v = parse_digit(a);
            if (v < 0 || v >= base) {
              throw {
                RE_EXN_ID: "Failure",
                _1: "int_of_string",
                Error: new Error()
              };
            }
            var acc$1 = base * acc + v;
            if (acc$1 > threshold) {
              throw {
                RE_EXN_ID: "Failure",
                _1: "int_of_string",
                Error: new Error()
              };
            }
            _k = k + 1 | 0;
            _acc = acc$1;
            continue;
          }
          ;
        };
        var res = match[1] * aux(d, i + 1 | 0);
        var or_res = res | 0;
        if (base === 10 && res !== or_res) {
          throw {
            RE_EXN_ID: "Failure",
            _1: "int_of_string",
            Error: new Error()
          };
        }
        return or_res;
      }
      function caml_int64_of_string(s) {
        var match = parse_sign_and_base(s);
        var hbase = match[2];
        var i = match[0];
        var base = Caml_int64.of_int32(int_of_string_base(hbase));
        var sign = Caml_int64.of_int32(match[1]);
        var threshold;
        switch (hbase) {
          case 0:
            threshold = [
              536870911,
              4294967295
            ];
            break;
          case 1:
            threshold = [
              268435455,
              4294967295
            ];
            break;
          case 2:
            threshold = [
              429496729,
              2576980377
            ];
            break;
          case 3:
            threshold = Caml_int64.max_int;
            break;
        }
        var len = s.length;
        var c = i < len ? s.charCodeAt(i) : 0;
        var d = Caml_int64.of_int32(parse_digit(c));
        if (Caml.i64_lt(d, Caml_int64.zero) || Caml.i64_ge(d, base)) {
          throw {
            RE_EXN_ID: "Failure",
            _1: "int64_of_string",
            Error: new Error()
          };
        }
        var aux = function(_acc, _k) {
          while (true) {
            var k = _k;
            var acc = _acc;
            if (k === len) {
              return acc;
            }
            var a = s.charCodeAt(k);
            if (a === 95) {
              _k = k + 1 | 0;
              continue;
            }
            var v = Caml_int64.of_int32(parse_digit(a));
            if (Caml.i64_lt(v, Caml_int64.zero) || Caml.i64_ge(v, base) || Caml.i64_gt(acc, threshold)) {
              throw {
                RE_EXN_ID: "Failure",
                _1: "int64_of_string",
                Error: new Error()
              };
            }
            var acc$1 = Caml_int64.add(Caml_int64.mul(base, acc), v);
            _k = k + 1 | 0;
            _acc = acc$1;
            continue;
          }
          ;
        };
        var res = Caml_int64.mul(sign, aux(d, i + 1 | 0));
        var or_res = Caml_int64.or_(res, Caml_int64.zero);
        if (Caml.i64_eq(base, [
          0,
          10
        ]) && Caml.i64_neq(res, or_res)) {
          throw {
            RE_EXN_ID: "Failure",
            _1: "int64_of_string",
            Error: new Error()
          };
        }
        return or_res;
      }
      function int_of_base(param) {
        switch (param) {
          case 0:
            return 8;
          case 1:
            return 16;
          case 2:
            return 10;
        }
      }
      function lowercase(c) {
        if (c >= 65 && c <= 90 || c >= 192 && c <= 214 || c >= 216 && c <= 222) {
          return c + 32 | 0;
        } else {
          return c;
        }
      }
      function parse_format(fmt) {
        var len = fmt.length;
        if (len > 31) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "format_int: format too long",
            Error: new Error()
          };
        }
        var f = {
          justify: "+",
          signstyle: "-",
          filter: " ",
          alternate: false,
          base: 2,
          signedconv: false,
          width: 0,
          uppercase: false,
          sign: 1,
          prec: -1,
          conv: "f"
        };
        var _i = 0;
        while (true) {
          var i = _i;
          if (i >= len) {
            return f;
          }
          var c = fmt.charCodeAt(i);
          var exit = 0;
          if (c >= 69) {
            if (c >= 88) {
              if (c >= 121) {
                exit = 1;
              } else {
                switch (c) {
                  case 88:
                    f.base = 1;
                    f.uppercase = true;
                    _i = i + 1 | 0;
                    continue;
                  case 101:
                  case 102:
                  case 103:
                    exit = 5;
                    break;
                  case 100:
                  case 105:
                    exit = 4;
                    break;
                  case 111:
                    f.base = 0;
                    _i = i + 1 | 0;
                    continue;
                  case 117:
                    f.base = 2;
                    _i = i + 1 | 0;
                    continue;
                  case 89:
                  case 90:
                  case 91:
                  case 92:
                  case 93:
                  case 94:
                  case 95:
                  case 96:
                  case 97:
                  case 98:
                  case 99:
                  case 104:
                  case 106:
                  case 107:
                  case 108:
                  case 109:
                  case 110:
                  case 112:
                  case 113:
                  case 114:
                  case 115:
                  case 116:
                  case 118:
                  case 119:
                    exit = 1;
                    break;
                  case 120:
                    f.base = 1;
                    _i = i + 1 | 0;
                    continue;
                }
              }
            } else if (c >= 72) {
              exit = 1;
            } else {
              f.signedconv = true;
              f.uppercase = true;
              f.conv = String.fromCharCode(lowercase(c));
              _i = i + 1 | 0;
              continue;
            }
          } else {
            switch (c) {
              case 35:
                f.alternate = true;
                _i = i + 1 | 0;
                continue;
              case 32:
              case 43:
                exit = 2;
                break;
              case 45:
                f.justify = "-";
                _i = i + 1 | 0;
                continue;
              case 46:
                f.prec = 0;
                var j = i + 1 | 0;
                while (function(j2) {
                  return function() {
                    var w = fmt.charCodeAt(j2) - 48 | 0;
                    return w >= 0 && w <= 9;
                  };
                }(j)()) {
                  f.prec = (Math.imul(f.prec, 10) + fmt.charCodeAt(j) | 0) - 48 | 0;
                  j = j + 1 | 0;
                }
                ;
                _i = j;
                continue;
              case 33:
              case 34:
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 44:
              case 47:
                exit = 1;
                break;
              case 48:
                f.filter = "0";
                _i = i + 1 | 0;
                continue;
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
                exit = 3;
                break;
              default:
                exit = 1;
            }
          }
          switch (exit) {
            case 1:
              _i = i + 1 | 0;
              continue;
            case 2:
              f.signstyle = String.fromCharCode(c);
              _i = i + 1 | 0;
              continue;
            case 3:
              f.width = 0;
              var j$1 = i;
              while (function(j$12) {
                return function() {
                  var w = fmt.charCodeAt(j$12) - 48 | 0;
                  return w >= 0 && w <= 9;
                };
              }(j$1)()) {
                f.width = (Math.imul(f.width, 10) + fmt.charCodeAt(j$1) | 0) - 48 | 0;
                j$1 = j$1 + 1 | 0;
              }
              ;
              _i = j$1;
              continue;
            case 4:
              f.signedconv = true;
              f.base = 2;
              _i = i + 1 | 0;
              continue;
            case 5:
              f.signedconv = true;
              f.conv = String.fromCharCode(c);
              _i = i + 1 | 0;
              continue;
          }
        }
        ;
      }
      function finish_formatting(config, rawbuffer) {
        var justify = config.justify;
        var signstyle = config.signstyle;
        var filter = config.filter;
        var alternate = config.alternate;
        var base = config.base;
        var signedconv = config.signedconv;
        var width = config.width;
        var uppercase = config.uppercase;
        var sign = config.sign;
        var len = rawbuffer.length;
        if (signedconv && (sign < 0 || signstyle !== "-")) {
          len = len + 1 | 0;
        }
        if (alternate) {
          if (base === 0) {
            len = len + 1 | 0;
          } else if (base === 1) {
            len = len + 2 | 0;
          }
        }
        var buffer = "";
        if (justify === "+" && filter === " ") {
          for (var _for = len; _for < width; ++_for) {
            buffer = buffer + filter;
          }
        }
        if (signedconv) {
          if (sign < 0) {
            buffer = buffer + "-";
          } else if (signstyle !== "-") {
            buffer = buffer + signstyle;
          }
        }
        if (alternate && base === 0) {
          buffer = buffer + "0";
        }
        if (alternate && base === 1) {
          buffer = buffer + "0x";
        }
        if (justify === "+" && filter === "0") {
          for (var _for$1 = len; _for$1 < width; ++_for$1) {
            buffer = buffer + filter;
          }
        }
        buffer = uppercase ? buffer + rawbuffer.toUpperCase() : buffer + rawbuffer;
        if (justify === "-") {
          for (var _for$2 = len; _for$2 < width; ++_for$2) {
            buffer = buffer + " ";
          }
        }
        return buffer;
      }
      function caml_format_int(fmt, i) {
        if (fmt === "%d") {
          return String(i);
        }
        var f = parse_format(fmt);
        var i$1 = i < 0 ? f.signedconv ? (f.sign = -1, -i >>> 0) : i >>> 0 : i;
        var s = i$1.toString(int_of_base(f.base));
        if (f.prec >= 0) {
          f.filter = " ";
          var n = f.prec - s.length | 0;
          if (n > 0) {
            s = "0".repeat(n) + s;
          }
        }
        return finish_formatting(f, s);
      }
      function dec_of_pos_int64(x) {
        if (!Caml.i64_lt(x, Caml_int64.zero)) {
          return Caml_int64.to_string(x);
        }
        var wbase = [
          0,
          10
        ];
        var y = Caml_int64.discard_sign(x);
        var match = Caml_int64.div_mod(y, wbase);
        var match$1 = Caml_int64.div_mod(Caml_int64.add([
          0,
          8
        ], match[1]), wbase);
        var quotient = Caml_int64.add(Caml_int64.add([
          214748364,
          3435973836
        ], match[0]), match$1[0]);
        return Caml_int64.to_string(quotient) + "0123456789"[Caml_int64.to_int32(match$1[1])];
      }
      function oct_of_int64(x) {
        var s = "";
        var wbase = [
          0,
          8
        ];
        var cvtbl = "01234567";
        if (Caml.i64_lt(x, Caml_int64.zero)) {
          var y = Caml_int64.discard_sign(x);
          var match = Caml_int64.div_mod(y, wbase);
          var quotient = Caml_int64.add([
            268435456,
            0
          ], match[0]);
          var modulus = match[1];
          s = cvtbl[Caml_int64.to_int32(modulus)] + s;
          while (Caml.i64_neq(quotient, Caml_int64.zero)) {
            var match$1 = Caml_int64.div_mod(quotient, wbase);
            quotient = match$1[0];
            modulus = match$1[1];
            s = cvtbl[Caml_int64.to_int32(modulus)] + s;
          }
          ;
        } else {
          var match$2 = Caml_int64.div_mod(x, wbase);
          var quotient$1 = match$2[0];
          var modulus$1 = match$2[1];
          s = cvtbl[Caml_int64.to_int32(modulus$1)] + s;
          while (Caml.i64_neq(quotient$1, Caml_int64.zero)) {
            var match$3 = Caml_int64.div_mod(quotient$1, wbase);
            quotient$1 = match$3[0];
            modulus$1 = match$3[1];
            s = cvtbl[Caml_int64.to_int32(modulus$1)] + s;
          }
          ;
        }
        return s;
      }
      function caml_int64_format(fmt, x) {
        if (fmt === "%d") {
          return Caml_int64.to_string(x);
        }
        var f = parse_format(fmt);
        var x$1 = f.signedconv && Caml.i64_lt(x, Caml_int64.zero) ? (f.sign = -1, Caml_int64.neg(x)) : x;
        var match = f.base;
        var s;
        switch (match) {
          case 0:
            s = oct_of_int64(x$1);
            break;
          case 1:
            s = Caml_int64.to_hex(x$1);
            break;
          case 2:
            s = dec_of_pos_int64(x$1);
            break;
        }
        var fill_s;
        if (f.prec >= 0) {
          f.filter = " ";
          var n = f.prec - s.length | 0;
          fill_s = n > 0 ? "0".repeat(n) + s : s;
        } else {
          fill_s = s;
        }
        return finish_formatting(f, fill_s);
      }
      function caml_format_float(fmt, x) {
        var f = parse_format(fmt);
        var prec = f.prec < 0 ? 6 : f.prec;
        var x$1 = x < 0 ? (f.sign = -1, -x) : x;
        var s = "";
        if (isNaN(x$1)) {
          s = "nan";
          f.filter = " ";
        } else if (isFinite(x$1)) {
          var match = f.conv;
          switch (match) {
            case "e":
              s = x$1.toExponential(prec);
              var i = s.length;
              if (s[i - 3 | 0] === "e") {
                s = s.slice(0, i - 1 | 0) + ("0" + s.slice(i - 1 | 0));
              }
              break;
            case "f":
              s = x$1.toFixed(prec);
              break;
            case "g":
              var prec$1 = prec !== 0 ? prec : 1;
              s = x$1.toExponential(prec$1 - 1 | 0);
              var j = s.indexOf("e");
              var exp = Number(s.slice(j + 1 | 0)) | 0;
              if (exp < -4 || x$1 >= 1e21 || x$1.toFixed().length > prec$1) {
                var i$1 = j - 1 | 0;
                while (s[i$1] === "0") {
                  i$1 = i$1 - 1 | 0;
                }
                ;
                if (s[i$1] === ".") {
                  i$1 = i$1 - 1 | 0;
                }
                s = s.slice(0, i$1 + 1 | 0) + s.slice(j);
                var i$2 = s.length;
                if (s[i$2 - 3 | 0] === "e") {
                  s = s.slice(0, i$2 - 1 | 0) + ("0" + s.slice(i$2 - 1 | 0));
                }
              } else {
                var p = prec$1;
                if (exp < 0) {
                  p = p - (exp + 1 | 0) | 0;
                  s = x$1.toFixed(p);
                } else {
                  while (function() {
                    s = x$1.toFixed(p);
                    return s.length > (prec$1 + 1 | 0);
                  }()) {
                    p = p - 1 | 0;
                  }
                  ;
                }
                if (p !== 0) {
                  var k = s.length - 1 | 0;
                  while (s[k] === "0") {
                    k = k - 1 | 0;
                  }
                  ;
                  if (s[k] === ".") {
                    k = k - 1 | 0;
                  }
                  s = s.slice(0, k + 1 | 0);
                }
              }
              break;
            default:
          }
        } else {
          s = "inf";
          f.filter = " ";
        }
        return finish_formatting(f, s);
      }
      var caml_hexstring_of_float = function(x, prec, style) {
        if (!isFinite(x)) {
          if (isNaN(x))
            return "nan";
          return x > 0 ? "infinity" : "-infinity";
        }
        var sign = x == 0 && 1 / x == -Infinity ? 1 : x >= 0 ? 0 : 1;
        if (sign)
          x = -x;
        var exp = 0;
        if (x == 0) {
        } else if (x < 1) {
          while (x < 1 && exp > -1022) {
            x *= 2;
            exp--;
          }
        } else {
          while (x >= 2) {
            x /= 2;
            exp++;
          }
        }
        var exp_sign = exp < 0 ? "" : "+";
        var sign_str = "";
        if (sign)
          sign_str = "-";
        else {
          switch (style) {
            case 43:
              sign_str = "+";
              break;
            case 32:
              sign_str = " ";
              break;
            default:
              break;
          }
        }
        if (prec >= 0 && prec < 13) {
          var cst = Math.pow(2, prec * 4);
          x = Math.round(x * cst) / cst;
        }
        var x_str = x.toString(16);
        if (prec >= 0) {
          var idx = x_str.indexOf(".");
          if (idx < 0) {
            x_str += "." + "0".repeat(prec);
          } else {
            var size = idx + 1 + prec;
            if (x_str.length < size)
              x_str += "0".repeat(size - x_str.length);
            else
              x_str = x_str.substr(0, size);
          }
        }
        return sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10);
      };
      var float_of_string = function(s, exn) {
        var res = +s;
        if (s.length > 0 && res === res)
          return res;
        s = s.replace(/_/g, "");
        res = +s;
        if (s.length > 0 && res === res || /^[+-]?nan$/i.test(s)) {
          return res;
        }
        ;
        var m = /^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);
        if (m) {
          var m3 = m[3].replace(/0+$/, "");
          var mantissa = parseInt(m[1] + m[2] + m3, 16);
          var exponent = (m[4] | 0) - 4 * m3.length;
          res = mantissa * Math.pow(2, exponent);
          return res;
        }
        if (/^\+?inf(inity)?$/i.test(s))
          return Infinity;
        if (/^-inf(inity)?$/i.test(s))
          return -Infinity;
        throw exn;
      };
      function caml_float_of_string(s) {
        return float_of_string(s, {
          RE_EXN_ID: "Failure",
          _1: "float_of_string"
        });
      }
      var caml_nativeint_format = caml_format_int;
      var caml_int32_format = caml_format_int;
      var caml_int32_of_string = caml_int_of_string;
      var caml_nativeint_of_string = caml_int_of_string;
      exports.caml_format_float = caml_format_float;
      exports.caml_hexstring_of_float = caml_hexstring_of_float;
      exports.caml_format_int = caml_format_int;
      exports.caml_nativeint_format = caml_nativeint_format;
      exports.caml_int32_format = caml_int32_format;
      exports.caml_float_of_string = caml_float_of_string;
      exports.caml_int64_format = caml_int64_format;
      exports.caml_int_of_string = caml_int_of_string;
      exports.caml_int32_of_string = caml_int32_of_string;
      exports.caml_int64_of_string = caml_int64_of_string;
      exports.caml_nativeint_of_string = caml_nativeint_of_string;
    }
  });

  // node_modules/@rescript/std/lib/js/int32.js
  var require_int32 = __commonJS({
    "node_modules/@rescript/std/lib/js/int32.js"(exports) {
      "use strict";
      var Caml = require_caml();
      var Caml_format = require_caml_format();
      var Caml_js_exceptions = require_caml_js_exceptions();
      function succ(n) {
        return n + 1 | 0;
      }
      function pred(n) {
        return n - 1 | 0;
      }
      function abs(n) {
        if (n >= 0) {
          return n;
        } else {
          return -n | 0;
        }
      }
      function lognot(n) {
        return n ^ -1;
      }
      function to_string(n) {
        return Caml_format.caml_int32_format("%d", n);
      }
      function of_string_opt(s) {
        try {
          return Caml_format.caml_int32_of_string(s);
        } catch (raw_exn) {
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          if (exn.RE_EXN_ID === "Failure") {
            return;
          }
          throw exn;
        }
      }
      var compare = Caml.caml_int_compare;
      function equal(x, y) {
        return x === y;
      }
      var zero = 0;
      var one = 1;
      var minus_one = -1;
      var max_int = 2147483647;
      var min_int = -2147483648;
      exports.zero = zero;
      exports.one = one;
      exports.minus_one = minus_one;
      exports.succ = succ;
      exports.pred = pred;
      exports.abs = abs;
      exports.max_int = max_int;
      exports.min_int = min_int;
      exports.lognot = lognot;
      exports.of_string_opt = of_string_opt;
      exports.to_string = to_string;
      exports.compare = compare;
      exports.equal = equal;
    }
  });

  // node_modules/@rescript/std/lib/js/int64.js
  var require_int64 = __commonJS({
    "node_modules/@rescript/std/lib/js/int64.js"(exports) {
      "use strict";
      var Caml = require_caml();
      var Caml_int64 = require_caml_int64();
      var Caml_format = require_caml_format();
      var Caml_js_exceptions = require_caml_js_exceptions();
      function pred(n) {
        return Caml_int64.sub(n, Caml_int64.one);
      }
      function abs(n) {
        if (Caml.i64_ge(n, Caml_int64.zero)) {
          return n;
        } else {
          return Caml_int64.neg(n);
        }
      }
      function lognot(n) {
        return Caml_int64.xor(n, Caml_int64.neg_one);
      }
      function of_string_opt(s) {
        try {
          return Caml_format.caml_int64_of_string(s);
        } catch (raw_exn) {
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          if (exn.RE_EXN_ID === "Failure") {
            return;
          }
          throw exn;
        }
      }
      var compare = Caml_int64.compare;
      function equal(x, y) {
        return Caml_int64.compare(x, y) === 0;
      }
      var zero = Caml_int64.zero;
      var one = Caml_int64.one;
      var minus_one = Caml_int64.neg_one;
      var succ = Caml_int64.succ;
      var max_int = Caml_int64.max_int;
      var min_int = Caml_int64.min_int;
      var to_string = Caml_int64.to_string;
      exports.zero = zero;
      exports.one = one;
      exports.minus_one = minus_one;
      exports.succ = succ;
      exports.pred = pred;
      exports.abs = abs;
      exports.max_int = max_int;
      exports.min_int = min_int;
      exports.lognot = lognot;
      exports.of_string_opt = of_string_opt;
      exports.to_string = to_string;
      exports.compare = compare;
      exports.equal = equal;
    }
  });

  // node_modules/@rescript/std/lib/js/caml_bytes.js
  var require_caml_bytes = __commonJS({
    "node_modules/@rescript/std/lib/js/caml_bytes.js"(exports) {
      "use strict";
      function set(s, i, ch) {
        if (i < 0 || i >= s.length) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "index out of bounds",
            Error: new Error()
          };
        }
        s[i] = ch;
      }
      function get(s, i) {
        if (i < 0 || i >= s.length) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "index out of bounds",
            Error: new Error()
          };
        }
        return s[i];
      }
      function caml_fill_bytes(s, i, l, c) {
        if (l <= 0) {
          return;
        }
        for (var k = i, k_finish = l + i | 0; k < k_finish; ++k) {
          s[k] = c;
        }
      }
      function caml_create_bytes(len) {
        if (len < 0) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.create",
            Error: new Error()
          };
        }
        var result = new Array(len);
        for (var i = 0; i < len; ++i) {
          result[i] = 0;
        }
        return result;
      }
      function caml_blit_bytes(s1, i1, s2, i2, len) {
        if (len <= 0) {
          return;
        }
        if (s1 === s2) {
          if (i1 < i2) {
            var range_a = (s1.length - i2 | 0) - 1 | 0;
            var range_b = len - 1 | 0;
            var range = range_a > range_b ? range_b : range_a;
            for (var j = range; j >= 0; --j) {
              s1[i2 + j | 0] = s1[i1 + j | 0];
            }
            return;
          }
          if (i1 <= i2) {
            return;
          }
          var range_a$1 = (s1.length - i1 | 0) - 1 | 0;
          var range_b$1 = len - 1 | 0;
          var range$1 = range_a$1 > range_b$1 ? range_b$1 : range_a$1;
          for (var k = 0; k <= range$1; ++k) {
            s1[i2 + k | 0] = s1[i1 + k | 0];
          }
          return;
        }
        var off1 = s1.length - i1 | 0;
        if (len <= off1) {
          for (var i = 0; i < len; ++i) {
            s2[i2 + i | 0] = s1[i1 + i | 0];
          }
          return;
        }
        for (var i$1 = 0; i$1 < off1; ++i$1) {
          s2[i2 + i$1 | 0] = s1[i1 + i$1 | 0];
        }
        for (var i$2 = off1; i$2 < len; ++i$2) {
          s2[i2 + i$2 | 0] = 0;
        }
      }
      function bytes_to_string(a) {
        var i = 0;
        var len = a.length;
        var s = "";
        var s_len = len;
        if (i === 0 && len <= 4096 && len === a.length) {
          return String.fromCharCode.apply(null, a);
        }
        var offset = 0;
        while (s_len > 0) {
          var next = s_len < 1024 ? s_len : 1024;
          var tmp_bytes = new Array(next);
          for (var k = 0; k < next; ++k) {
            tmp_bytes[k] = a[k + offset | 0];
          }
          s = s + String.fromCharCode.apply(null, tmp_bytes);
          s_len = s_len - next | 0;
          offset = offset + next | 0;
        }
        ;
        return s;
      }
      function caml_blit_string(s1, i1, s2, i2, len) {
        if (len <= 0) {
          return;
        }
        var off1 = s1.length - i1 | 0;
        if (len <= off1) {
          for (var i = 0; i < len; ++i) {
            s2[i2 + i | 0] = s1.charCodeAt(i1 + i | 0);
          }
          return;
        }
        for (var i$1 = 0; i$1 < off1; ++i$1) {
          s2[i2 + i$1 | 0] = s1.charCodeAt(i1 + i$1 | 0);
        }
        for (var i$2 = off1; i$2 < len; ++i$2) {
          s2[i2 + i$2 | 0] = 0;
        }
      }
      function bytes_of_string(s) {
        var len = s.length;
        var res = new Array(len);
        for (var i = 0; i < len; ++i) {
          res[i] = s.charCodeAt(i);
        }
        return res;
      }
      function caml_bytes_compare_aux(s1, s2, _off, len, def) {
        while (true) {
          var off = _off;
          if (off >= len) {
            return def;
          }
          var a = s1[off];
          var b = s2[off];
          if (a > b) {
            return 1;
          }
          if (a < b) {
            return -1;
          }
          _off = off + 1 | 0;
          continue;
        }
        ;
      }
      function caml_bytes_compare(s1, s2) {
        var len1 = s1.length;
        var len2 = s2.length;
        if (len1 === len2) {
          return caml_bytes_compare_aux(s1, s2, 0, len1, 0);
        } else if (len1 < len2) {
          return caml_bytes_compare_aux(s1, s2, 0, len1, -1);
        } else {
          return caml_bytes_compare_aux(s1, s2, 0, len2, 1);
        }
      }
      function caml_bytes_equal(s1, s2) {
        var len1 = s1.length;
        var len2 = s2.length;
        if (len1 === len2) {
          var _off = 0;
          while (true) {
            var off = _off;
            if (off === len1) {
              return true;
            }
            var a = s1[off];
            var b = s2[off];
            if (a !== b) {
              return false;
            }
            _off = off + 1 | 0;
            continue;
          }
          ;
        } else {
          return false;
        }
      }
      function caml_bytes_greaterthan(s1, s2) {
        return caml_bytes_compare(s1, s2) > 0;
      }
      function caml_bytes_greaterequal(s1, s2) {
        return caml_bytes_compare(s1, s2) >= 0;
      }
      function caml_bytes_lessthan(s1, s2) {
        return caml_bytes_compare(s1, s2) < 0;
      }
      function caml_bytes_lessequal(s1, s2) {
        return caml_bytes_compare(s1, s2) <= 0;
      }
      exports.caml_create_bytes = caml_create_bytes;
      exports.caml_fill_bytes = caml_fill_bytes;
      exports.get = get;
      exports.set = set;
      exports.bytes_to_string = bytes_to_string;
      exports.caml_blit_bytes = caml_blit_bytes;
      exports.caml_blit_string = caml_blit_string;
      exports.bytes_of_string = bytes_of_string;
      exports.caml_bytes_compare = caml_bytes_compare;
      exports.caml_bytes_greaterthan = caml_bytes_greaterthan;
      exports.caml_bytes_greaterequal = caml_bytes_greaterequal;
      exports.caml_bytes_lessthan = caml_bytes_lessthan;
      exports.caml_bytes_lessequal = caml_bytes_lessequal;
      exports.caml_bytes_equal = caml_bytes_equal;
    }
  });

  // node_modules/@rescript/std/lib/js/char.js
  var require_char = __commonJS({
    "node_modules/@rescript/std/lib/js/char.js"(exports) {
      "use strict";
      var Caml_bytes = require_caml_bytes();
      function chr(n) {
        if (n < 0 || n > 255) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Char.chr",
            Error: new Error()
          };
        }
        return n;
      }
      function escaped(c) {
        var exit = 0;
        if (c >= 40) {
          if (c === 92) {
            return "\\\\";
          }
          exit = c >= 127 ? 1 : 2;
        } else if (c >= 32) {
          if (c >= 39) {
            return "\\'";
          }
          exit = 2;
        } else if (c >= 14) {
          exit = 1;
        } else {
          switch (c) {
            case 8:
              return "\\b";
            case 9:
              return "\\t";
            case 10:
              return "\\n";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 11:
            case 12:
              exit = 1;
              break;
            case 13:
              return "\\r";
          }
        }
        switch (exit) {
          case 1:
            var s = [
              0,
              0,
              0,
              0
            ];
            s[0] = 92;
            s[1] = 48 + (c / 100 | 0) | 0;
            s[2] = 48 + (c / 10 | 0) % 10 | 0;
            s[3] = 48 + c % 10 | 0;
            return Caml_bytes.bytes_to_string(s);
          case 2:
            var s$1 = [0];
            s$1[0] = c;
            return Caml_bytes.bytes_to_string(s$1);
        }
      }
      function lowercase(c) {
        if (c >= 65 && c <= 90 || c >= 192 && c <= 214 || c >= 216 && c <= 222) {
          return c + 32 | 0;
        } else {
          return c;
        }
      }
      function uppercase(c) {
        if (c >= 97 && c <= 122 || c >= 224 && c <= 246 || c >= 248 && c <= 254) {
          return c - 32 | 0;
        } else {
          return c;
        }
      }
      function lowercase_ascii(c) {
        if (c >= 65 && c <= 90) {
          return c + 32 | 0;
        } else {
          return c;
        }
      }
      function uppercase_ascii(c) {
        if (c >= 97 && c <= 122) {
          return c - 32 | 0;
        } else {
          return c;
        }
      }
      function compare(c1, c2) {
        return c1 - c2 | 0;
      }
      function equal(c1, c2) {
        return (c1 - c2 | 0) === 0;
      }
      exports.chr = chr;
      exports.escaped = escaped;
      exports.lowercase = lowercase;
      exports.uppercase = uppercase;
      exports.lowercase_ascii = lowercase_ascii;
      exports.uppercase_ascii = uppercase_ascii;
      exports.compare = compare;
      exports.equal = equal;
    }
  });

  // node_modules/@rescript/std/lib/js/bytes.js
  var require_bytes = __commonJS({
    "node_modules/@rescript/std/lib/js/bytes.js"(exports) {
      "use strict";
      var Caml = require_caml();
      var Char = require_char();
      var Curry = require_curry();
      var Caml_bytes = require_caml_bytes();
      var Caml_js_exceptions = require_caml_js_exceptions();
      function make(n, c) {
        var s = Caml_bytes.caml_create_bytes(n);
        Caml_bytes.caml_fill_bytes(s, 0, n, c);
        return s;
      }
      function init(n, f) {
        var s = Caml_bytes.caml_create_bytes(n);
        for (var i = 0; i < n; ++i) {
          s[i] = Curry._1(f, i);
        }
        return s;
      }
      var empty = [];
      function copy(s) {
        var len = s.length;
        var r = Caml_bytes.caml_create_bytes(len);
        Caml_bytes.caml_blit_bytes(s, 0, r, 0, len);
        return r;
      }
      function to_string(b) {
        return Caml_bytes.bytes_to_string(copy(b));
      }
      function of_string(s) {
        return copy(Caml_bytes.bytes_of_string(s));
      }
      function sub(s, ofs, len) {
        if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.sub / Bytes.sub",
            Error: new Error()
          };
        }
        var r = Caml_bytes.caml_create_bytes(len);
        Caml_bytes.caml_blit_bytes(s, ofs, r, 0, len);
        return r;
      }
      function sub_string(b, ofs, len) {
        return Caml_bytes.bytes_to_string(sub(b, ofs, len));
      }
      function $plus$plus(a, b) {
        var c = a + b | 0;
        var match = a < 0;
        var match$1 = b < 0;
        var match$2 = c < 0;
        if (match) {
          if (!match$1) {
            return c;
          }
          if (match$2) {
            return c;
          }
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Bytes.extend",
            Error: new Error()
          };
        }
        if (match$1) {
          return c;
        }
        if (match$2) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Bytes.extend",
            Error: new Error()
          };
        }
        return c;
      }
      function extend(s, left, right) {
        var len = $plus$plus($plus$plus(s.length, left), right);
        var r = Caml_bytes.caml_create_bytes(len);
        var match = left < 0 ? [
          -left | 0,
          0
        ] : [
          0,
          left
        ];
        var dstoff = match[1];
        var srcoff = match[0];
        var cpylen = Caml.caml_int_min(s.length - srcoff | 0, len - dstoff | 0);
        if (cpylen > 0) {
          Caml_bytes.caml_blit_bytes(s, srcoff, r, dstoff, cpylen);
        }
        return r;
      }
      function fill(s, ofs, len, c) {
        if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.fill / Bytes.fill",
            Error: new Error()
          };
        }
        return Caml_bytes.caml_fill_bytes(s, ofs, len, c);
      }
      function blit(s1, ofs1, s2, ofs2, len) {
        if (len < 0 || ofs1 < 0 || ofs1 > (s1.length - len | 0) || ofs2 < 0 || ofs2 > (s2.length - len | 0)) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Bytes.blit",
            Error: new Error()
          };
        }
        return Caml_bytes.caml_blit_bytes(s1, ofs1, s2, ofs2, len);
      }
      function blit_string(s1, ofs1, s2, ofs2, len) {
        if (len < 0 || ofs1 < 0 || ofs1 > (s1.length - len | 0) || ofs2 < 0 || ofs2 > (s2.length - len | 0)) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.blit / Bytes.blit_string",
            Error: new Error()
          };
        }
        return Caml_bytes.caml_blit_string(s1, ofs1, s2, ofs2, len);
      }
      function iter(f, a) {
        for (var i = 0, i_finish = a.length; i < i_finish; ++i) {
          Curry._1(f, a[i]);
        }
      }
      function iteri(f, a) {
        for (var i = 0, i_finish = a.length; i < i_finish; ++i) {
          Curry._2(f, i, a[i]);
        }
      }
      function ensure_ge(x, y) {
        if (x >= y) {
          return x;
        }
        throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "Bytes.concat",
          Error: new Error()
        };
      }
      function sum_lengths(_acc, seplen, _param) {
        while (true) {
          var param = _param;
          var acc = _acc;
          if (!param) {
            return acc;
          }
          var tl = param.tl;
          var hd = param.hd;
          if (!tl) {
            return hd.length + acc | 0;
          }
          _param = tl;
          _acc = ensure_ge((hd.length + seplen | 0) + acc | 0, acc);
          continue;
        }
        ;
      }
      function concat(sep, l) {
        if (!l) {
          return empty;
        }
        var seplen = sep.length;
        var dst = Caml_bytes.caml_create_bytes(sum_lengths(0, seplen, l));
        var _pos = 0;
        var _param = l;
        while (true) {
          var param = _param;
          var pos = _pos;
          if (!param) {
            return dst;
          }
          var tl = param.tl;
          var hd = param.hd;
          if (tl) {
            Caml_bytes.caml_blit_bytes(hd, 0, dst, pos, hd.length);
            Caml_bytes.caml_blit_bytes(sep, 0, dst, pos + hd.length | 0, seplen);
            _param = tl;
            _pos = (pos + hd.length | 0) + seplen | 0;
            continue;
          }
          Caml_bytes.caml_blit_bytes(hd, 0, dst, pos, hd.length);
          return dst;
        }
        ;
      }
      function cat(s1, s2) {
        var l1 = s1.length;
        var l2 = s2.length;
        var r = Caml_bytes.caml_create_bytes(l1 + l2 | 0);
        Caml_bytes.caml_blit_bytes(s1, 0, r, 0, l1);
        Caml_bytes.caml_blit_bytes(s2, 0, r, l1, l2);
        return r;
      }
      function is_space(param) {
        if (param > 13 || param < 9) {
          return param === 32;
        } else {
          return param !== 11;
        }
      }
      function trim(s) {
        var len = s.length;
        var i = 0;
        while (i < len && is_space(s[i])) {
          i = i + 1 | 0;
        }
        ;
        var j = len - 1 | 0;
        while (j >= i && is_space(s[j])) {
          j = j - 1 | 0;
        }
        ;
        if (j >= i) {
          return sub(s, i, (j - i | 0) + 1 | 0);
        } else {
          return empty;
        }
      }
      function escaped(s) {
        var n = 0;
        for (var i = 0, i_finish = s.length; i < i_finish; ++i) {
          var match = s[i];
          n = n + (match >= 32 ? match > 92 || match < 34 ? match >= 127 ? 4 : 1 : match > 91 || match < 35 ? 2 : 1 : match >= 11 ? match !== 13 ? 4 : 2 : match >= 8 ? 2 : 4) | 0;
        }
        if (n === s.length) {
          return copy(s);
        }
        var s$p = Caml_bytes.caml_create_bytes(n);
        n = 0;
        for (var i$1 = 0, i_finish$1 = s.length; i$1 < i_finish$1; ++i$1) {
          var c = s[i$1];
          var exit = 0;
          if (c >= 35) {
            if (c !== 92) {
              if (c >= 127) {
                exit = 1;
              } else {
                s$p[n] = c;
              }
            } else {
              exit = 2;
            }
          } else if (c >= 32) {
            if (c >= 34) {
              exit = 2;
            } else {
              s$p[n] = c;
            }
          } else if (c >= 14) {
            exit = 1;
          } else {
            switch (c) {
              case 8:
                s$p[n] = 92;
                n = n + 1 | 0;
                s$p[n] = 98;
                break;
              case 9:
                s$p[n] = 92;
                n = n + 1 | 0;
                s$p[n] = 116;
                break;
              case 10:
                s$p[n] = 92;
                n = n + 1 | 0;
                s$p[n] = 110;
                break;
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 11:
              case 12:
                exit = 1;
                break;
              case 13:
                s$p[n] = 92;
                n = n + 1 | 0;
                s$p[n] = 114;
                break;
            }
          }
          switch (exit) {
            case 1:
              s$p[n] = 92;
              n = n + 1 | 0;
              s$p[n] = 48 + (c / 100 | 0) | 0;
              n = n + 1 | 0;
              s$p[n] = 48 + (c / 10 | 0) % 10 | 0;
              n = n + 1 | 0;
              s$p[n] = 48 + c % 10 | 0;
              break;
            case 2:
              s$p[n] = 92;
              n = n + 1 | 0;
              s$p[n] = c;
              break;
          }
          n = n + 1 | 0;
        }
        return s$p;
      }
      function map(f, s) {
        var l = s.length;
        if (l === 0) {
          return s;
        }
        var r = Caml_bytes.caml_create_bytes(l);
        for (var i = 0; i < l; ++i) {
          r[i] = Curry._1(f, s[i]);
        }
        return r;
      }
      function mapi(f, s) {
        var l = s.length;
        if (l === 0) {
          return s;
        }
        var r = Caml_bytes.caml_create_bytes(l);
        for (var i = 0; i < l; ++i) {
          r[i] = Curry._2(f, i, s[i]);
        }
        return r;
      }
      function uppercase_ascii(s) {
        return map(Char.uppercase_ascii, s);
      }
      function lowercase_ascii(s) {
        return map(Char.lowercase_ascii, s);
      }
      function apply1(f, s) {
        if (s.length === 0) {
          return s;
        }
        var r = copy(s);
        r[0] = Curry._1(f, s[0]);
        return r;
      }
      function capitalize_ascii(s) {
        return apply1(Char.uppercase_ascii, s);
      }
      function uncapitalize_ascii(s) {
        return apply1(Char.lowercase_ascii, s);
      }
      function index_rec(s, lim, _i, c) {
        while (true) {
          var i = _i;
          if (i >= lim) {
            throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
          }
          if (s[i] === c) {
            return i;
          }
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      function index(s, c) {
        return index_rec(s, s.length, 0, c);
      }
      function index_rec_opt(s, lim, _i, c) {
        while (true) {
          var i = _i;
          if (i >= lim) {
            return;
          }
          if (s[i] === c) {
            return i;
          }
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      function index_opt(s, c) {
        return index_rec_opt(s, s.length, 0, c);
      }
      function index_from(s, i, c) {
        var l = s.length;
        if (i < 0 || i > l) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.index_from / Bytes.index_from",
            Error: new Error()
          };
        }
        return index_rec(s, l, i, c);
      }
      function index_from_opt(s, i, c) {
        var l = s.length;
        if (i < 0 || i > l) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.index_from_opt / Bytes.index_from_opt",
            Error: new Error()
          };
        }
        return index_rec_opt(s, l, i, c);
      }
      function rindex_rec(s, _i, c) {
        while (true) {
          var i = _i;
          if (i < 0) {
            throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
          }
          if (s[i] === c) {
            return i;
          }
          _i = i - 1 | 0;
          continue;
        }
        ;
      }
      function rindex(s, c) {
        return rindex_rec(s, s.length - 1 | 0, c);
      }
      function rindex_from(s, i, c) {
        if (i < -1 || i >= s.length) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.rindex_from / Bytes.rindex_from",
            Error: new Error()
          };
        }
        return rindex_rec(s, i, c);
      }
      function rindex_rec_opt(s, _i, c) {
        while (true) {
          var i = _i;
          if (i < 0) {
            return;
          }
          if (s[i] === c) {
            return i;
          }
          _i = i - 1 | 0;
          continue;
        }
        ;
      }
      function rindex_opt(s, c) {
        return rindex_rec_opt(s, s.length - 1 | 0, c);
      }
      function rindex_from_opt(s, i, c) {
        if (i < -1 || i >= s.length) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.rindex_from_opt / Bytes.rindex_from_opt",
            Error: new Error()
          };
        }
        return rindex_rec_opt(s, i, c);
      }
      function contains_from(s, i, c) {
        var l = s.length;
        if (i < 0 || i > l) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.contains_from / Bytes.contains_from",
            Error: new Error()
          };
        }
        try {
          index_rec(s, l, i, c);
          return true;
        } catch (raw_exn) {
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          if (exn.RE_EXN_ID === "Not_found") {
            return false;
          }
          throw exn;
        }
      }
      function contains(s, c) {
        return contains_from(s, 0, c);
      }
      function rcontains_from(s, i, c) {
        if (i < 0 || i >= s.length) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.rcontains_from / Bytes.rcontains_from",
            Error: new Error()
          };
        }
        try {
          rindex_rec(s, i, c);
          return true;
        } catch (raw_exn) {
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          if (exn.RE_EXN_ID === "Not_found") {
            return false;
          }
          throw exn;
        }
      }
      var compare = Caml_bytes.caml_bytes_compare;
      function uppercase(s) {
        return map(Char.uppercase, s);
      }
      function lowercase(s) {
        return map(Char.lowercase, s);
      }
      function capitalize(s) {
        return apply1(Char.uppercase, s);
      }
      function uncapitalize(s) {
        return apply1(Char.lowercase, s);
      }
      var equal = Caml_bytes.caml_bytes_equal;
      var unsafe_to_string = Caml_bytes.bytes_to_string;
      var unsafe_of_string = Caml_bytes.bytes_of_string;
      exports.make = make;
      exports.init = init;
      exports.empty = empty;
      exports.copy = copy;
      exports.of_string = of_string;
      exports.to_string = to_string;
      exports.sub = sub;
      exports.sub_string = sub_string;
      exports.extend = extend;
      exports.fill = fill;
      exports.blit = blit;
      exports.blit_string = blit_string;
      exports.concat = concat;
      exports.cat = cat;
      exports.iter = iter;
      exports.iteri = iteri;
      exports.map = map;
      exports.mapi = mapi;
      exports.trim = trim;
      exports.escaped = escaped;
      exports.index = index;
      exports.index_opt = index_opt;
      exports.rindex = rindex;
      exports.rindex_opt = rindex_opt;
      exports.index_from = index_from;
      exports.index_from_opt = index_from_opt;
      exports.rindex_from = rindex_from;
      exports.rindex_from_opt = rindex_from_opt;
      exports.contains = contains;
      exports.contains_from = contains_from;
      exports.rcontains_from = rcontains_from;
      exports.uppercase = uppercase;
      exports.lowercase = lowercase;
      exports.capitalize = capitalize;
      exports.uncapitalize = uncapitalize;
      exports.uppercase_ascii = uppercase_ascii;
      exports.lowercase_ascii = lowercase_ascii;
      exports.capitalize_ascii = capitalize_ascii;
      exports.uncapitalize_ascii = uncapitalize_ascii;
      exports.compare = compare;
      exports.equal = equal;
      exports.unsafe_to_string = unsafe_to_string;
      exports.unsafe_of_string = unsafe_of_string;
    }
  });

  // node_modules/@rescript/std/lib/js/caml_string.js
  var require_caml_string = __commonJS({
    "node_modules/@rescript/std/lib/js/caml_string.js"(exports) {
      "use strict";
      function get(s, i) {
        if (i >= s.length || i < 0) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "index out of bounds",
            Error: new Error()
          };
        }
        return s.charCodeAt(i);
      }
      function make(n, ch) {
        return String.fromCharCode(ch).repeat(n);
      }
      exports.get = get;
      exports.make = make;
    }
  });

  // node_modules/@rescript/std/lib/js/string.js
  var require_string = __commonJS({
    "node_modules/@rescript/std/lib/js/string.js"(exports) {
      "use strict";
      var Caml = require_caml();
      var Bytes = require_bytes();
      var Curry = require_curry();
      var Caml_bytes = require_caml_bytes();
      var Caml_string = require_caml_string();
      var Caml_js_exceptions = require_caml_js_exceptions();
      function init(n, f) {
        return Caml_bytes.bytes_to_string(Bytes.init(n, f));
      }
      function sub(s, ofs, len) {
        return Caml_bytes.bytes_to_string(Bytes.sub(Caml_bytes.bytes_of_string(s), ofs, len));
      }
      function ensure_ge(x, y) {
        if (x >= y) {
          return x;
        }
        throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.concat",
          Error: new Error()
        };
      }
      function sum_lengths(_acc, seplen, _param) {
        while (true) {
          var param = _param;
          var acc = _acc;
          if (!param) {
            return acc;
          }
          var tl = param.tl;
          var hd = param.hd;
          if (!tl) {
            return hd.length + acc | 0;
          }
          _param = tl;
          _acc = ensure_ge((hd.length + seplen | 0) + acc | 0, acc);
          continue;
        }
        ;
      }
      function unsafe_blits(dst, _pos, sep, seplen, _param) {
        while (true) {
          var param = _param;
          var pos = _pos;
          if (!param) {
            return dst;
          }
          var tl = param.tl;
          var hd = param.hd;
          if (tl) {
            Caml_bytes.caml_blit_string(hd, 0, dst, pos, hd.length);
            Caml_bytes.caml_blit_string(sep, 0, dst, pos + hd.length | 0, seplen);
            _param = tl;
            _pos = (pos + hd.length | 0) + seplen | 0;
            continue;
          }
          Caml_bytes.caml_blit_string(hd, 0, dst, pos, hd.length);
          return dst;
        }
        ;
      }
      function concat(sep, l) {
        if (!l) {
          return "";
        }
        var seplen = sep.length;
        return Caml_bytes.bytes_to_string(unsafe_blits(Caml_bytes.caml_create_bytes(sum_lengths(0, seplen, l)), 0, sep, seplen, l));
      }
      function iter(f, s) {
        for (var i = 0, i_finish = s.length; i < i_finish; ++i) {
          Curry._1(f, s.charCodeAt(i));
        }
      }
      function iteri(f, s) {
        for (var i = 0, i_finish = s.length; i < i_finish; ++i) {
          Curry._2(f, i, s.charCodeAt(i));
        }
      }
      function map(f, s) {
        return Caml_bytes.bytes_to_string(Bytes.map(f, Caml_bytes.bytes_of_string(s)));
      }
      function mapi(f, s) {
        return Caml_bytes.bytes_to_string(Bytes.mapi(f, Caml_bytes.bytes_of_string(s)));
      }
      function is_space(param) {
        if (param > 13 || param < 9) {
          return param === 32;
        } else {
          return param !== 11;
        }
      }
      function trim(s) {
        if (s === "" || !(is_space(s.charCodeAt(0)) || is_space(s.charCodeAt(s.length - 1 | 0)))) {
          return s;
        } else {
          return Caml_bytes.bytes_to_string(Bytes.trim(Caml_bytes.bytes_of_string(s)));
        }
      }
      function escaped(s) {
        var needs_escape = function(_i) {
          while (true) {
            var i = _i;
            if (i >= s.length) {
              return false;
            }
            var match = s.charCodeAt(i);
            if (match < 32) {
              return true;
            }
            if (match > 92 || match < 34) {
              if (match >= 127) {
                return true;
              }
              _i = i + 1 | 0;
              continue;
            }
            if (match > 91 || match < 35) {
              return true;
            }
            _i = i + 1 | 0;
            continue;
          }
          ;
        };
        if (needs_escape(0)) {
          return Caml_bytes.bytes_to_string(Bytes.escaped(Caml_bytes.bytes_of_string(s)));
        } else {
          return s;
        }
      }
      function index_rec(s, lim, _i, c) {
        while (true) {
          var i = _i;
          if (i >= lim) {
            throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
          }
          if (s.charCodeAt(i) === c) {
            return i;
          }
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      function index(s, c) {
        return index_rec(s, s.length, 0, c);
      }
      function index_rec_opt(s, lim, _i, c) {
        while (true) {
          var i = _i;
          if (i >= lim) {
            return;
          }
          if (s.charCodeAt(i) === c) {
            return i;
          }
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      function index_opt(s, c) {
        return index_rec_opt(s, s.length, 0, c);
      }
      function index_from(s, i, c) {
        var l = s.length;
        if (i < 0 || i > l) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.index_from / Bytes.index_from",
            Error: new Error()
          };
        }
        return index_rec(s, l, i, c);
      }
      function index_from_opt(s, i, c) {
        var l = s.length;
        if (i < 0 || i > l) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.index_from_opt / Bytes.index_from_opt",
            Error: new Error()
          };
        }
        return index_rec_opt(s, l, i, c);
      }
      function rindex_rec(s, _i, c) {
        while (true) {
          var i = _i;
          if (i < 0) {
            throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
          }
          if (s.charCodeAt(i) === c) {
            return i;
          }
          _i = i - 1 | 0;
          continue;
        }
        ;
      }
      function rindex(s, c) {
        return rindex_rec(s, s.length - 1 | 0, c);
      }
      function rindex_from(s, i, c) {
        if (i < -1 || i >= s.length) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.rindex_from / Bytes.rindex_from",
            Error: new Error()
          };
        }
        return rindex_rec(s, i, c);
      }
      function rindex_rec_opt(s, _i, c) {
        while (true) {
          var i = _i;
          if (i < 0) {
            return;
          }
          if (s.charCodeAt(i) === c) {
            return i;
          }
          _i = i - 1 | 0;
          continue;
        }
        ;
      }
      function rindex_opt(s, c) {
        return rindex_rec_opt(s, s.length - 1 | 0, c);
      }
      function rindex_from_opt(s, i, c) {
        if (i < -1 || i >= s.length) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.rindex_from_opt / Bytes.rindex_from_opt",
            Error: new Error()
          };
        }
        return rindex_rec_opt(s, i, c);
      }
      function contains_from(s, i, c) {
        var l = s.length;
        if (i < 0 || i > l) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.contains_from / Bytes.contains_from",
            Error: new Error()
          };
        }
        try {
          index_rec(s, l, i, c);
          return true;
        } catch (raw_exn) {
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          if (exn.RE_EXN_ID === "Not_found") {
            return false;
          }
          throw exn;
        }
      }
      function contains(s, c) {
        return contains_from(s, 0, c);
      }
      function rcontains_from(s, i, c) {
        if (i < 0 || i >= s.length) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.rcontains_from / Bytes.rcontains_from",
            Error: new Error()
          };
        }
        try {
          rindex_rec(s, i, c);
          return true;
        } catch (raw_exn) {
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          if (exn.RE_EXN_ID === "Not_found") {
            return false;
          }
          throw exn;
        }
      }
      function uppercase_ascii(s) {
        return Caml_bytes.bytes_to_string(Bytes.uppercase_ascii(Caml_bytes.bytes_of_string(s)));
      }
      function lowercase_ascii(s) {
        return Caml_bytes.bytes_to_string(Bytes.lowercase_ascii(Caml_bytes.bytes_of_string(s)));
      }
      function capitalize_ascii(s) {
        return Caml_bytes.bytes_to_string(Bytes.capitalize_ascii(Caml_bytes.bytes_of_string(s)));
      }
      function uncapitalize_ascii(s) {
        return Caml_bytes.bytes_to_string(Bytes.uncapitalize_ascii(Caml_bytes.bytes_of_string(s)));
      }
      var compare = Caml.caml_string_compare;
      function split_on_char(sep, s) {
        var r = 0;
        var j = s.length;
        for (var i = s.length - 1 | 0; i >= 0; --i) {
          if (s.charCodeAt(i) === sep) {
            r = {
              hd: sub(s, i + 1 | 0, (j - i | 0) - 1 | 0),
              tl: r
            };
            j = i;
          }
        }
        return {
          hd: sub(s, 0, j),
          tl: r
        };
      }
      function uppercase(s) {
        return Caml_bytes.bytes_to_string(Bytes.uppercase(Caml_bytes.bytes_of_string(s)));
      }
      function lowercase(s) {
        return Caml_bytes.bytes_to_string(Bytes.lowercase(Caml_bytes.bytes_of_string(s)));
      }
      function capitalize(s) {
        return Caml_bytes.bytes_to_string(Bytes.capitalize(Caml_bytes.bytes_of_string(s)));
      }
      function uncapitalize(s) {
        return Caml_bytes.bytes_to_string(Bytes.uncapitalize(Caml_bytes.bytes_of_string(s)));
      }
      var make = Caml_string.make;
      var blit = Bytes.blit_string;
      function equal(prim0, prim1) {
        return prim0 === prim1;
      }
      exports.make = make;
      exports.init = init;
      exports.sub = sub;
      exports.blit = blit;
      exports.concat = concat;
      exports.iter = iter;
      exports.iteri = iteri;
      exports.map = map;
      exports.mapi = mapi;
      exports.trim = trim;
      exports.escaped = escaped;
      exports.index = index;
      exports.index_opt = index_opt;
      exports.rindex = rindex;
      exports.rindex_opt = rindex_opt;
      exports.index_from = index_from;
      exports.index_from_opt = index_from_opt;
      exports.rindex_from = rindex_from;
      exports.rindex_from_opt = rindex_from_opt;
      exports.contains = contains;
      exports.contains_from = contains_from;
      exports.rcontains_from = rcontains_from;
      exports.uppercase = uppercase;
      exports.lowercase = lowercase;
      exports.capitalize = capitalize;
      exports.uncapitalize = uncapitalize;
      exports.uppercase_ascii = uppercase_ascii;
      exports.lowercase_ascii = lowercase_ascii;
      exports.capitalize_ascii = capitalize_ascii;
      exports.uncapitalize_ascii = uncapitalize_ascii;
      exports.compare = compare;
      exports.equal = equal;
      exports.split_on_char = split_on_char;
    }
  });

  // node_modules/@rescript/std/lib/js/caml_md5.js
  var require_caml_md5 = __commonJS({
    "node_modules/@rescript/std/lib/js/caml_md5.js"(exports) {
      "use strict";
      function cmn(q, a, b, x, s, t) {
        var a$1 = ((a + q | 0) + x | 0) + t | 0;
        return (a$1 << s | a$1 >>> (32 - s | 0) | 0) + b | 0;
      }
      function f(a, b, c, d, x, s, t) {
        return cmn(b & c | (b ^ -1) & d, a, b, x, s, t);
      }
      function g(a, b, c, d, x, s, t) {
        return cmn(b & d | c & (d ^ -1), a, b, x, s, t);
      }
      function h(a, b, c, d, x, s, t) {
        return cmn(b ^ c ^ d, a, b, x, s, t);
      }
      function i(a, b, c, d, x, s, t) {
        return cmn(c ^ (b | d ^ -1), a, b, x, s, t);
      }
      function cycle(x, k) {
        var a = x[0];
        var b = x[1];
        var c = x[2];
        var d = x[3];
        a = f(a, b, c, d, k[0], 7, -680876936);
        d = f(d, a, b, c, k[1], 12, -389564586);
        c = f(c, d, a, b, k[2], 17, 606105819);
        b = f(b, c, d, a, k[3], 22, -1044525330);
        a = f(a, b, c, d, k[4], 7, -176418897);
        d = f(d, a, b, c, k[5], 12, 1200080426);
        c = f(c, d, a, b, k[6], 17, -1473231341);
        b = f(b, c, d, a, k[7], 22, -45705983);
        a = f(a, b, c, d, k[8], 7, 1770035416);
        d = f(d, a, b, c, k[9], 12, -1958414417);
        c = f(c, d, a, b, k[10], 17, -42063);
        b = f(b, c, d, a, k[11], 22, -1990404162);
        a = f(a, b, c, d, k[12], 7, 1804603682);
        d = f(d, a, b, c, k[13], 12, -40341101);
        c = f(c, d, a, b, k[14], 17, -1502002290);
        b = f(b, c, d, a, k[15], 22, 1236535329);
        a = g(a, b, c, d, k[1], 5, -165796510);
        d = g(d, a, b, c, k[6], 9, -1069501632);
        c = g(c, d, a, b, k[11], 14, 643717713);
        b = g(b, c, d, a, k[0], 20, -373897302);
        a = g(a, b, c, d, k[5], 5, -701558691);
        d = g(d, a, b, c, k[10], 9, 38016083);
        c = g(c, d, a, b, k[15], 14, -660478335);
        b = g(b, c, d, a, k[4], 20, -405537848);
        a = g(a, b, c, d, k[9], 5, 568446438);
        d = g(d, a, b, c, k[14], 9, -1019803690);
        c = g(c, d, a, b, k[3], 14, -187363961);
        b = g(b, c, d, a, k[8], 20, 1163531501);
        a = g(a, b, c, d, k[13], 5, -1444681467);
        d = g(d, a, b, c, k[2], 9, -51403784);
        c = g(c, d, a, b, k[7], 14, 1735328473);
        b = g(b, c, d, a, k[12], 20, -1926607734);
        a = h(a, b, c, d, k[5], 4, -378558);
        d = h(d, a, b, c, k[8], 11, -2022574463);
        c = h(c, d, a, b, k[11], 16, 1839030562);
        b = h(b, c, d, a, k[14], 23, -35309556);
        a = h(a, b, c, d, k[1], 4, -1530992060);
        d = h(d, a, b, c, k[4], 11, 1272893353);
        c = h(c, d, a, b, k[7], 16, -155497632);
        b = h(b, c, d, a, k[10], 23, -1094730640);
        a = h(a, b, c, d, k[13], 4, 681279174);
        d = h(d, a, b, c, k[0], 11, -358537222);
        c = h(c, d, a, b, k[3], 16, -722521979);
        b = h(b, c, d, a, k[6], 23, 76029189);
        a = h(a, b, c, d, k[9], 4, -640364487);
        d = h(d, a, b, c, k[12], 11, -421815835);
        c = h(c, d, a, b, k[15], 16, 530742520);
        b = h(b, c, d, a, k[2], 23, -995338651);
        a = i(a, b, c, d, k[0], 6, -198630844);
        d = i(d, a, b, c, k[7], 10, 1126891415);
        c = i(c, d, a, b, k[14], 15, -1416354905);
        b = i(b, c, d, a, k[5], 21, -57434055);
        a = i(a, b, c, d, k[12], 6, 1700485571);
        d = i(d, a, b, c, k[3], 10, -1894986606);
        c = i(c, d, a, b, k[10], 15, -1051523);
        b = i(b, c, d, a, k[1], 21, -2054922799);
        a = i(a, b, c, d, k[8], 6, 1873313359);
        d = i(d, a, b, c, k[15], 10, -30611744);
        c = i(c, d, a, b, k[6], 15, -1560198380);
        b = i(b, c, d, a, k[13], 21, 1309151649);
        a = i(a, b, c, d, k[4], 6, -145523070);
        d = i(d, a, b, c, k[11], 10, -1120210379);
        c = i(c, d, a, b, k[2], 15, 718787259);
        b = i(b, c, d, a, k[9], 21, -343485551);
        x[0] = a + x[0] | 0;
        x[1] = b + x[1] | 0;
        x[2] = c + x[2] | 0;
        x[3] = d + x[3] | 0;
      }
      var state = [
        1732584193,
        -271733879,
        -1732584194,
        271733878
      ];
      var md5blk = [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ];
      function caml_md5_string(s, start, len) {
        var s$1 = s.slice(start, len);
        var n = s$1.length;
        state[0] = 1732584193;
        state[1] = -271733879;
        state[2] = -1732584194;
        state[3] = 271733878;
        for (var i2 = 0; i2 <= 15; ++i2) {
          md5blk[i2] = 0;
        }
        var i_end = n / 64 | 0;
        for (var i$1 = 1; i$1 <= i_end; ++i$1) {
          for (var j = 0; j <= 15; ++j) {
            var k = ((i$1 << 6) - 64 | 0) + (j << 2) | 0;
            md5blk[j] = ((s$1.charCodeAt(k) + (s$1.charCodeAt(k + 1 | 0) << 8) | 0) + (s$1.charCodeAt(k + 2 | 0) << 16) | 0) + (s$1.charCodeAt(k + 3 | 0) << 24) | 0;
          }
          cycle(state, md5blk);
        }
        var s_tail = s$1.slice(i_end << 6);
        for (var kk = 0; kk <= 15; ++kk) {
          md5blk[kk] = 0;
        }
        var i_end$1 = s_tail.length - 1 | 0;
        for (var i$2 = 0; i$2 <= i_end$1; ++i$2) {
          md5blk[i$2 / 4 | 0] = md5blk[i$2 / 4 | 0] | s_tail.charCodeAt(i$2) << (i$2 % 4 << 3);
        }
        var i$3 = i_end$1 + 1 | 0;
        md5blk[i$3 / 4 | 0] = md5blk[i$3 / 4 | 0] | 128 << (i$3 % 4 << 3);
        if (i$3 > 55) {
          cycle(state, md5blk);
          for (var i$4 = 0; i$4 <= 15; ++i$4) {
            md5blk[i$4] = 0;
          }
        }
        md5blk[14] = n << 3;
        cycle(state, md5blk);
        return String.fromCharCode(state[0] & 255, state[0] >> 8 & 255, state[0] >> 16 & 255, state[0] >> 24 & 255, state[1] & 255, state[1] >> 8 & 255, state[1] >> 16 & 255, state[1] >> 24 & 255, state[2] & 255, state[2] >> 8 & 255, state[2] >> 16 & 255, state[2] >> 24 & 255, state[3] & 255, state[3] >> 8 & 255, state[3] >> 16 & 255, state[3] >> 24 & 255);
      }
      exports.caml_md5_string = caml_md5_string;
    }
  });

  // node_modules/@rescript/std/lib/js/caml_io.js
  var require_caml_io = __commonJS({
    "node_modules/@rescript/std/lib/js/caml_io.js"(exports) {
      "use strict";
      var stdout = {
        buffer: "",
        output: function(param, s) {
          var v = s.length - 1 | 0;
          if (typeof process !== "undefined" && process.stdout && process.stdout.write) {
            return process.stdout.write(s);
          } else {
            if (s[v] === "\n") {
              console.log(s.slice(0, v));
            } else {
              console.log(s);
            }
            return;
          }
        }
      };
      var stderr = {
        buffer: "",
        output: function(param, s) {
          var v = s.length - 1 | 0;
          if (s[v] === "\n") {
            console.log(s.slice(0, v));
          } else {
            console.log(s);
          }
        }
      };
      function caml_ml_flush(oc) {
        if (oc.buffer !== "") {
          oc.output(oc, oc.buffer);
          oc.buffer = "";
          return;
        }
      }
      function caml_ml_output(oc, str, offset, len) {
        var str$1 = offset === 0 && len === str.length ? str : str.slice(offset, len);
        if (typeof process !== "undefined" && process.stdout && process.stdout.write && oc === stdout) {
          return process.stdout.write(str$1);
        }
        var id = str$1.lastIndexOf("\n");
        if (id < 0) {
          oc.buffer = oc.buffer + str$1;
        } else {
          oc.buffer = oc.buffer + str$1.slice(0, id + 1 | 0);
          caml_ml_flush(oc);
          oc.buffer = oc.buffer + str$1.slice(id + 1 | 0);
        }
      }
      function caml_ml_output_char(oc, $$char) {
        return caml_ml_output(oc, String.fromCharCode($$char), 0, 1);
      }
      function caml_ml_out_channels_list(param) {
        return {
          hd: stdout,
          tl: {
            hd: stderr,
            tl: 0
          }
        };
      }
      var stdin;
      exports.stdin = stdin;
      exports.stdout = stdout;
      exports.stderr = stderr;
      exports.caml_ml_flush = caml_ml_flush;
      exports.caml_ml_output = caml_ml_output;
      exports.caml_ml_output_char = caml_ml_output_char;
      exports.caml_ml_out_channels_list = caml_ml_out_channels_list;
    }
  });

  // node_modules/@rescript/std/lib/js/caml_sys.js
  var require_caml_sys = __commonJS({
    "node_modules/@rescript/std/lib/js/caml_sys.js"(exports) {
      "use strict";
      function caml_sys_getenv(s) {
        if (typeof process === "undefined" || process.env === void 0) {
          throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
        }
        var x = process.env[s];
        if (x !== void 0) {
          return x;
        }
        throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
      }
      var os_type = function(_) {
        if (typeof process !== "undefined" && process.platform === "win32") {
          return "Win32";
        } else {
          return "Unix";
        }
      };
      function caml_sys_time(param) {
        if (typeof process === "undefined" || process.uptime === void 0) {
          return -1;
        } else {
          return process.uptime();
        }
      }
      function caml_sys_system_command(_cmd) {
        return 127;
      }
      var caml_sys_getcwd = function(param) {
        if (typeof process === "undefined" || process.cwd === void 0) {
          return "/";
        }
        return process.cwd();
      };
      function caml_sys_get_argv(param) {
        if (typeof process === "undefined") {
          return [
            "",
            [""]
          ];
        }
        var argv = process.argv;
        if (argv == null) {
          return [
            "",
            [""]
          ];
        } else {
          return [
            argv[0],
            argv
          ];
        }
      }
      function caml_sys_exit(exit_code) {
        if (typeof process !== "undefined") {
          return process.exit(exit_code);
        }
      }
      function caml_sys_is_directory(_s) {
        throw {
          RE_EXN_ID: "Failure",
          _1: "caml_sys_is_directory not implemented",
          Error: new Error()
        };
      }
      function caml_sys_file_exists(_s) {
        throw {
          RE_EXN_ID: "Failure",
          _1: "caml_sys_file_exists not implemented",
          Error: new Error()
        };
      }
      exports.caml_sys_getenv = caml_sys_getenv;
      exports.caml_sys_time = caml_sys_time;
      exports.os_type = os_type;
      exports.caml_sys_system_command = caml_sys_system_command;
      exports.caml_sys_getcwd = caml_sys_getcwd;
      exports.caml_sys_get_argv = caml_sys_get_argv;
      exports.caml_sys_exit = caml_sys_exit;
      exports.caml_sys_is_directory = caml_sys_is_directory;
      exports.caml_sys_file_exists = caml_sys_file_exists;
    }
  });

  // node_modules/@rescript/std/lib/js/caml_external_polyfill.js
  var require_caml_external_polyfill = __commonJS({
    "node_modules/@rescript/std/lib/js/caml_external_polyfill.js"(exports) {
      "use strict";
      var getGlobalThis = function() {
        if (typeof globalThis !== "undefined")
          return globalThis;
        if (typeof self !== "undefined")
          return self;
        if (typeof window !== "undefined")
          return window;
        if (typeof global !== "undefined")
          return global;
        if (typeof this !== "undefined")
          return this;
        throw new Error("Unable to locate global `this`");
      };
      var resolve = function(s) {
        var myGlobal = getGlobalThis();
        if (myGlobal[s] === void 0) {
          throw new Error(s + " not polyfilled by ReScript yet\n");
        }
        return myGlobal[s];
      };
      var register2 = function(s, fn) {
        var myGlobal = getGlobalThis();
        myGlobal[s] = fn;
        return 0;
      };
      exports.getGlobalThis = getGlobalThis;
      exports.resolve = resolve;
      exports.register = register2;
    }
  });

  // node_modules/@rescript/std/lib/js/pervasives.js
  var require_pervasives = __commonJS({
    "node_modules/@rescript/std/lib/js/pervasives.js"(exports) {
      "use strict";
      var Curry = require_curry();
      var Caml_io = require_caml_io();
      var Caml_sys = require_caml_sys();
      var Caml_bytes = require_caml_bytes();
      var Caml_format = require_caml_format();
      var Caml_string = require_caml_string();
      var Caml_exceptions = require_caml_exceptions();
      var Caml_js_exceptions = require_caml_js_exceptions();
      var Caml_external_polyfill = require_caml_external_polyfill();
      function failwith(s) {
        throw {
          RE_EXN_ID: "Failure",
          _1: s,
          Error: new Error()
        };
      }
      function invalid_arg(s) {
        throw {
          RE_EXN_ID: "Invalid_argument",
          _1: s,
          Error: new Error()
        };
      }
      var Exit = /* @__PURE__ */ Caml_exceptions.create("Pervasives.Exit");
      function abs(x) {
        if (x >= 0) {
          return x;
        } else {
          return -x | 0;
        }
      }
      function lnot(x) {
        return x ^ -1;
      }
      var min_int = -2147483648;
      function classify_float(x) {
        if (isFinite(x)) {
          if (Math.abs(x) >= 22250738585072014e-324) {
            return 0;
          } else if (x !== 0) {
            return 1;
          } else {
            return 2;
          }
        } else if (isNaN(x)) {
          return 4;
        } else {
          return 3;
        }
      }
      function char_of_int(n) {
        if (n < 0 || n > 255) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "char_of_int",
            Error: new Error()
          };
        }
        return n;
      }
      function string_of_bool(b) {
        if (b) {
          return "true";
        } else {
          return "false";
        }
      }
      function bool_of_string(param) {
        switch (param) {
          case "false":
            return false;
          case "true":
            return true;
          default:
            throw {
              RE_EXN_ID: "Invalid_argument",
              _1: "bool_of_string",
              Error: new Error()
            };
        }
      }
      function bool_of_string_opt(param) {
        switch (param) {
          case "false":
            return false;
          case "true":
            return true;
          default:
            return;
        }
      }
      function int_of_string_opt(s) {
        try {
          return Caml_format.caml_int_of_string(s);
        } catch (raw_exn) {
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          if (exn.RE_EXN_ID === "Failure") {
            return;
          }
          throw exn;
        }
      }
      function valid_float_lexem(s) {
        var l = s.length;
        var _i = 0;
        while (true) {
          var i = _i;
          if (i >= l) {
            return s + ".";
          }
          var match = Caml_string.get(s, i);
          if (match >= 48) {
            if (match >= 58) {
              return s;
            }
            _i = i + 1 | 0;
            continue;
          }
          if (match !== 45) {
            return s;
          }
          _i = i + 1 | 0;
          continue;
        }
        ;
      }
      function string_of_float(f) {
        return valid_float_lexem(Caml_format.caml_format_float("%.12g", f));
      }
      function float_of_string_opt(s) {
        try {
          return Caml_format.caml_float_of_string(s);
        } catch (raw_exn) {
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          if (exn.RE_EXN_ID === "Failure") {
            return;
          }
          throw exn;
        }
      }
      function $at(l1, l2) {
        if (l1) {
          return {
            hd: l1.hd,
            tl: $at(l1.tl, l2)
          };
        } else {
          return l2;
        }
      }
      var stdin = Caml_io.stdin;
      var stdout = Caml_io.stdout;
      var stderr = Caml_io.stderr;
      function open_out_gen(mode, perm, name) {
        var c = Caml_external_polyfill.resolve("caml_ml_open_descriptor_out")(Caml_external_polyfill.resolve("caml_sys_open")(name, mode, perm));
        Caml_external_polyfill.resolve("caml_ml_set_channel_name")(c, name);
        return c;
      }
      function open_out(name) {
        return open_out_gen({
          hd: 1,
          tl: {
            hd: 3,
            tl: {
              hd: 4,
              tl: {
                hd: 7,
                tl: 0
              }
            }
          }
        }, 438, name);
      }
      function open_out_bin(name) {
        return open_out_gen({
          hd: 1,
          tl: {
            hd: 3,
            tl: {
              hd: 4,
              tl: {
                hd: 6,
                tl: 0
              }
            }
          }
        }, 438, name);
      }
      function flush_all(param) {
        var _param = Caml_io.caml_ml_out_channels_list(void 0);
        while (true) {
          var param$1 = _param;
          if (!param$1) {
            return;
          }
          try {
            Caml_io.caml_ml_flush(param$1.hd);
          } catch (raw_exn) {
            var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
            if (exn.RE_EXN_ID !== "Sys_error") {
              throw exn;
            }
          }
          _param = param$1.tl;
          continue;
        }
        ;
      }
      function output_bytes(oc, s) {
        return Caml_external_polyfill.resolve("caml_ml_output_bytes")(oc, s, 0, s.length);
      }
      function output_string(oc, s) {
        return Caml_io.caml_ml_output(oc, s, 0, s.length);
      }
      function output(oc, s, ofs, len) {
        if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "output",
            Error: new Error()
          };
        }
        return Caml_external_polyfill.resolve("caml_ml_output_bytes")(oc, s, ofs, len);
      }
      function output_substring(oc, s, ofs, len) {
        if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "output_substring",
            Error: new Error()
          };
        }
        return Caml_io.caml_ml_output(oc, s, ofs, len);
      }
      function output_value(chan, v) {
        return Caml_external_polyfill.resolve("caml_output_value")(chan, v, 0);
      }
      function close_out(oc) {
        Caml_io.caml_ml_flush(oc);
        return Caml_external_polyfill.resolve("caml_ml_close_channel")(oc);
      }
      function close_out_noerr(oc) {
        try {
          Caml_io.caml_ml_flush(oc);
        } catch (exn) {
        }
        try {
          return Caml_external_polyfill.resolve("caml_ml_close_channel")(oc);
        } catch (exn$1) {
          return;
        }
      }
      function open_in_gen(mode, perm, name) {
        var c = Caml_external_polyfill.resolve("caml_ml_open_descriptor_in")(Caml_external_polyfill.resolve("caml_sys_open")(name, mode, perm));
        Caml_external_polyfill.resolve("caml_ml_set_channel_name")(c, name);
        return c;
      }
      function open_in(name) {
        return open_in_gen({
          hd: 0,
          tl: {
            hd: 7,
            tl: 0
          }
        }, 0, name);
      }
      function open_in_bin(name) {
        return open_in_gen({
          hd: 0,
          tl: {
            hd: 6,
            tl: 0
          }
        }, 0, name);
      }
      function input(ic, s, ofs, len) {
        if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "input",
            Error: new Error()
          };
        }
        return Caml_external_polyfill.resolve("caml_ml_input")(ic, s, ofs, len);
      }
      function unsafe_really_input(ic, s, _ofs, _len) {
        while (true) {
          var len = _len;
          var ofs = _ofs;
          if (len <= 0) {
            return;
          }
          var r = Caml_external_polyfill.resolve("caml_ml_input")(ic, s, ofs, len);
          if (r === 0) {
            throw {
              RE_EXN_ID: "End_of_file",
              Error: new Error()
            };
          }
          _len = len - r | 0;
          _ofs = ofs + r | 0;
          continue;
        }
        ;
      }
      function really_input(ic, s, ofs, len) {
        if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "really_input",
            Error: new Error()
          };
        }
        return unsafe_really_input(ic, s, ofs, len);
      }
      function really_input_string(ic, len) {
        var s = Caml_bytes.caml_create_bytes(len);
        really_input(ic, s, 0, len);
        return Caml_bytes.bytes_to_string(s);
      }
      function input_line(chan) {
        var build_result = function(buf, _pos, _param) {
          while (true) {
            var param = _param;
            var pos = _pos;
            if (!param) {
              return buf;
            }
            var hd = param.hd;
            var len = hd.length;
            Caml_bytes.caml_blit_bytes(hd, 0, buf, pos - len | 0, len);
            _param = param.tl;
            _pos = pos - len | 0;
            continue;
          }
          ;
        };
        var scan = function(_accu, _len) {
          while (true) {
            var len = _len;
            var accu = _accu;
            var n = Caml_external_polyfill.resolve("caml_ml_input_scan_line")(chan);
            if (n === 0) {
              if (accu) {
                return build_result(Caml_bytes.caml_create_bytes(len), len, accu);
              }
              throw {
                RE_EXN_ID: "End_of_file",
                Error: new Error()
              };
            }
            if (n > 0) {
              var res = Caml_bytes.caml_create_bytes(n - 1 | 0);
              Caml_external_polyfill.resolve("caml_ml_input")(chan, res, 0, n - 1 | 0);
              Caml_external_polyfill.resolve("caml_ml_input_char")(chan);
              if (!accu) {
                return res;
              }
              var len$1 = (len + n | 0) - 1 | 0;
              return build_result(Caml_bytes.caml_create_bytes(len$1), len$1, {
                hd: res,
                tl: accu
              });
            }
            var beg = Caml_bytes.caml_create_bytes(-n | 0);
            Caml_external_polyfill.resolve("caml_ml_input")(chan, beg, 0, -n | 0);
            _len = len - n | 0;
            _accu = {
              hd: beg,
              tl: accu
            };
            continue;
          }
          ;
        };
        return Caml_bytes.bytes_to_string(scan(0, 0));
      }
      function close_in_noerr(ic) {
        try {
          return Caml_external_polyfill.resolve("caml_ml_close_channel")(ic);
        } catch (exn) {
          return;
        }
      }
      function print_char(c) {
        return Caml_io.caml_ml_output_char(stdout, c);
      }
      function print_string(s) {
        return output_string(stdout, s);
      }
      function print_bytes(s) {
        return output_bytes(stdout, s);
      }
      function print_int(i) {
        return output_string(stdout, String(i));
      }
      function print_float(f) {
        return output_string(stdout, valid_float_lexem(Caml_format.caml_format_float("%.12g", f)));
      }
      function print_newline(param) {
        Caml_io.caml_ml_output_char(stdout, 10);
        return Caml_io.caml_ml_flush(stdout);
      }
      function prerr_char(c) {
        return Caml_io.caml_ml_output_char(stderr, c);
      }
      function prerr_string(s) {
        return output_string(stderr, s);
      }
      function prerr_bytes(s) {
        return output_bytes(stderr, s);
      }
      function prerr_int(i) {
        return output_string(stderr, String(i));
      }
      function prerr_float(f) {
        return output_string(stderr, valid_float_lexem(Caml_format.caml_format_float("%.12g", f)));
      }
      function prerr_newline(param) {
        Caml_io.caml_ml_output_char(stderr, 10);
        return Caml_io.caml_ml_flush(stderr);
      }
      function read_line(param) {
        Caml_io.caml_ml_flush(stdout);
        return input_line(stdin);
      }
      function read_int(param) {
        return Caml_format.caml_int_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));
      }
      function read_int_opt(param) {
        return int_of_string_opt((Caml_io.caml_ml_flush(stdout), input_line(stdin)));
      }
      function read_float(param) {
        return Caml_format.caml_float_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));
      }
      function read_float_opt(param) {
        return float_of_string_opt((Caml_io.caml_ml_flush(stdout), input_line(stdin)));
      }
      function string_of_format(param) {
        return param._1;
      }
      var exit_function = {
        contents: flush_all
      };
      function at_exit(f) {
        var g = exit_function.contents;
        exit_function.contents = function(param) {
          Curry._1(f, void 0);
          return Curry._1(g, void 0);
        };
      }
      function do_at_exit(param) {
        return Curry._1(exit_function.contents, void 0);
      }
      function exit(retcode) {
        do_at_exit(void 0);
        return Caml_sys.caml_sys_exit(retcode);
      }
      var max_int = 2147483647;
      var infinity = Infinity;
      var neg_infinity = -Infinity;
      var max_float = 17976931348623157e292;
      var min_float = 22250738585072014e-324;
      var epsilon_float = 2220446049250313e-31;
      var flush = Caml_io.caml_ml_flush;
      var output_char = Caml_io.caml_ml_output_char;
      var output_byte = Caml_io.caml_ml_output_char;
      function output_binary_int(prim0, prim1) {
        return Caml_external_polyfill.resolve("caml_ml_output_int")(prim0, prim1);
      }
      function seek_out(prim0, prim1) {
        return Caml_external_polyfill.resolve("caml_ml_seek_out")(prim0, prim1);
      }
      function pos_out(prim) {
        return Caml_external_polyfill.resolve("caml_ml_pos_out")(prim);
      }
      function out_channel_length(prim) {
        return Caml_external_polyfill.resolve("caml_ml_channel_size")(prim);
      }
      function set_binary_mode_out(prim0, prim1) {
        return Caml_external_polyfill.resolve("caml_ml_set_binary_mode")(prim0, prim1);
      }
      function input_char(prim) {
        return Caml_external_polyfill.resolve("caml_ml_input_char")(prim);
      }
      function input_byte(prim) {
        return Caml_external_polyfill.resolve("caml_ml_input_char")(prim);
      }
      function input_binary_int(prim) {
        return Caml_external_polyfill.resolve("caml_ml_input_int")(prim);
      }
      function input_value(prim) {
        return Caml_external_polyfill.resolve("caml_input_value")(prim);
      }
      function seek_in(prim0, prim1) {
        return Caml_external_polyfill.resolve("caml_ml_seek_in")(prim0, prim1);
      }
      function pos_in(prim) {
        return Caml_external_polyfill.resolve("caml_ml_pos_in")(prim);
      }
      function in_channel_length(prim) {
        return Caml_external_polyfill.resolve("caml_ml_channel_size")(prim);
      }
      function close_in(prim) {
        return Caml_external_polyfill.resolve("caml_ml_close_channel")(prim);
      }
      function set_binary_mode_in(prim0, prim1) {
        return Caml_external_polyfill.resolve("caml_ml_set_binary_mode")(prim0, prim1);
      }
      function LargeFile_seek_out(prim0, prim1) {
        return Caml_external_polyfill.resolve("caml_ml_seek_out_64")(prim0, prim1);
      }
      function LargeFile_pos_out(prim) {
        return Caml_external_polyfill.resolve("caml_ml_pos_out_64")(prim);
      }
      function LargeFile_out_channel_length(prim) {
        return Caml_external_polyfill.resolve("caml_ml_channel_size_64")(prim);
      }
      function LargeFile_seek_in(prim0, prim1) {
        return Caml_external_polyfill.resolve("caml_ml_seek_in_64")(prim0, prim1);
      }
      function LargeFile_pos_in(prim) {
        return Caml_external_polyfill.resolve("caml_ml_pos_in_64")(prim);
      }
      function LargeFile_in_channel_length(prim) {
        return Caml_external_polyfill.resolve("caml_ml_channel_size_64")(prim);
      }
      var LargeFile = {
        seek_out: LargeFile_seek_out,
        pos_out: LargeFile_pos_out,
        out_channel_length: LargeFile_out_channel_length,
        seek_in: LargeFile_seek_in,
        pos_in: LargeFile_pos_in,
        in_channel_length: LargeFile_in_channel_length
      };
      exports.invalid_arg = invalid_arg;
      exports.failwith = failwith;
      exports.Exit = Exit;
      exports.abs = abs;
      exports.max_int = max_int;
      exports.min_int = min_int;
      exports.lnot = lnot;
      exports.infinity = infinity;
      exports.neg_infinity = neg_infinity;
      exports.max_float = max_float;
      exports.min_float = min_float;
      exports.epsilon_float = epsilon_float;
      exports.classify_float = classify_float;
      exports.char_of_int = char_of_int;
      exports.string_of_bool = string_of_bool;
      exports.bool_of_string = bool_of_string;
      exports.bool_of_string_opt = bool_of_string_opt;
      exports.int_of_string_opt = int_of_string_opt;
      exports.string_of_float = string_of_float;
      exports.float_of_string_opt = float_of_string_opt;
      exports.$at = $at;
      exports.stdin = stdin;
      exports.stdout = stdout;
      exports.stderr = stderr;
      exports.print_char = print_char;
      exports.print_string = print_string;
      exports.print_bytes = print_bytes;
      exports.print_int = print_int;
      exports.print_float = print_float;
      exports.print_newline = print_newline;
      exports.prerr_char = prerr_char;
      exports.prerr_string = prerr_string;
      exports.prerr_bytes = prerr_bytes;
      exports.prerr_int = prerr_int;
      exports.prerr_float = prerr_float;
      exports.prerr_newline = prerr_newline;
      exports.read_line = read_line;
      exports.read_int = read_int;
      exports.read_int_opt = read_int_opt;
      exports.read_float = read_float;
      exports.read_float_opt = read_float_opt;
      exports.open_out = open_out;
      exports.open_out_bin = open_out_bin;
      exports.open_out_gen = open_out_gen;
      exports.flush = flush;
      exports.flush_all = flush_all;
      exports.output_char = output_char;
      exports.output_string = output_string;
      exports.output_bytes = output_bytes;
      exports.output = output;
      exports.output_substring = output_substring;
      exports.output_byte = output_byte;
      exports.output_binary_int = output_binary_int;
      exports.output_value = output_value;
      exports.seek_out = seek_out;
      exports.pos_out = pos_out;
      exports.out_channel_length = out_channel_length;
      exports.close_out = close_out;
      exports.close_out_noerr = close_out_noerr;
      exports.set_binary_mode_out = set_binary_mode_out;
      exports.open_in = open_in;
      exports.open_in_bin = open_in_bin;
      exports.open_in_gen = open_in_gen;
      exports.input_char = input_char;
      exports.input_line = input_line;
      exports.input = input;
      exports.really_input = really_input;
      exports.really_input_string = really_input_string;
      exports.input_byte = input_byte;
      exports.input_binary_int = input_binary_int;
      exports.input_value = input_value;
      exports.seek_in = seek_in;
      exports.pos_in = pos_in;
      exports.in_channel_length = in_channel_length;
      exports.close_in = close_in;
      exports.close_in_noerr = close_in_noerr;
      exports.set_binary_mode_in = set_binary_mode_in;
      exports.LargeFile = LargeFile;
      exports.string_of_format = string_of_format;
      exports.exit = exit;
      exports.at_exit = at_exit;
      exports.valid_float_lexem = valid_float_lexem;
      exports.unsafe_really_input = unsafe_really_input;
      exports.do_at_exit = do_at_exit;
    }
  });

  // node_modules/@rescript/std/lib/js/digest.js
  var require_digest = __commonJS({
    "node_modules/@rescript/std/lib/js/digest.js"(exports) {
      "use strict";
      var Char = require_char();
      var $$String = require_string();
      var Caml_md5 = require_caml_md5();
      var Caml_bytes = require_caml_bytes();
      var Pervasives = require_pervasives();
      var Caml_string = require_caml_string();
      var Caml_external_polyfill = require_caml_external_polyfill();
      function string(str) {
        return Caml_md5.caml_md5_string(str, 0, str.length);
      }
      function bytes(b) {
        return string(Caml_bytes.bytes_to_string(b));
      }
      function substring(str, ofs, len) {
        if (ofs < 0 || len < 0 || ofs > (str.length - len | 0)) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Digest.substring",
            Error: new Error()
          };
        }
        return Caml_md5.caml_md5_string(str, ofs, len);
      }
      function subbytes(b, ofs, len) {
        return substring(Caml_bytes.bytes_to_string(b), ofs, len);
      }
      function file(filename) {
        var ic = Pervasives.open_in_bin(filename);
        var d;
        try {
          d = Caml_external_polyfill.resolve("caml_md5_chan")(ic, -1);
        } catch (e) {
          Caml_external_polyfill.resolve("caml_ml_close_channel")(ic);
          throw e;
        }
        Caml_external_polyfill.resolve("caml_ml_close_channel")(ic);
        return d;
      }
      var output = Pervasives.output_string;
      function input(chan) {
        return Pervasives.really_input_string(chan, 16);
      }
      function char_hex(n) {
        return n + (n < 10 ? 48 : 87) | 0;
      }
      function to_hex(d) {
        if (d.length !== 16) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Digest.to_hex",
            Error: new Error()
          };
        }
        var result = Caml_bytes.caml_create_bytes(32);
        for (var i = 0; i <= 15; ++i) {
          var x = Caml_string.get(d, i);
          result[i << 1] = char_hex(x >>> 4);
          result[(i << 1) + 1 | 0] = char_hex(x & 15);
        }
        return Caml_bytes.bytes_to_string(result);
      }
      function from_hex(s) {
        if (s.length !== 32) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Digest.from_hex",
            Error: new Error()
          };
        }
        var digit = function(c) {
          if (c >= 65) {
            if (c >= 97) {
              if (c >= 103) {
                throw {
                  RE_EXN_ID: "Invalid_argument",
                  _1: "Digest.from_hex",
                  Error: new Error()
                };
              }
              return (c - 97 | 0) + 10 | 0;
            }
            if (c >= 71) {
              throw {
                RE_EXN_ID: "Invalid_argument",
                _1: "Digest.from_hex",
                Error: new Error()
              };
            }
            return (c - 65 | 0) + 10 | 0;
          }
          if (c > 57 || c < 48) {
            throw {
              RE_EXN_ID: "Invalid_argument",
              _1: "Digest.from_hex",
              Error: new Error()
            };
          }
          return c - 48 | 0;
        };
        var $$byte = function(i2) {
          return (digit(Caml_string.get(s, i2)) << 4) + digit(Caml_string.get(s, i2 + 1 | 0)) | 0;
        };
        var result = Caml_bytes.caml_create_bytes(16);
        for (var i = 0; i <= 15; ++i) {
          Caml_bytes.set(result, i, Char.chr($$byte(i << 1)));
        }
        return Caml_bytes.bytes_to_string(result);
      }
      var compare = $$String.compare;
      var equal = $$String.equal;
      exports.compare = compare;
      exports.equal = equal;
      exports.string = string;
      exports.bytes = bytes;
      exports.substring = substring;
      exports.subbytes = subbytes;
      exports.file = file;
      exports.output = output;
      exports.input = input;
      exports.to_hex = to_hex;
      exports.from_hex = from_hex;
    }
  });

  // node_modules/@rescript/std/lib/js/random.js
  var require_random = __commonJS({
    "node_modules/@rescript/std/lib/js/random.js"(exports) {
      "use strict";
      var Caml = require_caml();
      var $$Array = require_array();
      var Int32 = require_int32();
      var Int64 = require_int64();
      var Digest = require_digest();
      var Caml_array = require_caml_array();
      var Caml_int64 = require_caml_int64();
      var Caml_string = require_caml_string();
      function random_seed(param) {
        return [Math.floor(Math.random() * 2147483647)];
      }
      function assign(st1, st2) {
        $$Array.blit(st2.st, 0, st1.st, 0, 55);
        st1.idx = st2.idx;
      }
      function full_init(s, seed) {
        var combine = function(accu2, x) {
          return Digest.string(accu2 + String(x));
        };
        var extract = function(d) {
          return ((Caml_string.get(d, 0) + (Caml_string.get(d, 1) << 8) | 0) + (Caml_string.get(d, 2) << 16) | 0) + (Caml_string.get(d, 3) << 24) | 0;
        };
        var seed$1 = seed.length === 0 ? [0] : seed;
        var l = seed$1.length;
        for (var i = 0; i <= 54; ++i) {
          Caml_array.set(s.st, i, i);
        }
        var accu = "x";
        for (var i$1 = 0, i_finish = 54 + (55 > l ? 55 : l) | 0; i$1 <= i_finish; ++i$1) {
          var j = i$1 % 55;
          var k = i$1 % l;
          accu = combine(accu, Caml_array.get(seed$1, k));
          Caml_array.set(s.st, j, (Caml_array.get(s.st, j) ^ extract(accu)) & 1073741823);
        }
        s.idx = 0;
      }
      function make(seed) {
        var result = {
          st: Caml_array.make(55, 0),
          idx: 0
        };
        full_init(result, seed);
        return result;
      }
      function make_self_init(param) {
        return make(random_seed(void 0));
      }
      function copy(s) {
        var result = {
          st: Caml_array.make(55, 0),
          idx: 0
        };
        assign(result, s);
        return result;
      }
      function bits(s) {
        s.idx = (s.idx + 1 | 0) % 55;
        var curval = Caml_array.get(s.st, s.idx);
        var newval = Caml_array.get(s.st, (s.idx + 24 | 0) % 55) + (curval ^ curval >>> 25 & 31) | 0;
        var newval30 = newval & 1073741823;
        Caml_array.set(s.st, s.idx, newval30);
        return newval30;
      }
      function $$int(s, bound) {
        if (bound > 1073741823 || bound <= 0) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Random.int",
            Error: new Error()
          };
        }
        while (true) {
          var r = bits(s);
          var v = r % bound;
          if ((r - v | 0) <= ((1073741823 - bound | 0) + 1 | 0)) {
            return v;
          }
          continue;
        }
        ;
      }
      function int32(s, bound) {
        if (bound <= 0) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Random.int32",
            Error: new Error()
          };
        }
        while (true) {
          var b1 = bits(s);
          var b2 = (bits(s) & 1) << 30;
          var r = b1 | b2;
          var v = r % bound;
          if ((r - v | 0) <= ((Int32.max_int - bound | 0) + 1 | 0)) {
            return v;
          }
          continue;
        }
        ;
      }
      function int64(s, bound) {
        if (Caml.i64_le(bound, Caml_int64.zero)) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Random.int64",
            Error: new Error()
          };
        }
        while (true) {
          var b1 = Caml_int64.of_int32(bits(s));
          var b2 = Caml_int64.lsl_(Caml_int64.of_int32(bits(s)), 30);
          var b3 = Caml_int64.lsl_(Caml_int64.of_int32(bits(s) & 7), 60);
          var r = Caml_int64.or_(b1, Caml_int64.or_(b2, b3));
          var v = Caml_int64.mod_(r, bound);
          if (!Caml.i64_gt(Caml_int64.sub(r, v), Caml_int64.add(Caml_int64.sub(Int64.max_int, bound), Caml_int64.one))) {
            return v;
          }
          continue;
        }
        ;
      }
      function rawfloat(s) {
        var r1 = bits(s);
        var r2 = bits(s);
        return (r1 / 1073741824 + r2) / 1073741824;
      }
      function $$float(s, bound) {
        return rawfloat(s) * bound;
      }
      function bool(s) {
        return (bits(s) & 1) === 0;
      }
      var $$default = {
        st: [
          987910699,
          495797812,
          364182224,
          414272206,
          318284740,
          990407751,
          383018966,
          270373319,
          840823159,
          24560019,
          536292337,
          512266505,
          189156120,
          730249596,
          143776328,
          51606627,
          140166561,
          366354223,
          1003410265,
          700563762,
          981890670,
          913149062,
          526082594,
          1021425055,
          784300257,
          667753350,
          630144451,
          949649812,
          48546892,
          415514493,
          258888527,
          511570777,
          89983870,
          283659902,
          308386020,
          242688715,
          482270760,
          865188196,
          1027664170,
          207196989,
          193777847,
          619708188,
          671350186,
          149669678,
          257044018,
          87658204,
          558145612,
          183450813,
          28133145,
          901332182,
          710253903,
          510646120,
          652377910,
          409934019,
          801085050
        ],
        idx: 0
      };
      function bits$1(param) {
        return bits($$default);
      }
      function $$int$1(bound) {
        return $$int($$default, bound);
      }
      function int32$1(bound) {
        return int32($$default, bound);
      }
      function int64$1(bound) {
        return int64($$default, bound);
      }
      function $$float$1(scale) {
        return rawfloat($$default) * scale;
      }
      function bool$1(param) {
        return bool($$default);
      }
      function full_init$1(seed) {
        return full_init($$default, seed);
      }
      function init(seed) {
        return full_init($$default, [seed]);
      }
      function self_init(param) {
        return full_init$1(random_seed(void 0));
      }
      function get_state(param) {
        return copy($$default);
      }
      function set_state(s) {
        return assign($$default, s);
      }
      var State = {
        make,
        make_self_init,
        copy,
        bits,
        $$int,
        int32,
        int64,
        $$float,
        bool
      };
      exports.init = init;
      exports.full_init = full_init$1;
      exports.self_init = self_init;
      exports.bits = bits$1;
      exports.$$int = $$int$1;
      exports.int32 = int32$1;
      exports.int64 = int64$1;
      exports.$$float = $$float$1;
      exports.bool = bool$1;
      exports.State = State;
      exports.get_state = get_state;
      exports.set_state = set_state;
    }
  });

  // src/lib/Game.bs.js
  var require_Game_bs = __commonJS({
    "src/lib/Game.bs.js"(exports) {
      "use strict";
      var Curry = require_curry();
      var Random = require_random();
      var Caml_obj = require_caml_obj();
      var Belt_List = require_belt_List();
      var Belt_Array = require_belt_Array();
      var Caml_array = require_caml_array();
      function safeIndex(x) {
        var i = x[1];
        var length = x[0];
        if (i < 0) {
          return length - 1 | 0;
        } else if (i === length) {
          return 0;
        } else {
          return i;
        }
      }
      function safePoint(param, length) {
        return [
          safeIndex([
            length,
            param[0]
          ]),
          safeIndex([
            length,
            param[1]
          ])
        ];
      }
      function mapGrid(fn, grid) {
        return Belt_Array.mapWithIndex(grid, function(y, row) {
          return Belt_Array.mapWithIndex(row, function(x, tile) {
            return Curry._3(fn, [
              y,
              x
            ], tile, grid);
          });
        });
      }
      function makeBlankGrid(size$prime) {
        return Belt_Array.make(size$prime, Belt_Array.make(size$prime, 0));
      }
      function makeRandomGrid(size, seed) {
        Random.init(seed);
        return mapGrid(function(param, param$1, param$2) {
          if (Random.$$int(10) > 7) {
            return 1;
          } else {
            return 0;
          }
        }, makeBlankGrid(size));
      }
      function getTile(grid, point) {
        var match = safePoint(point, grid.length);
        return Caml_array.get(Caml_array.get(grid, match[0]), match[1]);
      }
      var offset = {
        hd: -1,
        tl: {
          hd: 0,
          tl: {
            hd: 1,
            tl: 0
          }
        }
      };
      function getNeighbours(grid, param) {
        var x = param[1];
        var y = param[0];
        return Belt_List.map(Belt_List.keep(Belt_List.flatten(Belt_List.map(offset, function(y$prime) {
          return Belt_List.map(offset, function(x$prime) {
            return [
              y + y$prime | 0,
              x + x$prime | 0
            ];
          });
        })), function(p) {
          return Caml_obj.caml_notequal(p, [
            y,
            x
          ]);
        }), function(param2) {
          return getTile(grid, param2);
        });
      }
      function countLivingNeighbours(grid, point) {
        return Belt_List.length(Belt_List.keep(getNeighbours(grid, point), function(c) {
          return c === 1;
        }));
      }
      function nextState(point, cellState, grid) {
        var neighbours = countLivingNeighbours(grid, point);
        if (cellState) {
          if (neighbours === 3 || neighbours === 2) {
            return 1;
          } else {
            return 0;
          }
        } else if (neighbours !== 3) {
          return 0;
        } else {
          return 1;
        }
      }
      function nextGeneration(param) {
        return mapGrid(nextState, param);
      }
      function toggleTile(grid, point) {
        var grid$prime = Belt_Array.map(grid, function(prim) {
          return prim.slice(0);
        });
        var match = safePoint(point, grid.length);
        var x = match[1];
        var y = match[0];
        var tile = Caml_array.get(Caml_array.get(grid$prime, y), x);
        Caml_array.set(Caml_array.get(grid$prime, y), x, tile ? 0 : 1);
        return grid$prime;
      }
      var L;
      var A;
      exports.L = L;
      exports.A = A;
      exports.safeIndex = safeIndex;
      exports.safePoint = safePoint;
      exports.mapGrid = mapGrid;
      exports.makeBlankGrid = makeBlankGrid;
      exports.makeRandomGrid = makeRandomGrid;
      exports.getTile = getTile;
      exports.offset = offset;
      exports.getNeighbours = getNeighbours;
      exports.countLivingNeighbours = countLivingNeighbours;
      exports.nextState = nextState;
      exports.nextGeneration = nextGeneration;
      exports.toggleTile = toggleTile;
    }
  });

  // src/lib/Model.bs.js
  var require_Model_bs = __commonJS({
    "src/lib/Model.bs.js"(exports) {
      "use strict";
      var Game$ReasonGameOfLife = require_Game_bs();
      var Util$ReasonGameOfLife = require_Util_bs();
      var Config$ReasonGameOfLife = require_Config_bs();
      function makeSeed(param) {
        return Date.now() | 0;
      }
      var initialState_grid = Game$ReasonGameOfLife.makeRandomGrid(Config$ReasonGameOfLife.boardSize, Date.now() | 0);
      var initialState_animationFrameId = {
        contents: 0
      };
      var initialState = {
        grid: initialState_grid,
        isPlaying: false,
        animationFrameId: initialState_animationFrameId,
        startedAt: void 0,
        ticks: 0,
        frameRate: 0
      };
      function grid(self2, action, _state) {
        if (typeof action !== "number") {
          return Game$ReasonGameOfLife.toggleTile(self2, action._0);
        }
        switch (action) {
          case 0:
            return Game$ReasonGameOfLife.makeRandomGrid(Config$ReasonGameOfLife.boardSize, Date.now() | 0);
          case 1:
            return Game$ReasonGameOfLife.makeBlankGrid(Config$ReasonGameOfLife.boardSize);
          case 2:
          case 3:
            return self2;
          case 4:
            return Game$ReasonGameOfLife.nextGeneration(self2);
        }
      }
      function isPlaying(self2, action, _state) {
        if (typeof action !== "number") {
          return self2;
        }
        if (action < 2) {
          return self2;
        }
        switch (action) {
          case 2:
            return true;
          case 3:
            return false;
          case 4:
            return self2;
        }
      }
      function startedAt(self2, action, _state) {
        if (typeof action !== "number") {
          return self2;
        }
        if (action < 2) {
          return self2;
        }
        switch (action) {
          case 2:
            return Date.now();
          case 3:
            return;
          case 4:
            return self2;
        }
      }
      function ticks(self2, action, state) {
        var match = state.isPlaying;
        if (typeof action !== "number") {
          return self2;
        }
        switch (action) {
          case 0:
          case 2:
            return self2;
          case 1:
          case 3:
            return 0;
          case 4:
            if (match) {
              return self2 + 1 | 0;
            } else {
              return self2;
            }
        }
      }
      function frameRate(self2, action, state) {
        var match = state.startedAt;
        if (typeof action === "number") {
          if (action !== 3) {
            if (action >= 4 && match !== void 0) {
              return Util$ReasonGameOfLife.avgFrameRate(state.ticks, match);
            } else {
              return self2;
            }
          } else {
            return 0;
          }
        } else {
          return self2;
        }
      }
      function root(state, action) {
        return {
          grid: grid(state.grid, action, state),
          isPlaying: isPlaying(state.isPlaying, action, state),
          animationFrameId: state.animationFrameId,
          startedAt: startedAt(state.startedAt, action, state),
          ticks: ticks(state.ticks, action, state),
          frameRate: frameRate(state.frameRate, action, state)
        };
      }
      var Reducers = {
        grid,
        isPlaying,
        startedAt,
        ticks,
        frameRate,
        root
      };
      exports.makeSeed = makeSeed;
      exports.initialState = initialState;
      exports.Reducers = Reducers;
    }
  });

  // node_modules/polished/node_modules/@babel/runtime/helpers/extends.js
  var require_extends = __commonJS({
    "node_modules/polished/node_modules/@babel/runtime/helpers/extends.js"(exports, module) {
      function _extends() {
        module.exports = _extends = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        module.exports["default"] = module.exports, module.exports.__esModule = true;
        return _extends.apply(this, arguments);
      }
      module.exports = _extends;
      module.exports["default"] = module.exports, module.exports.__esModule = true;
    }
  });

  // node_modules/polished/node_modules/@babel/runtime/helpers/assertThisInitialized.js
  var require_assertThisInitialized = __commonJS({
    "node_modules/polished/node_modules/@babel/runtime/helpers/assertThisInitialized.js"(exports, module) {
      function _assertThisInitialized(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      module.exports = _assertThisInitialized;
      module.exports["default"] = module.exports, module.exports.__esModule = true;
    }
  });

  // node_modules/polished/node_modules/@babel/runtime/helpers/setPrototypeOf.js
  var require_setPrototypeOf = __commonJS({
    "node_modules/polished/node_modules/@babel/runtime/helpers/setPrototypeOf.js"(exports, module) {
      function _setPrototypeOf(o, p) {
        module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        module.exports["default"] = module.exports, module.exports.__esModule = true;
        return _setPrototypeOf(o, p);
      }
      module.exports = _setPrototypeOf;
      module.exports["default"] = module.exports, module.exports.__esModule = true;
    }
  });

  // node_modules/polished/node_modules/@babel/runtime/helpers/inheritsLoose.js
  var require_inheritsLoose = __commonJS({
    "node_modules/polished/node_modules/@babel/runtime/helpers/inheritsLoose.js"(exports, module) {
      var setPrototypeOf = require_setPrototypeOf();
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        setPrototypeOf(subClass, superClass);
      }
      module.exports = _inheritsLoose;
      module.exports["default"] = module.exports, module.exports.__esModule = true;
    }
  });

  // node_modules/polished/node_modules/@babel/runtime/helpers/getPrototypeOf.js
  var require_getPrototypeOf = __commonJS({
    "node_modules/polished/node_modules/@babel/runtime/helpers/getPrototypeOf.js"(exports, module) {
      function _getPrototypeOf(o) {
        module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        };
        module.exports["default"] = module.exports, module.exports.__esModule = true;
        return _getPrototypeOf(o);
      }
      module.exports = _getPrototypeOf;
      module.exports["default"] = module.exports, module.exports.__esModule = true;
    }
  });

  // node_modules/polished/node_modules/@babel/runtime/helpers/isNativeFunction.js
  var require_isNativeFunction = __commonJS({
    "node_modules/polished/node_modules/@babel/runtime/helpers/isNativeFunction.js"(exports, module) {
      function _isNativeFunction(fn) {
        return Function.toString.call(fn).indexOf("[native code]") !== -1;
      }
      module.exports = _isNativeFunction;
      module.exports["default"] = module.exports, module.exports.__esModule = true;
    }
  });

  // node_modules/polished/node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js
  var require_isNativeReflectConstruct = __commonJS({
    "node_modules/polished/node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js"(exports, module) {
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      module.exports = _isNativeReflectConstruct;
      module.exports["default"] = module.exports, module.exports.__esModule = true;
    }
  });

  // node_modules/polished/node_modules/@babel/runtime/helpers/construct.js
  var require_construct = __commonJS({
    "node_modules/polished/node_modules/@babel/runtime/helpers/construct.js"(exports, module) {
      var setPrototypeOf = require_setPrototypeOf();
      var isNativeReflectConstruct = require_isNativeReflectConstruct();
      function _construct(Parent, args, Class) {
        if (isNativeReflectConstruct()) {
          module.exports = _construct = Reflect.construct;
          module.exports["default"] = module.exports, module.exports.__esModule = true;
        } else {
          module.exports = _construct = function _construct2(Parent2, args2, Class2) {
            var a = [null];
            a.push.apply(a, args2);
            var Constructor = Function.bind.apply(Parent2, a);
            var instance = new Constructor();
            if (Class2)
              setPrototypeOf(instance, Class2.prototype);
            return instance;
          };
          module.exports["default"] = module.exports, module.exports.__esModule = true;
        }
        return _construct.apply(null, arguments);
      }
      module.exports = _construct;
      module.exports["default"] = module.exports, module.exports.__esModule = true;
    }
  });

  // node_modules/polished/node_modules/@babel/runtime/helpers/wrapNativeSuper.js
  var require_wrapNativeSuper = __commonJS({
    "node_modules/polished/node_modules/@babel/runtime/helpers/wrapNativeSuper.js"(exports, module) {
      var getPrototypeOf = require_getPrototypeOf();
      var setPrototypeOf = require_setPrototypeOf();
      var isNativeFunction = require_isNativeFunction();
      var construct = require_construct();
      function _wrapNativeSuper(Class) {
        var _cache = typeof Map === "function" ? new Map() : void 0;
        module.exports = _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
          if (Class2 === null || !isNativeFunction(Class2))
            return Class2;
          if (typeof Class2 !== "function") {
            throw new TypeError("Super expression must either be null or a function");
          }
          if (typeof _cache !== "undefined") {
            if (_cache.has(Class2))
              return _cache.get(Class2);
            _cache.set(Class2, Wrapper);
          }
          function Wrapper() {
            return construct(Class2, arguments, getPrototypeOf(this).constructor);
          }
          Wrapper.prototype = Object.create(Class2.prototype, {
            constructor: {
              value: Wrapper,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          return setPrototypeOf(Wrapper, Class2);
        };
        module.exports["default"] = module.exports, module.exports.__esModule = true;
        return _wrapNativeSuper(Class);
      }
      module.exports = _wrapNativeSuper;
      module.exports["default"] = module.exports, module.exports.__esModule = true;
    }
  });

  // node_modules/polished/node_modules/@babel/runtime/helpers/taggedTemplateLiteralLoose.js
  var require_taggedTemplateLiteralLoose = __commonJS({
    "node_modules/polished/node_modules/@babel/runtime/helpers/taggedTemplateLiteralLoose.js"(exports, module) {
      function _taggedTemplateLiteralLoose(strings, raw) {
        if (!raw) {
          raw = strings.slice(0);
        }
        strings.raw = raw;
        return strings;
      }
      module.exports = _taggedTemplateLiteralLoose;
      module.exports["default"] = module.exports, module.exports.__esModule = true;
    }
  });

  // node_modules/polished/dist/polished.cjs.js
  var require_polished_cjs = __commonJS({
    "node_modules/polished/dist/polished.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {value: true});
      var _extends = require_extends();
      var _assertThisInitialized = require_assertThisInitialized();
      var _inheritsLoose = require_inheritsLoose();
      var _wrapNativeSuper = require_wrapNativeSuper();
      var _taggedTemplateLiteralLoose = require_taggedTemplateLiteralLoose();
      function _interopDefaultLegacy(e) {
        return e && typeof e === "object" && "default" in e ? e : {"default": e};
      }
      var _extends__default = /* @__PURE__ */ _interopDefaultLegacy(_extends);
      var _assertThisInitialized__default = /* @__PURE__ */ _interopDefaultLegacy(_assertThisInitialized);
      var _inheritsLoose__default = /* @__PURE__ */ _interopDefaultLegacy(_inheritsLoose);
      var _wrapNativeSuper__default = /* @__PURE__ */ _interopDefaultLegacy(_wrapNativeSuper);
      var _taggedTemplateLiteralLoose__default = /* @__PURE__ */ _interopDefaultLegacy(_taggedTemplateLiteralLoose);
      function last() {
        var _ref;
        return _ref = arguments.length - 1, _ref < 0 || arguments.length <= _ref ? void 0 : arguments[_ref];
      }
      function negation(a) {
        return -a;
      }
      function addition(a, b) {
        return a + b;
      }
      function subtraction(a, b) {
        return a - b;
      }
      function multiplication(a, b) {
        return a * b;
      }
      function division(a, b) {
        return a / b;
      }
      function max() {
        return Math.max.apply(Math, arguments);
      }
      function min() {
        return Math.min.apply(Math, arguments);
      }
      function comma() {
        return Array.of.apply(Array, arguments);
      }
      var defaultSymbols = {
        symbols: {
          "*": {
            infix: {
              symbol: "*",
              f: multiplication,
              notation: "infix",
              precedence: 4,
              rightToLeft: 0,
              argCount: 2
            },
            symbol: "*",
            regSymbol: "\\*"
          },
          "/": {
            infix: {
              symbol: "/",
              f: division,
              notation: "infix",
              precedence: 4,
              rightToLeft: 0,
              argCount: 2
            },
            symbol: "/",
            regSymbol: "/"
          },
          "+": {
            infix: {
              symbol: "+",
              f: addition,
              notation: "infix",
              precedence: 2,
              rightToLeft: 0,
              argCount: 2
            },
            prefix: {
              symbol: "+",
              f: last,
              notation: "prefix",
              precedence: 3,
              rightToLeft: 0,
              argCount: 1
            },
            symbol: "+",
            regSymbol: "\\+"
          },
          "-": {
            infix: {
              symbol: "-",
              f: subtraction,
              notation: "infix",
              precedence: 2,
              rightToLeft: 0,
              argCount: 2
            },
            prefix: {
              symbol: "-",
              f: negation,
              notation: "prefix",
              precedence: 3,
              rightToLeft: 0,
              argCount: 1
            },
            symbol: "-",
            regSymbol: "-"
          },
          ",": {
            infix: {
              symbol: ",",
              f: comma,
              notation: "infix",
              precedence: 1,
              rightToLeft: 0,
              argCount: 2
            },
            symbol: ",",
            regSymbol: ","
          },
          "(": {
            prefix: {
              symbol: "(",
              f: last,
              notation: "prefix",
              precedence: 0,
              rightToLeft: 0,
              argCount: 1
            },
            symbol: "(",
            regSymbol: "\\("
          },
          ")": {
            postfix: {
              symbol: ")",
              f: void 0,
              notation: "postfix",
              precedence: 0,
              rightToLeft: 0,
              argCount: 1
            },
            symbol: ")",
            regSymbol: "\\)"
          },
          min: {
            func: {
              symbol: "min",
              f: min,
              notation: "func",
              precedence: 0,
              rightToLeft: 0,
              argCount: 1
            },
            symbol: "min",
            regSymbol: "min\\b"
          },
          max: {
            func: {
              symbol: "max",
              f: max,
              notation: "func",
              precedence: 0,
              rightToLeft: 0,
              argCount: 1
            },
            symbol: "max",
            regSymbol: "max\\b"
          }
        }
      };
      var ERRORS = {
        "1": "Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 }).\n\n",
        "2": "Passed invalid arguments to hsla, please pass multiple numbers e.g. hsla(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 }).\n\n",
        "3": "Passed an incorrect argument to a color function, please pass a string representation of a color.\n\n",
        "4": "Couldn't generate valid rgb string from %s, it returned %s.\n\n",
        "5": "Couldn't parse the color string. Please provide the color as a string in hex, rgb, rgba, hsl or hsla notation.\n\n",
        "6": "Passed invalid arguments to rgb, please pass multiple numbers e.g. rgb(255, 205, 100) or an object e.g. rgb({ red: 255, green: 205, blue: 100 }).\n\n",
        "7": "Passed invalid arguments to rgba, please pass multiple numbers e.g. rgb(255, 205, 100, 0.75) or an object e.g. rgb({ red: 255, green: 205, blue: 100, alpha: 0.75 }).\n\n",
        "8": "Passed invalid argument to toColorString, please pass a RgbColor, RgbaColor, HslColor or HslaColor object.\n\n",
        "9": "Please provide a number of steps to the modularScale helper.\n\n",
        "10": "Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\n\n",
        "11": 'Invalid value passed as base to modularScale, expected number or em string but got "%s"\n\n',
        "12": 'Expected a string ending in "px" or a number passed as the first argument to %s(), got "%s" instead.\n\n',
        "13": 'Expected a string ending in "px" or a number passed as the second argument to %s(), got "%s" instead.\n\n',
        "14": 'Passed invalid pixel value ("%s") to %s(), please pass a value like "12px" or 12.\n\n',
        "15": 'Passed invalid base value ("%s") to %s(), please pass a value like "12px" or 12.\n\n',
        "16": "You must provide a template to this method.\n\n",
        "17": "You passed an unsupported selector state to this method.\n\n",
        "18": "minScreen and maxScreen must be provided as stringified numbers with the same units.\n\n",
        "19": "fromSize and toSize must be provided as stringified numbers with the same units.\n\n",
        "20": "expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\n\n",
        "21": "expects the objects in the first argument array to have the properties `prop`, `fromSize`, and `toSize`.\n\n",
        "22": "expects the first argument object to have the properties `prop`, `fromSize`, and `toSize`.\n\n",
        "23": "fontFace expects a name of a font-family.\n\n",
        "24": "fontFace expects either the path to the font file(s) or a name of a local copy.\n\n",
        "25": "fontFace expects localFonts to be an array.\n\n",
        "26": "fontFace expects fileFormats to be an array.\n\n",
        "27": "radialGradient requries at least 2 color-stops to properly render.\n\n",
        "28": "Please supply a filename to retinaImage() as the first argument.\n\n",
        "29": "Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\n\n",
        "30": "Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",
        "31": "The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation\n\n",
        "32": "To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')\n\n",
        "33": "The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation\n\n",
        "34": "borderRadius expects a radius value as a string or number as the second argument.\n\n",
        "35": 'borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.\n\n',
        "36": "Property must be a string value.\n\n",
        "37": "Syntax Error at %s.\n\n",
        "38": "Formula contains a function that needs parentheses at %s.\n\n",
        "39": "Formula is missing closing parenthesis at %s.\n\n",
        "40": "Formula has too many closing parentheses at %s.\n\n",
        "41": "All values in a formula must have the same unit or be unitless.\n\n",
        "42": "Please provide a number of steps to the modularScale helper.\n\n",
        "43": "Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\n\n",
        "44": "Invalid value passed as base to modularScale, expected number or em/rem string but got %s.\n\n",
        "45": "Passed invalid argument to hslToColorString, please pass a HslColor or HslaColor object.\n\n",
        "46": "Passed invalid argument to rgbToColorString, please pass a RgbColor or RgbaColor object.\n\n",
        "47": "minScreen and maxScreen must be provided as stringified numbers with the same units.\n\n",
        "48": "fromSize and toSize must be provided as stringified numbers with the same units.\n\n",
        "49": "Expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\n\n",
        "50": "Expects the objects in the first argument array to have the properties prop, fromSize, and toSize.\n\n",
        "51": "Expects the first argument object to have the properties prop, fromSize, and toSize.\n\n",
        "52": "fontFace expects either the path to the font file(s) or a name of a local copy.\n\n",
        "53": "fontFace expects localFonts to be an array.\n\n",
        "54": "fontFace expects fileFormats to be an array.\n\n",
        "55": "fontFace expects a name of a font-family.\n\n",
        "56": "linearGradient requries at least 2 color-stops to properly render.\n\n",
        "57": "radialGradient requries at least 2 color-stops to properly render.\n\n",
        "58": "Please supply a filename to retinaImage() as the first argument.\n\n",
        "59": "Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\n\n",
        "60": "Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",
        "61": "Property must be a string value.\n\n",
        "62": "borderRadius expects a radius value as a string or number as the second argument.\n\n",
        "63": 'borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.\n\n',
        "64": "The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation.\n\n",
        "65": "To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s').\n\n",
        "66": "The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation.\n\n",
        "67": "You must provide a template to this method.\n\n",
        "68": "You passed an unsupported selector state to this method.\n\n",
        "69": 'Expected a string ending in "px" or a number passed as the first argument to %s(), got %s instead.\n\n',
        "70": 'Expected a string ending in "px" or a number passed as the second argument to %s(), got %s instead.\n\n',
        "71": 'Passed invalid pixel value %s to %s(), please pass a value like "12px" or 12.\n\n',
        "72": 'Passed invalid base value %s to %s(), please pass a value like "12px" or 12.\n\n',
        "73": "Please provide a valid CSS variable.\n\n",
        "74": "CSS variable not found and no default was provided.\n\n",
        "75": "important requires a valid style object, got a %s instead.\n\n",
        "76": "fromSize and toSize must be provided as stringified numbers with the same units as minScreen and maxScreen.\n\n",
        "77": 'remToPx expects a value in "rem" but you provided it in "%s".\n\n',
        "78": 'base must be set in "px" or "%" but you set it in "%s".\n'
      };
      function format() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var a = args[0];
        var b = [];
        var c;
        for (c = 1; c < args.length; c += 1) {
          b.push(args[c]);
        }
        b.forEach(function(d) {
          a = a.replace(/%[a-z]/, d);
        });
        return a;
      }
      var PolishedError = /* @__PURE__ */ function(_Error) {
        _inheritsLoose__default["default"](PolishedError2, _Error);
        function PolishedError2(code) {
          var _this;
          if (false) {
            _this = _Error.call(this, "An error occurred. See https://github.com/styled-components/polished/blob/main/src/internalHelpers/errors.md#" + code + " for more information.") || this;
          } else {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            _this = _Error.call(this, format.apply(void 0, [ERRORS[code]].concat(args))) || this;
          }
          return _assertThisInitialized__default["default"](_this);
        }
        return PolishedError2;
      }(/* @__PURE__ */ _wrapNativeSuper__default["default"](Error));
      var unitRegExp = /((?!\w)a|na|hc|mc|dg|me[r]?|xe|ni(?![a-zA-Z])|mm|cp|tp|xp|q(?!s)|hv|xamv|nimv|wv|sm|s(?!\D|$)|ged|darg?|nrut)/g;
      function mergeSymbolMaps(additionalSymbols) {
        var symbolMap = {};
        symbolMap.symbols = additionalSymbols ? _extends__default["default"]({}, defaultSymbols.symbols, additionalSymbols.symbols) : _extends__default["default"]({}, defaultSymbols.symbols);
        return symbolMap;
      }
      function exec(operators, values) {
        var _ref;
        var op = operators.pop();
        values.push(op.f.apply(op, (_ref = []).concat.apply(_ref, values.splice(-op.argCount))));
        return op.precedence;
      }
      function calculate(expression, additionalSymbols) {
        var symbolMap = mergeSymbolMaps(additionalSymbols);
        var match;
        var operators = [symbolMap.symbols["("].prefix];
        var values = [];
        var pattern = new RegExp("\\d+(?:\\.\\d+)?|" + Object.keys(symbolMap.symbols).map(function(key) {
          return symbolMap.symbols[key];
        }).sort(function(a, b) {
          return b.symbol.length - a.symbol.length;
        }).map(function(val) {
          return val.regSymbol;
        }).join("|") + "|(\\S)", "g");
        pattern.lastIndex = 0;
        var afterValue = false;
        do {
          match = pattern.exec(expression);
          var _ref2 = match || [")", void 0], token = _ref2[0], bad = _ref2[1];
          var notNumber = symbolMap.symbols[token];
          var notNewValue = notNumber && !notNumber.prefix && !notNumber.func;
          var notAfterValue = !notNumber || !notNumber.postfix && !notNumber.infix;
          if (bad || (afterValue ? notAfterValue : notNewValue)) {
            throw new PolishedError(37, match ? match.index : expression.length, expression);
          }
          if (afterValue) {
            var curr = notNumber.postfix || notNumber.infix;
            do {
              var prev = operators[operators.length - 1];
              if ((curr.precedence - prev.precedence || prev.rightToLeft) > 0)
                break;
            } while (exec(operators, values));
            afterValue = curr.notation === "postfix";
            if (curr.symbol !== ")") {
              operators.push(curr);
              if (afterValue)
                exec(operators, values);
            }
          } else if (notNumber) {
            operators.push(notNumber.prefix || notNumber.func);
            if (notNumber.func) {
              match = pattern.exec(expression);
              if (!match || match[0] !== "(") {
                throw new PolishedError(38, match ? match.index : expression.length, expression);
              }
            }
          } else {
            values.push(+token);
            afterValue = true;
          }
        } while (match && operators.length);
        if (operators.length) {
          throw new PolishedError(39, match ? match.index : expression.length, expression);
        } else if (match) {
          throw new PolishedError(40, match ? match.index : expression.length, expression);
        } else {
          return values.pop();
        }
      }
      function reverseString(str) {
        return str.split("").reverse().join("");
      }
      function math(formula, additionalSymbols) {
        var reversedFormula = reverseString(formula);
        var formulaMatch = reversedFormula.match(unitRegExp);
        if (formulaMatch && !formulaMatch.every(function(unit) {
          return unit === formulaMatch[0];
        })) {
          throw new PolishedError(41);
        }
        var cleanFormula = reverseString(reversedFormula.replace(unitRegExp, ""));
        return "" + calculate(cleanFormula, additionalSymbols) + (formulaMatch ? reverseString(formulaMatch[0]) : "");
      }
      var cssVariableRegex = /--[\S]*/g;
      function cssVar(cssVariable, defaultValue) {
        if (!cssVariable || !cssVariable.match(cssVariableRegex)) {
          throw new PolishedError(73);
        }
        var variableValue;
        if (typeof document !== "undefined" && document.documentElement !== null) {
          variableValue = getComputedStyle(document.documentElement).getPropertyValue(cssVariable);
        }
        if (variableValue) {
          return variableValue.trim();
        } else if (defaultValue) {
          return defaultValue;
        }
        throw new PolishedError(74);
      }
      function capitalizeString(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
      }
      var positionMap$1 = ["Top", "Right", "Bottom", "Left"];
      function generateProperty(property, position2) {
        if (!property)
          return position2.toLowerCase();
        var splitProperty = property.split("-");
        if (splitProperty.length > 1) {
          splitProperty.splice(1, 0, position2);
          return splitProperty.reduce(function(acc, val) {
            return "" + acc + capitalizeString(val);
          });
        }
        var joinedProperty = property.replace(/([a-z])([A-Z])/g, "$1" + position2 + "$2");
        return property === joinedProperty ? "" + property + position2 : joinedProperty;
      }
      function generateStyles(property, valuesWithDefaults) {
        var styles = {};
        for (var i = 0; i < valuesWithDefaults.length; i += 1) {
          if (valuesWithDefaults[i] || valuesWithDefaults[i] === 0) {
            styles[generateProperty(property, positionMap$1[i])] = valuesWithDefaults[i];
          }
        }
        return styles;
      }
      function directionalProperty(property) {
        for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          values[_key - 1] = arguments[_key];
        }
        var firstValue = values[0], _values$ = values[1], secondValue = _values$ === void 0 ? firstValue : _values$, _values$2 = values[2], thirdValue = _values$2 === void 0 ? firstValue : _values$2, _values$3 = values[3], fourthValue = _values$3 === void 0 ? secondValue : _values$3;
        var valuesWithDefaults = [firstValue, secondValue, thirdValue, fourthValue];
        return generateStyles(property, valuesWithDefaults);
      }
      function endsWith(string, suffix) {
        return string.substr(-suffix.length) === suffix;
      }
      var cssRegex$1 = /^([+-]?(?:\d+|\d*\.\d+))([a-z]*|%)$/;
      function stripUnit(value) {
        if (typeof value !== "string")
          return value;
        var matchedValue = value.match(cssRegex$1);
        return matchedValue ? parseFloat(value) : value;
      }
      var pxtoFactory = function pxtoFactory2(to) {
        return function(pxval, base) {
          if (base === void 0) {
            base = "16px";
          }
          var newPxval = pxval;
          var newBase = base;
          if (typeof pxval === "string") {
            if (!endsWith(pxval, "px")) {
              throw new PolishedError(69, to, pxval);
            }
            newPxval = stripUnit(pxval);
          }
          if (typeof base === "string") {
            if (!endsWith(base, "px")) {
              throw new PolishedError(70, to, base);
            }
            newBase = stripUnit(base);
          }
          if (typeof newPxval === "string") {
            throw new PolishedError(71, pxval, to);
          }
          if (typeof newBase === "string") {
            throw new PolishedError(72, base, to);
          }
          return "" + newPxval / newBase + to;
        };
      };
      var em = /* @__PURE__ */ pxtoFactory("em");
      var cssRegex = /^([+-]?(?:\d+|\d*\.\d+))([a-z]*|%)$/;
      function getValueAndUnit(value) {
        if (typeof value !== "string")
          return [value, ""];
        var matchedValue = value.match(cssRegex);
        if (matchedValue)
          return [parseFloat(value), matchedValue[2]];
        return [value, void 0];
      }
      function important(styleBlock, rules) {
        if (typeof styleBlock !== "object" || styleBlock === null) {
          throw new PolishedError(75, typeof styleBlock);
        }
        var newStyleBlock = {};
        Object.keys(styleBlock).forEach(function(key) {
          if (typeof styleBlock[key] === "object" && styleBlock[key] !== null) {
            newStyleBlock[key] = important(styleBlock[key], rules);
          } else if (!rules || rules && (rules === key || rules.indexOf(key) >= 0)) {
            newStyleBlock[key] = styleBlock[key] + " !important";
          } else {
            newStyleBlock[key] = styleBlock[key];
          }
        });
        return newStyleBlock;
      }
      var ratioNames = {
        minorSecond: 1.067,
        majorSecond: 1.125,
        minorThird: 1.2,
        majorThird: 1.25,
        perfectFourth: 1.333,
        augFourth: 1.414,
        perfectFifth: 1.5,
        minorSixth: 1.6,
        goldenSection: 1.618,
        majorSixth: 1.667,
        minorSeventh: 1.778,
        majorSeventh: 1.875,
        octave: 2,
        majorTenth: 2.5,
        majorEleventh: 2.667,
        majorTwelfth: 3,
        doubleOctave: 4
      };
      function getRatio(ratioName) {
        return ratioNames[ratioName];
      }
      function modularScale(steps, base, ratio) {
        if (base === void 0) {
          base = "1em";
        }
        if (ratio === void 0) {
          ratio = 1.333;
        }
        if (typeof steps !== "number") {
          throw new PolishedError(42);
        }
        if (typeof ratio === "string" && !ratioNames[ratio]) {
          throw new PolishedError(43);
        }
        var _ref = typeof base === "string" ? getValueAndUnit(base) : [base, ""], realBase = _ref[0], unit = _ref[1];
        var realRatio = typeof ratio === "string" ? getRatio(ratio) : ratio;
        if (typeof realBase === "string") {
          throw new PolishedError(44, base);
        }
        return "" + realBase * Math.pow(realRatio, steps) + (unit || "");
      }
      var rem = /* @__PURE__ */ pxtoFactory("rem");
      var defaultFontSize = 16;
      function convertBase(base) {
        var deconstructedValue = getValueAndUnit(base);
        if (deconstructedValue[1] === "px") {
          return parseFloat(base);
        }
        if (deconstructedValue[1] === "%") {
          return parseFloat(base) / 100 * defaultFontSize;
        }
        throw new PolishedError(78, deconstructedValue[1]);
      }
      function getBaseFromDoc() {
        if (typeof document !== "undefined" && document.documentElement !== null) {
          var rootFontSize = getComputedStyle(document.documentElement).fontSize;
          return rootFontSize ? convertBase(rootFontSize) : defaultFontSize;
        }
        return defaultFontSize;
      }
      function remToPx(value, base) {
        var deconstructedValue = getValueAndUnit(value);
        if (deconstructedValue[1] !== "rem" && deconstructedValue[1] !== "") {
          throw new PolishedError(77, deconstructedValue[1]);
        }
        var newBase = base ? convertBase(base) : getBaseFromDoc();
        return deconstructedValue[0] * newBase + "px";
      }
      var functionsMap$3 = {
        back: "cubic-bezier(0.600, -0.280, 0.735, 0.045)",
        circ: "cubic-bezier(0.600,  0.040, 0.980, 0.335)",
        cubic: "cubic-bezier(0.550,  0.055, 0.675, 0.190)",
        expo: "cubic-bezier(0.950,  0.050, 0.795, 0.035)",
        quad: "cubic-bezier(0.550,  0.085, 0.680, 0.530)",
        quart: "cubic-bezier(0.895,  0.030, 0.685, 0.220)",
        quint: "cubic-bezier(0.755,  0.050, 0.855, 0.060)",
        sine: "cubic-bezier(0.470,  0.000, 0.745, 0.715)"
      };
      function easeIn(functionName) {
        return functionsMap$3[functionName.toLowerCase().trim()];
      }
      var functionsMap$2 = {
        back: "cubic-bezier(0.680, -0.550, 0.265, 1.550)",
        circ: "cubic-bezier(0.785,  0.135, 0.150, 0.860)",
        cubic: "cubic-bezier(0.645,  0.045, 0.355, 1.000)",
        expo: "cubic-bezier(1.000,  0.000, 0.000, 1.000)",
        quad: "cubic-bezier(0.455,  0.030, 0.515, 0.955)",
        quart: "cubic-bezier(0.770,  0.000, 0.175, 1.000)",
        quint: "cubic-bezier(0.860,  0.000, 0.070, 1.000)",
        sine: "cubic-bezier(0.445,  0.050, 0.550, 0.950)"
      };
      function easeInOut(functionName) {
        return functionsMap$2[functionName.toLowerCase().trim()];
      }
      var functionsMap$1 = {
        back: "cubic-bezier(0.175,  0.885, 0.320, 1.275)",
        cubic: "cubic-bezier(0.215,  0.610, 0.355, 1.000)",
        circ: "cubic-bezier(0.075,  0.820, 0.165, 1.000)",
        expo: "cubic-bezier(0.190,  1.000, 0.220, 1.000)",
        quad: "cubic-bezier(0.250,  0.460, 0.450, 0.940)",
        quart: "cubic-bezier(0.165,  0.840, 0.440, 1.000)",
        quint: "cubic-bezier(0.230,  1.000, 0.320, 1.000)",
        sine: "cubic-bezier(0.390,  0.575, 0.565, 1.000)"
      };
      function easeOut(functionName) {
        return functionsMap$1[functionName.toLowerCase().trim()];
      }
      function between(fromSize, toSize, minScreen, maxScreen) {
        if (minScreen === void 0) {
          minScreen = "320px";
        }
        if (maxScreen === void 0) {
          maxScreen = "1200px";
        }
        var _getValueAndUnit = getValueAndUnit(fromSize), unitlessFromSize = _getValueAndUnit[0], fromSizeUnit = _getValueAndUnit[1];
        var _getValueAndUnit2 = getValueAndUnit(toSize), unitlessToSize = _getValueAndUnit2[0], toSizeUnit = _getValueAndUnit2[1];
        var _getValueAndUnit3 = getValueAndUnit(minScreen), unitlessMinScreen = _getValueAndUnit3[0], minScreenUnit = _getValueAndUnit3[1];
        var _getValueAndUnit4 = getValueAndUnit(maxScreen), unitlessMaxScreen = _getValueAndUnit4[0], maxScreenUnit = _getValueAndUnit4[1];
        if (typeof unitlessMinScreen !== "number" || typeof unitlessMaxScreen !== "number" || !minScreenUnit || !maxScreenUnit || minScreenUnit !== maxScreenUnit) {
          throw new PolishedError(47);
        }
        if (typeof unitlessFromSize !== "number" || typeof unitlessToSize !== "number" || fromSizeUnit !== toSizeUnit) {
          throw new PolishedError(48);
        }
        if (fromSizeUnit !== minScreenUnit || toSizeUnit !== maxScreenUnit) {
          throw new PolishedError(76);
        }
        var slope = (unitlessFromSize - unitlessToSize) / (unitlessMinScreen - unitlessMaxScreen);
        var base = unitlessToSize - slope * unitlessMaxScreen;
        return "calc(" + base.toFixed(2) + (fromSizeUnit || "") + " + " + (100 * slope).toFixed(2) + "vw)";
      }
      function clearFix(parent) {
        var _ref;
        if (parent === void 0) {
          parent = "&";
        }
        var pseudoSelector = parent + "::after";
        return _ref = {}, _ref[pseudoSelector] = {
          clear: "both",
          content: '""',
          display: "table"
        }, _ref;
      }
      function cover(offset) {
        if (offset === void 0) {
          offset = 0;
        }
        return {
          position: "absolute",
          top: offset,
          right: offset,
          bottom: offset,
          left: offset
        };
      }
      function ellipsis(width, lines) {
        if (lines === void 0) {
          lines = 1;
        }
        var styles = {
          display: "inline-block",
          maxWidth: width || "100%",
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap",
          wordWrap: "normal"
        };
        return lines > 1 ? _extends__default["default"]({}, styles, {
          WebkitBoxOrient: "vertical",
          WebkitLineClamp: lines,
          display: "-webkit-box",
          whiteSpace: "normal"
        }) : styles;
      }
      function _createForOfIteratorHelperLoose(o, allowArrayLike) {
        var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
        if (it)
          return (it = it.call(o)).next.bind(it);
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          return function() {
            if (i >= o.length)
              return {done: true};
            return {done: false, value: o[i++]};
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      function fluidRange(cssProp, minScreen, maxScreen) {
        if (minScreen === void 0) {
          minScreen = "320px";
        }
        if (maxScreen === void 0) {
          maxScreen = "1200px";
        }
        if (!Array.isArray(cssProp) && typeof cssProp !== "object" || cssProp === null) {
          throw new PolishedError(49);
        }
        if (Array.isArray(cssProp)) {
          var mediaQueries = {};
          var fallbacks = {};
          for (var _iterator = _createForOfIteratorHelperLoose(cssProp), _step; !(_step = _iterator()).done; ) {
            var _extends2, _extends3;
            var obj = _step.value;
            if (!obj.prop || !obj.fromSize || !obj.toSize) {
              throw new PolishedError(50);
            }
            fallbacks[obj.prop] = obj.fromSize;
            mediaQueries["@media (min-width: " + minScreen + ")"] = _extends__default["default"]({}, mediaQueries["@media (min-width: " + minScreen + ")"], (_extends2 = {}, _extends2[obj.prop] = between(obj.fromSize, obj.toSize, minScreen, maxScreen), _extends2));
            mediaQueries["@media (min-width: " + maxScreen + ")"] = _extends__default["default"]({}, mediaQueries["@media (min-width: " + maxScreen + ")"], (_extends3 = {}, _extends3[obj.prop] = obj.toSize, _extends3));
          }
          return _extends__default["default"]({}, fallbacks, mediaQueries);
        } else {
          var _ref, _ref2, _ref3;
          if (!cssProp.prop || !cssProp.fromSize || !cssProp.toSize) {
            throw new PolishedError(51);
          }
          return _ref3 = {}, _ref3[cssProp.prop] = cssProp.fromSize, _ref3["@media (min-width: " + minScreen + ")"] = (_ref = {}, _ref[cssProp.prop] = between(cssProp.fromSize, cssProp.toSize, minScreen, maxScreen), _ref), _ref3["@media (min-width: " + maxScreen + ")"] = (_ref2 = {}, _ref2[cssProp.prop] = cssProp.toSize, _ref2), _ref3;
        }
      }
      var dataURIRegex = /^\s*data:([a-z]+\/[a-z-]+(;[a-z-]+=[a-z-]+)?)?(;charset=[a-z0-9-]+)?(;base64)?,[a-z0-9!$&',()*+,;=\-._~:@/?%\s]*\s*$/i;
      var formatHintMap = {
        woff: "woff",
        woff2: "woff2",
        ttf: "truetype",
        otf: "opentype",
        eot: "embedded-opentype",
        svg: "svg",
        svgz: "svg"
      };
      function generateFormatHint(format2, formatHint) {
        if (!formatHint)
          return "";
        return ' format("' + formatHintMap[format2] + '")';
      }
      function isDataURI(fontFilePath) {
        return !!fontFilePath.replace(/\s+/g, " ").match(dataURIRegex);
      }
      function generateFileReferences(fontFilePath, fileFormats, formatHint) {
        if (isDataURI(fontFilePath)) {
          return 'url("' + fontFilePath + '")' + generateFormatHint(fileFormats[0], formatHint);
        }
        var fileFontReferences = fileFormats.map(function(format2) {
          return 'url("' + fontFilePath + "." + format2 + '")' + generateFormatHint(format2, formatHint);
        });
        return fileFontReferences.join(", ");
      }
      function generateLocalReferences(localFonts) {
        var localFontReferences = localFonts.map(function(font) {
          return 'local("' + font + '")';
        });
        return localFontReferences.join(", ");
      }
      function generateSources(fontFilePath, localFonts, fileFormats, formatHint) {
        var fontReferences = [];
        if (localFonts)
          fontReferences.push(generateLocalReferences(localFonts));
        if (fontFilePath) {
          fontReferences.push(generateFileReferences(fontFilePath, fileFormats, formatHint));
        }
        return fontReferences.join(", ");
      }
      function fontFace(_ref) {
        var fontFamily = _ref.fontFamily, fontFilePath = _ref.fontFilePath, fontStretch = _ref.fontStretch, fontStyle = _ref.fontStyle, fontVariant = _ref.fontVariant, fontWeight = _ref.fontWeight, _ref$fileFormats = _ref.fileFormats, fileFormats = _ref$fileFormats === void 0 ? ["eot", "woff2", "woff", "ttf", "svg"] : _ref$fileFormats, _ref$formatHint = _ref.formatHint, formatHint = _ref$formatHint === void 0 ? false : _ref$formatHint, _ref$localFonts = _ref.localFonts, localFonts = _ref$localFonts === void 0 ? [fontFamily] : _ref$localFonts, unicodeRange = _ref.unicodeRange, fontDisplay = _ref.fontDisplay, fontVariationSettings = _ref.fontVariationSettings, fontFeatureSettings = _ref.fontFeatureSettings;
        if (!fontFamily)
          throw new PolishedError(55);
        if (!fontFilePath && !localFonts) {
          throw new PolishedError(52);
        }
        if (localFonts && !Array.isArray(localFonts)) {
          throw new PolishedError(53);
        }
        if (!Array.isArray(fileFormats)) {
          throw new PolishedError(54);
        }
        var fontFaceDeclaration = {
          "@font-face": {
            fontFamily,
            src: generateSources(fontFilePath, localFonts, fileFormats, formatHint),
            unicodeRange,
            fontStretch,
            fontStyle,
            fontVariant,
            fontWeight,
            fontDisplay,
            fontVariationSettings,
            fontFeatureSettings
          }
        };
        return JSON.parse(JSON.stringify(fontFaceDeclaration));
      }
      function hideText() {
        return {
          textIndent: "101%",
          overflow: "hidden",
          whiteSpace: "nowrap"
        };
      }
      function hideVisually() {
        return {
          border: "0",
          clip: "rect(0 0 0 0)",
          height: "1px",
          margin: "-1px",
          overflow: "hidden",
          padding: "0",
          position: "absolute",
          whiteSpace: "nowrap",
          width: "1px"
        };
      }
      function hiDPI(ratio) {
        if (ratio === void 0) {
          ratio = 1.3;
        }
        return "\n    @media only screen and (-webkit-min-device-pixel-ratio: " + ratio + "),\n    only screen and (min--moz-device-pixel-ratio: " + ratio + "),\n    only screen and (-o-min-device-pixel-ratio: " + ratio + "/1),\n    only screen and (min-resolution: " + Math.round(ratio * 96) + "dpi),\n    only screen and (min-resolution: " + ratio + "dppx)\n  ";
      }
      function constructGradientValue(literals) {
        var template2 = "";
        for (var _len = arguments.length, substitutions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          substitutions[_key - 1] = arguments[_key];
        }
        for (var i = 0; i < literals.length; i += 1) {
          template2 += literals[i];
          if (i === substitutions.length - 1 && substitutions[i]) {
            var definedValues = substitutions.filter(function(substitute) {
              return !!substitute;
            });
            if (definedValues.length > 1) {
              template2 = template2.slice(0, -1);
              template2 += ", " + substitutions[i];
            } else if (definedValues.length === 1) {
              template2 += "" + substitutions[i];
            }
          } else if (substitutions[i]) {
            template2 += substitutions[i] + " ";
          }
        }
        return template2.trim();
      }
      var _templateObject$1;
      function linearGradient(_ref) {
        var colorStops = _ref.colorStops, fallback = _ref.fallback, _ref$toDirection = _ref.toDirection, toDirection = _ref$toDirection === void 0 ? "" : _ref$toDirection;
        if (!colorStops || colorStops.length < 2) {
          throw new PolishedError(56);
        }
        return {
          backgroundColor: fallback || colorStops[0].replace(/,\s+/g, ",").split(" ")[0].replace(/,(?=\S)/g, ", "),
          backgroundImage: constructGradientValue(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteralLoose__default["default"](["linear-gradient(", "", ")"])), toDirection, colorStops.join(", ").replace(/,(?=\S)/g, ", "))
        };
      }
      function normalize() {
        var _ref;
        return [(_ref = {
          html: {
            lineHeight: "1.15",
            textSizeAdjust: "100%"
          },
          body: {
            margin: "0"
          },
          main: {
            display: "block"
          },
          h1: {
            fontSize: "2em",
            margin: "0.67em 0"
          },
          hr: {
            boxSizing: "content-box",
            height: "0",
            overflow: "visible"
          },
          pre: {
            fontFamily: "monospace, monospace",
            fontSize: "1em"
          },
          a: {
            backgroundColor: "transparent"
          },
          "abbr[title]": {
            borderBottom: "none",
            textDecoration: "underline"
          }
        }, _ref["b,\n    strong"] = {
          fontWeight: "bolder"
        }, _ref["code,\n    kbd,\n    samp"] = {
          fontFamily: "monospace, monospace",
          fontSize: "1em"
        }, _ref.small = {
          fontSize: "80%"
        }, _ref["sub,\n    sup"] = {
          fontSize: "75%",
          lineHeight: "0",
          position: "relative",
          verticalAlign: "baseline"
        }, _ref.sub = {
          bottom: "-0.25em"
        }, _ref.sup = {
          top: "-0.5em"
        }, _ref.img = {
          borderStyle: "none"
        }, _ref["button,\n    input,\n    optgroup,\n    select,\n    textarea"] = {
          fontFamily: "inherit",
          fontSize: "100%",
          lineHeight: "1.15",
          margin: "0"
        }, _ref["button,\n    input"] = {
          overflow: "visible"
        }, _ref["button,\n    select"] = {
          textTransform: "none"
        }, _ref['button,\n    html [type="button"],\n    [type="reset"],\n    [type="submit"]'] = {
          WebkitAppearance: "button"
        }, _ref['button::-moz-focus-inner,\n    [type="button"]::-moz-focus-inner,\n    [type="reset"]::-moz-focus-inner,\n    [type="submit"]::-moz-focus-inner'] = {
          borderStyle: "none",
          padding: "0"
        }, _ref['button:-moz-focusring,\n    [type="button"]:-moz-focusring,\n    [type="reset"]:-moz-focusring,\n    [type="submit"]:-moz-focusring'] = {
          outline: "1px dotted ButtonText"
        }, _ref.fieldset = {
          padding: "0.35em 0.625em 0.75em"
        }, _ref.legend = {
          boxSizing: "border-box",
          color: "inherit",
          display: "table",
          maxWidth: "100%",
          padding: "0",
          whiteSpace: "normal"
        }, _ref.progress = {
          verticalAlign: "baseline"
        }, _ref.textarea = {
          overflow: "auto"
        }, _ref['[type="checkbox"],\n    [type="radio"]'] = {
          boxSizing: "border-box",
          padding: "0"
        }, _ref['[type="number"]::-webkit-inner-spin-button,\n    [type="number"]::-webkit-outer-spin-button'] = {
          height: "auto"
        }, _ref['[type="search"]'] = {
          WebkitAppearance: "textfield",
          outlineOffset: "-2px"
        }, _ref['[type="search"]::-webkit-search-decoration'] = {
          WebkitAppearance: "none"
        }, _ref["::-webkit-file-upload-button"] = {
          WebkitAppearance: "button",
          font: "inherit"
        }, _ref.details = {
          display: "block"
        }, _ref.summary = {
          display: "list-item"
        }, _ref.template = {
          display: "none"
        }, _ref["[hidden]"] = {
          display: "none"
        }, _ref), {
          "abbr[title]": {
            textDecoration: "underline dotted"
          }
        }];
      }
      var _templateObject;
      function radialGradient(_ref) {
        var colorStops = _ref.colorStops, _ref$extent = _ref.extent, extent = _ref$extent === void 0 ? "" : _ref$extent, fallback = _ref.fallback, _ref$position = _ref.position, position2 = _ref$position === void 0 ? "" : _ref$position, _ref$shape = _ref.shape, shape = _ref$shape === void 0 ? "" : _ref$shape;
        if (!colorStops || colorStops.length < 2) {
          throw new PolishedError(57);
        }
        return {
          backgroundColor: fallback || colorStops[0].split(" ")[0],
          backgroundImage: constructGradientValue(_templateObject || (_templateObject = _taggedTemplateLiteralLoose__default["default"](["radial-gradient(", "", "", "", ")"])), position2, shape, extent, colorStops.join(", "))
        };
      }
      function retinaImage(filename, backgroundSize, extension, retinaFilename, retinaSuffix) {
        var _ref;
        if (extension === void 0) {
          extension = "png";
        }
        if (retinaSuffix === void 0) {
          retinaSuffix = "_2x";
        }
        if (!filename) {
          throw new PolishedError(58);
        }
        var ext = extension.replace(/^\./, "");
        var rFilename = retinaFilename ? retinaFilename + "." + ext : "" + filename + retinaSuffix + "." + ext;
        return _ref = {
          backgroundImage: "url(" + filename + "." + ext + ")"
        }, _ref[hiDPI()] = _extends__default["default"]({
          backgroundImage: "url(" + rFilename + ")"
        }, backgroundSize ? {
          backgroundSize
        } : {}), _ref;
      }
      var functionsMap = {
        easeInBack: "cubic-bezier(0.600, -0.280, 0.735, 0.045)",
        easeInCirc: "cubic-bezier(0.600,  0.040, 0.980, 0.335)",
        easeInCubic: "cubic-bezier(0.550,  0.055, 0.675, 0.190)",
        easeInExpo: "cubic-bezier(0.950,  0.050, 0.795, 0.035)",
        easeInQuad: "cubic-bezier(0.550,  0.085, 0.680, 0.530)",
        easeInQuart: "cubic-bezier(0.895,  0.030, 0.685, 0.220)",
        easeInQuint: "cubic-bezier(0.755,  0.050, 0.855, 0.060)",
        easeInSine: "cubic-bezier(0.470,  0.000, 0.745, 0.715)",
        easeOutBack: "cubic-bezier(0.175,  0.885, 0.320, 1.275)",
        easeOutCubic: "cubic-bezier(0.215,  0.610, 0.355, 1.000)",
        easeOutCirc: "cubic-bezier(0.075,  0.820, 0.165, 1.000)",
        easeOutExpo: "cubic-bezier(0.190,  1.000, 0.220, 1.000)",
        easeOutQuad: "cubic-bezier(0.250,  0.460, 0.450, 0.940)",
        easeOutQuart: "cubic-bezier(0.165,  0.840, 0.440, 1.000)",
        easeOutQuint: "cubic-bezier(0.230,  1.000, 0.320, 1.000)",
        easeOutSine: "cubic-bezier(0.390,  0.575, 0.565, 1.000)",
        easeInOutBack: "cubic-bezier(0.680, -0.550, 0.265, 1.550)",
        easeInOutCirc: "cubic-bezier(0.785,  0.135, 0.150, 0.860)",
        easeInOutCubic: "cubic-bezier(0.645,  0.045, 0.355, 1.000)",
        easeInOutExpo: "cubic-bezier(1.000,  0.000, 0.000, 1.000)",
        easeInOutQuad: "cubic-bezier(0.455,  0.030, 0.515, 0.955)",
        easeInOutQuart: "cubic-bezier(0.770,  0.000, 0.175, 1.000)",
        easeInOutQuint: "cubic-bezier(0.860,  0.000, 0.070, 1.000)",
        easeInOutSine: "cubic-bezier(0.445,  0.050, 0.550, 0.950)"
      };
      function getTimingFunction(functionName) {
        return functionsMap[functionName];
      }
      function timingFunctions(timingFunction) {
        return getTimingFunction(timingFunction);
      }
      var getBorderWidth = function getBorderWidth2(pointingDirection, height, width) {
        var fullWidth = "" + width[0] + (width[1] || "");
        var halfWidth = "" + width[0] / 2 + (width[1] || "");
        var fullHeight = "" + height[0] + (height[1] || "");
        var halfHeight = "" + height[0] / 2 + (height[1] || "");
        switch (pointingDirection) {
          case "top":
            return "0 " + halfWidth + " " + fullHeight + " " + halfWidth;
          case "topLeft":
            return fullWidth + " " + fullHeight + " 0 0";
          case "left":
            return halfHeight + " " + fullWidth + " " + halfHeight + " 0";
          case "bottomLeft":
            return fullWidth + " 0 0 " + fullHeight;
          case "bottom":
            return fullHeight + " " + halfWidth + " 0 " + halfWidth;
          case "bottomRight":
            return "0 0 " + fullWidth + " " + fullHeight;
          case "right":
            return halfHeight + " 0 " + halfHeight + " " + fullWidth;
          case "topRight":
          default:
            return "0 " + fullWidth + " " + fullHeight + " 0";
        }
      };
      var getBorderColor = function getBorderColor2(pointingDirection, foregroundColor) {
        switch (pointingDirection) {
          case "top":
          case "bottomRight":
            return {
              borderBottomColor: foregroundColor
            };
          case "right":
          case "bottomLeft":
            return {
              borderLeftColor: foregroundColor
            };
          case "bottom":
          case "topLeft":
            return {
              borderTopColor: foregroundColor
            };
          case "left":
          case "topRight":
            return {
              borderRightColor: foregroundColor
            };
          default:
            throw new PolishedError(59);
        }
      };
      function triangle(_ref) {
        var pointingDirection = _ref.pointingDirection, height = _ref.height, width = _ref.width, foregroundColor = _ref.foregroundColor, _ref$backgroundColor = _ref.backgroundColor, backgroundColor = _ref$backgroundColor === void 0 ? "transparent" : _ref$backgroundColor;
        var widthAndUnit = getValueAndUnit(width);
        var heightAndUnit = getValueAndUnit(height);
        if (isNaN(heightAndUnit[0]) || isNaN(widthAndUnit[0])) {
          throw new PolishedError(60);
        }
        return _extends__default["default"]({
          width: "0",
          height: "0",
          borderColor: backgroundColor
        }, getBorderColor(pointingDirection, foregroundColor), {
          borderStyle: "solid",
          borderWidth: getBorderWidth(pointingDirection, heightAndUnit, widthAndUnit)
        });
      }
      function wordWrap(wrap) {
        if (wrap === void 0) {
          wrap = "break-word";
        }
        var wordBreak = wrap === "break-word" ? "break-all" : wrap;
        return {
          overflowWrap: wrap,
          wordWrap: wrap,
          wordBreak
        };
      }
      function colorToInt(color) {
        return Math.round(color * 255);
      }
      function convertToInt(red, green, blue) {
        return colorToInt(red) + "," + colorToInt(green) + "," + colorToInt(blue);
      }
      function hslToRgb(hue, saturation, lightness, convert) {
        if (convert === void 0) {
          convert = convertToInt;
        }
        if (saturation === 0) {
          return convert(lightness, lightness, lightness);
        }
        var huePrime = (hue % 360 + 360) % 360 / 60;
        var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
        var secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));
        var red = 0;
        var green = 0;
        var blue = 0;
        if (huePrime >= 0 && huePrime < 1) {
          red = chroma;
          green = secondComponent;
        } else if (huePrime >= 1 && huePrime < 2) {
          red = secondComponent;
          green = chroma;
        } else if (huePrime >= 2 && huePrime < 3) {
          green = chroma;
          blue = secondComponent;
        } else if (huePrime >= 3 && huePrime < 4) {
          green = secondComponent;
          blue = chroma;
        } else if (huePrime >= 4 && huePrime < 5) {
          red = secondComponent;
          blue = chroma;
        } else if (huePrime >= 5 && huePrime < 6) {
          red = chroma;
          blue = secondComponent;
        }
        var lightnessModification = lightness - chroma / 2;
        var finalRed = red + lightnessModification;
        var finalGreen = green + lightnessModification;
        var finalBlue = blue + lightnessModification;
        return convert(finalRed, finalGreen, finalBlue);
      }
      var namedColorMap = {
        aliceblue: "f0f8ff",
        antiquewhite: "faebd7",
        aqua: "00ffff",
        aquamarine: "7fffd4",
        azure: "f0ffff",
        beige: "f5f5dc",
        bisque: "ffe4c4",
        black: "000",
        blanchedalmond: "ffebcd",
        blue: "0000ff",
        blueviolet: "8a2be2",
        brown: "a52a2a",
        burlywood: "deb887",
        cadetblue: "5f9ea0",
        chartreuse: "7fff00",
        chocolate: "d2691e",
        coral: "ff7f50",
        cornflowerblue: "6495ed",
        cornsilk: "fff8dc",
        crimson: "dc143c",
        cyan: "00ffff",
        darkblue: "00008b",
        darkcyan: "008b8b",
        darkgoldenrod: "b8860b",
        darkgray: "a9a9a9",
        darkgreen: "006400",
        darkgrey: "a9a9a9",
        darkkhaki: "bdb76b",
        darkmagenta: "8b008b",
        darkolivegreen: "556b2f",
        darkorange: "ff8c00",
        darkorchid: "9932cc",
        darkred: "8b0000",
        darksalmon: "e9967a",
        darkseagreen: "8fbc8f",
        darkslateblue: "483d8b",
        darkslategray: "2f4f4f",
        darkslategrey: "2f4f4f",
        darkturquoise: "00ced1",
        darkviolet: "9400d3",
        deeppink: "ff1493",
        deepskyblue: "00bfff",
        dimgray: "696969",
        dimgrey: "696969",
        dodgerblue: "1e90ff",
        firebrick: "b22222",
        floralwhite: "fffaf0",
        forestgreen: "228b22",
        fuchsia: "ff00ff",
        gainsboro: "dcdcdc",
        ghostwhite: "f8f8ff",
        gold: "ffd700",
        goldenrod: "daa520",
        gray: "808080",
        green: "008000",
        greenyellow: "adff2f",
        grey: "808080",
        honeydew: "f0fff0",
        hotpink: "ff69b4",
        indianred: "cd5c5c",
        indigo: "4b0082",
        ivory: "fffff0",
        khaki: "f0e68c",
        lavender: "e6e6fa",
        lavenderblush: "fff0f5",
        lawngreen: "7cfc00",
        lemonchiffon: "fffacd",
        lightblue: "add8e6",
        lightcoral: "f08080",
        lightcyan: "e0ffff",
        lightgoldenrodyellow: "fafad2",
        lightgray: "d3d3d3",
        lightgreen: "90ee90",
        lightgrey: "d3d3d3",
        lightpink: "ffb6c1",
        lightsalmon: "ffa07a",
        lightseagreen: "20b2aa",
        lightskyblue: "87cefa",
        lightslategray: "789",
        lightslategrey: "789",
        lightsteelblue: "b0c4de",
        lightyellow: "ffffe0",
        lime: "0f0",
        limegreen: "32cd32",
        linen: "faf0e6",
        magenta: "f0f",
        maroon: "800000",
        mediumaquamarine: "66cdaa",
        mediumblue: "0000cd",
        mediumorchid: "ba55d3",
        mediumpurple: "9370db",
        mediumseagreen: "3cb371",
        mediumslateblue: "7b68ee",
        mediumspringgreen: "00fa9a",
        mediumturquoise: "48d1cc",
        mediumvioletred: "c71585",
        midnightblue: "191970",
        mintcream: "f5fffa",
        mistyrose: "ffe4e1",
        moccasin: "ffe4b5",
        navajowhite: "ffdead",
        navy: "000080",
        oldlace: "fdf5e6",
        olive: "808000",
        olivedrab: "6b8e23",
        orange: "ffa500",
        orangered: "ff4500",
        orchid: "da70d6",
        palegoldenrod: "eee8aa",
        palegreen: "98fb98",
        paleturquoise: "afeeee",
        palevioletred: "db7093",
        papayawhip: "ffefd5",
        peachpuff: "ffdab9",
        peru: "cd853f",
        pink: "ffc0cb",
        plum: "dda0dd",
        powderblue: "b0e0e6",
        purple: "800080",
        rebeccapurple: "639",
        red: "f00",
        rosybrown: "bc8f8f",
        royalblue: "4169e1",
        saddlebrown: "8b4513",
        salmon: "fa8072",
        sandybrown: "f4a460",
        seagreen: "2e8b57",
        seashell: "fff5ee",
        sienna: "a0522d",
        silver: "c0c0c0",
        skyblue: "87ceeb",
        slateblue: "6a5acd",
        slategray: "708090",
        slategrey: "708090",
        snow: "fffafa",
        springgreen: "00ff7f",
        steelblue: "4682b4",
        tan: "d2b48c",
        teal: "008080",
        thistle: "d8bfd8",
        tomato: "ff6347",
        turquoise: "40e0d0",
        violet: "ee82ee",
        wheat: "f5deb3",
        white: "fff",
        whitesmoke: "f5f5f5",
        yellow: "ff0",
        yellowgreen: "9acd32"
      };
      function nameToHex(color) {
        if (typeof color !== "string")
          return color;
        var normalizedColorName = color.toLowerCase();
        return namedColorMap[normalizedColorName] ? "#" + namedColorMap[normalizedColorName] : color;
      }
      var hexRegex = /^#[a-fA-F0-9]{6}$/;
      var hexRgbaRegex = /^#[a-fA-F0-9]{8}$/;
      var reducedHexRegex = /^#[a-fA-F0-9]{3}$/;
      var reducedRgbaHexRegex = /^#[a-fA-F0-9]{4}$/;
      var rgbRegex = /^rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$/i;
      var rgbaRegex = /^rgba\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*([-+]?[0-9]*[.]?[0-9]+)\s*\)$/i;
      var hslRegex = /^hsl\(\s*(\d{0,3}[.]?[0-9]+)\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*\)$/i;
      var hslaRegex = /^hsla\(\s*(\d{0,3}[.]?[0-9]+)\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*,\s*([-+]?[0-9]*[.]?[0-9]+)\s*\)$/i;
      function parseToRgb(color) {
        if (typeof color !== "string") {
          throw new PolishedError(3);
        }
        var normalizedColor = nameToHex(color);
        if (normalizedColor.match(hexRegex)) {
          return {
            red: parseInt("" + normalizedColor[1] + normalizedColor[2], 16),
            green: parseInt("" + normalizedColor[3] + normalizedColor[4], 16),
            blue: parseInt("" + normalizedColor[5] + normalizedColor[6], 16)
          };
        }
        if (normalizedColor.match(hexRgbaRegex)) {
          var alpha = parseFloat((parseInt("" + normalizedColor[7] + normalizedColor[8], 16) / 255).toFixed(2));
          return {
            red: parseInt("" + normalizedColor[1] + normalizedColor[2], 16),
            green: parseInt("" + normalizedColor[3] + normalizedColor[4], 16),
            blue: parseInt("" + normalizedColor[5] + normalizedColor[6], 16),
            alpha
          };
        }
        if (normalizedColor.match(reducedHexRegex)) {
          return {
            red: parseInt("" + normalizedColor[1] + normalizedColor[1], 16),
            green: parseInt("" + normalizedColor[2] + normalizedColor[2], 16),
            blue: parseInt("" + normalizedColor[3] + normalizedColor[3], 16)
          };
        }
        if (normalizedColor.match(reducedRgbaHexRegex)) {
          var _alpha = parseFloat((parseInt("" + normalizedColor[4] + normalizedColor[4], 16) / 255).toFixed(2));
          return {
            red: parseInt("" + normalizedColor[1] + normalizedColor[1], 16),
            green: parseInt("" + normalizedColor[2] + normalizedColor[2], 16),
            blue: parseInt("" + normalizedColor[3] + normalizedColor[3], 16),
            alpha: _alpha
          };
        }
        var rgbMatched = rgbRegex.exec(normalizedColor);
        if (rgbMatched) {
          return {
            red: parseInt("" + rgbMatched[1], 10),
            green: parseInt("" + rgbMatched[2], 10),
            blue: parseInt("" + rgbMatched[3], 10)
          };
        }
        var rgbaMatched = rgbaRegex.exec(normalizedColor.substring(0, 50));
        if (rgbaMatched) {
          return {
            red: parseInt("" + rgbaMatched[1], 10),
            green: parseInt("" + rgbaMatched[2], 10),
            blue: parseInt("" + rgbaMatched[3], 10),
            alpha: parseFloat("" + rgbaMatched[4])
          };
        }
        var hslMatched = hslRegex.exec(normalizedColor);
        if (hslMatched) {
          var hue = parseInt("" + hslMatched[1], 10);
          var saturation = parseInt("" + hslMatched[2], 10) / 100;
          var lightness = parseInt("" + hslMatched[3], 10) / 100;
          var rgbColorString = "rgb(" + hslToRgb(hue, saturation, lightness) + ")";
          var hslRgbMatched = rgbRegex.exec(rgbColorString);
          if (!hslRgbMatched) {
            throw new PolishedError(4, normalizedColor, rgbColorString);
          }
          return {
            red: parseInt("" + hslRgbMatched[1], 10),
            green: parseInt("" + hslRgbMatched[2], 10),
            blue: parseInt("" + hslRgbMatched[3], 10)
          };
        }
        var hslaMatched = hslaRegex.exec(normalizedColor.substring(0, 50));
        if (hslaMatched) {
          var _hue = parseInt("" + hslaMatched[1], 10);
          var _saturation = parseInt("" + hslaMatched[2], 10) / 100;
          var _lightness = parseInt("" + hslaMatched[3], 10) / 100;
          var _rgbColorString = "rgb(" + hslToRgb(_hue, _saturation, _lightness) + ")";
          var _hslRgbMatched = rgbRegex.exec(_rgbColorString);
          if (!_hslRgbMatched) {
            throw new PolishedError(4, normalizedColor, _rgbColorString);
          }
          return {
            red: parseInt("" + _hslRgbMatched[1], 10),
            green: parseInt("" + _hslRgbMatched[2], 10),
            blue: parseInt("" + _hslRgbMatched[3], 10),
            alpha: parseFloat("" + hslaMatched[4])
          };
        }
        throw new PolishedError(5);
      }
      function rgbToHsl(color) {
        var red = color.red / 255;
        var green = color.green / 255;
        var blue = color.blue / 255;
        var max2 = Math.max(red, green, blue);
        var min2 = Math.min(red, green, blue);
        var lightness = (max2 + min2) / 2;
        if (max2 === min2) {
          if (color.alpha !== void 0) {
            return {
              hue: 0,
              saturation: 0,
              lightness,
              alpha: color.alpha
            };
          } else {
            return {
              hue: 0,
              saturation: 0,
              lightness
            };
          }
        }
        var hue;
        var delta = max2 - min2;
        var saturation = lightness > 0.5 ? delta / (2 - max2 - min2) : delta / (max2 + min2);
        switch (max2) {
          case red:
            hue = (green - blue) / delta + (green < blue ? 6 : 0);
            break;
          case green:
            hue = (blue - red) / delta + 2;
            break;
          default:
            hue = (red - green) / delta + 4;
            break;
        }
        hue *= 60;
        if (color.alpha !== void 0) {
          return {
            hue,
            saturation,
            lightness,
            alpha: color.alpha
          };
        }
        return {
          hue,
          saturation,
          lightness
        };
      }
      function parseToHsl(color) {
        return rgbToHsl(parseToRgb(color));
      }
      var reduceHexValue = function reduceHexValue2(value) {
        if (value.length === 7 && value[1] === value[2] && value[3] === value[4] && value[5] === value[6]) {
          return "#" + value[1] + value[3] + value[5];
        }
        return value;
      };
      function numberToHex(value) {
        var hex = value.toString(16);
        return hex.length === 1 ? "0" + hex : hex;
      }
      function colorToHex(color) {
        return numberToHex(Math.round(color * 255));
      }
      function convertToHex(red, green, blue) {
        return reduceHexValue("#" + colorToHex(red) + colorToHex(green) + colorToHex(blue));
      }
      function hslToHex(hue, saturation, lightness) {
        return hslToRgb(hue, saturation, lightness, convertToHex);
      }
      function hsl(value, saturation, lightness) {
        if (typeof value === "number" && typeof saturation === "number" && typeof lightness === "number") {
          return hslToHex(value, saturation, lightness);
        } else if (typeof value === "object" && saturation === void 0 && lightness === void 0) {
          return hslToHex(value.hue, value.saturation, value.lightness);
        }
        throw new PolishedError(1);
      }
      function hsla(value, saturation, lightness, alpha) {
        if (typeof value === "number" && typeof saturation === "number" && typeof lightness === "number" && typeof alpha === "number") {
          return alpha >= 1 ? hslToHex(value, saturation, lightness) : "rgba(" + hslToRgb(value, saturation, lightness) + "," + alpha + ")";
        } else if (typeof value === "object" && saturation === void 0 && lightness === void 0 && alpha === void 0) {
          return value.alpha >= 1 ? hslToHex(value.hue, value.saturation, value.lightness) : "rgba(" + hslToRgb(value.hue, value.saturation, value.lightness) + "," + value.alpha + ")";
        }
        throw new PolishedError(2);
      }
      function rgb(value, green, blue) {
        if (typeof value === "number" && typeof green === "number" && typeof blue === "number") {
          return reduceHexValue("#" + numberToHex(value) + numberToHex(green) + numberToHex(blue));
        } else if (typeof value === "object" && green === void 0 && blue === void 0) {
          return reduceHexValue("#" + numberToHex(value.red) + numberToHex(value.green) + numberToHex(value.blue));
        }
        throw new PolishedError(6);
      }
      function rgba(firstValue, secondValue, thirdValue, fourthValue) {
        if (typeof firstValue === "string" && typeof secondValue === "number") {
          var rgbValue = parseToRgb(firstValue);
          return "rgba(" + rgbValue.red + "," + rgbValue.green + "," + rgbValue.blue + "," + secondValue + ")";
        } else if (typeof firstValue === "number" && typeof secondValue === "number" && typeof thirdValue === "number" && typeof fourthValue === "number") {
          return fourthValue >= 1 ? rgb(firstValue, secondValue, thirdValue) : "rgba(" + firstValue + "," + secondValue + "," + thirdValue + "," + fourthValue + ")";
        } else if (typeof firstValue === "object" && secondValue === void 0 && thirdValue === void 0 && fourthValue === void 0) {
          return firstValue.alpha >= 1 ? rgb(firstValue.red, firstValue.green, firstValue.blue) : "rgba(" + firstValue.red + "," + firstValue.green + "," + firstValue.blue + "," + firstValue.alpha + ")";
        }
        throw new PolishedError(7);
      }
      var isRgb = function isRgb2(color) {
        return typeof color.red === "number" && typeof color.green === "number" && typeof color.blue === "number" && (typeof color.alpha !== "number" || typeof color.alpha === "undefined");
      };
      var isRgba = function isRgba2(color) {
        return typeof color.red === "number" && typeof color.green === "number" && typeof color.blue === "number" && typeof color.alpha === "number";
      };
      var isHsl = function isHsl2(color) {
        return typeof color.hue === "number" && typeof color.saturation === "number" && typeof color.lightness === "number" && (typeof color.alpha !== "number" || typeof color.alpha === "undefined");
      };
      var isHsla = function isHsla2(color) {
        return typeof color.hue === "number" && typeof color.saturation === "number" && typeof color.lightness === "number" && typeof color.alpha === "number";
      };
      function toColorString(color) {
        if (typeof color !== "object")
          throw new PolishedError(8);
        if (isRgba(color))
          return rgba(color);
        if (isRgb(color))
          return rgb(color);
        if (isHsla(color))
          return hsla(color);
        if (isHsl(color))
          return hsl(color);
        throw new PolishedError(8);
      }
      function curried(f, length, acc) {
        return function fn() {
          var combined = acc.concat(Array.prototype.slice.call(arguments));
          return combined.length >= length ? f.apply(this, combined) : curried(f, length, combined);
        };
      }
      function curry(f) {
        return curried(f, f.length, []);
      }
      function adjustHue(degree, color) {
        if (color === "transparent")
          return color;
        var hslColor = parseToHsl(color);
        return toColorString(_extends__default["default"]({}, hslColor, {
          hue: hslColor.hue + parseFloat(degree)
        }));
      }
      var curriedAdjustHue = /* @__PURE__ */ curry(adjustHue);
      function complement(color) {
        if (color === "transparent")
          return color;
        var hslColor = parseToHsl(color);
        return toColorString(_extends__default["default"]({}, hslColor, {
          hue: (hslColor.hue + 180) % 360
        }));
      }
      function guard(lowerBoundary, upperBoundary, value) {
        return Math.max(lowerBoundary, Math.min(upperBoundary, value));
      }
      function darken(amount, color) {
        if (color === "transparent")
          return color;
        var hslColor = parseToHsl(color);
        return toColorString(_extends__default["default"]({}, hslColor, {
          lightness: guard(0, 1, hslColor.lightness - parseFloat(amount))
        }));
      }
      var curriedDarken = /* @__PURE__ */ curry(darken);
      function desaturate(amount, color) {
        if (color === "transparent")
          return color;
        var hslColor = parseToHsl(color);
        return toColorString(_extends__default["default"]({}, hslColor, {
          saturation: guard(0, 1, hslColor.saturation - parseFloat(amount))
        }));
      }
      var curriedDesaturate = /* @__PURE__ */ curry(desaturate);
      function getLuminance(color) {
        if (color === "transparent")
          return 0;
        var rgbColor = parseToRgb(color);
        var _Object$keys$map = Object.keys(rgbColor).map(function(key) {
          var channel = rgbColor[key] / 255;
          return channel <= 0.03928 ? channel / 12.92 : Math.pow((channel + 0.055) / 1.055, 2.4);
        }), r = _Object$keys$map[0], g = _Object$keys$map[1], b = _Object$keys$map[2];
        return parseFloat((0.2126 * r + 0.7152 * g + 0.0722 * b).toFixed(3));
      }
      function getContrast(color1, color2) {
        var luminance1 = getLuminance(color1);
        var luminance2 = getLuminance(color2);
        return parseFloat((luminance1 > luminance2 ? (luminance1 + 0.05) / (luminance2 + 0.05) : (luminance2 + 0.05) / (luminance1 + 0.05)).toFixed(2));
      }
      function grayscale(color) {
        if (color === "transparent")
          return color;
        return toColorString(_extends__default["default"]({}, parseToHsl(color), {
          saturation: 0
        }));
      }
      function hslToColorString(color) {
        if (typeof color === "object" && typeof color.hue === "number" && typeof color.saturation === "number" && typeof color.lightness === "number") {
          if (color.alpha && typeof color.alpha === "number") {
            return hsla({
              hue: color.hue,
              saturation: color.saturation,
              lightness: color.lightness,
              alpha: color.alpha
            });
          }
          return hsl({
            hue: color.hue,
            saturation: color.saturation,
            lightness: color.lightness
          });
        }
        throw new PolishedError(45);
      }
      function invert(color) {
        if (color === "transparent")
          return color;
        var value = parseToRgb(color);
        return toColorString(_extends__default["default"]({}, value, {
          red: 255 - value.red,
          green: 255 - value.green,
          blue: 255 - value.blue
        }));
      }
      function lighten(amount, color) {
        if (color === "transparent")
          return color;
        var hslColor = parseToHsl(color);
        return toColorString(_extends__default["default"]({}, hslColor, {
          lightness: guard(0, 1, hslColor.lightness + parseFloat(amount))
        }));
      }
      var curriedLighten = /* @__PURE__ */ curry(lighten);
      function meetsContrastGuidelines(color1, color2) {
        var contrastRatio = getContrast(color1, color2);
        return {
          AA: contrastRatio >= 4.5,
          AALarge: contrastRatio >= 3,
          AAA: contrastRatio >= 7,
          AAALarge: contrastRatio >= 4.5
        };
      }
      function mix(weight, color, otherColor) {
        if (color === "transparent")
          return otherColor;
        if (otherColor === "transparent")
          return color;
        if (weight === 0)
          return otherColor;
        var parsedColor1 = parseToRgb(color);
        var color1 = _extends__default["default"]({}, parsedColor1, {
          alpha: typeof parsedColor1.alpha === "number" ? parsedColor1.alpha : 1
        });
        var parsedColor2 = parseToRgb(otherColor);
        var color2 = _extends__default["default"]({}, parsedColor2, {
          alpha: typeof parsedColor2.alpha === "number" ? parsedColor2.alpha : 1
        });
        var alphaDelta = color1.alpha - color2.alpha;
        var x = parseFloat(weight) * 2 - 1;
        var y = x * alphaDelta === -1 ? x : x + alphaDelta;
        var z = 1 + x * alphaDelta;
        var weight1 = (y / z + 1) / 2;
        var weight2 = 1 - weight1;
        var mixedColor = {
          red: Math.floor(color1.red * weight1 + color2.red * weight2),
          green: Math.floor(color1.green * weight1 + color2.green * weight2),
          blue: Math.floor(color1.blue * weight1 + color2.blue * weight2),
          alpha: color1.alpha * (parseFloat(weight) / 1) + color2.alpha * (1 - parseFloat(weight) / 1)
        };
        return rgba(mixedColor);
      }
      var curriedMix = /* @__PURE__ */ curry(mix);
      function opacify(amount, color) {
        if (color === "transparent")
          return color;
        var parsedColor = parseToRgb(color);
        var alpha = typeof parsedColor.alpha === "number" ? parsedColor.alpha : 1;
        var colorWithAlpha = _extends__default["default"]({}, parsedColor, {
          alpha: guard(0, 1, (alpha * 100 + parseFloat(amount) * 100) / 100)
        });
        return rgba(colorWithAlpha);
      }
      var curriedOpacify = /* @__PURE__ */ curry(opacify);
      var defaultReturnIfLightColor = "#000";
      var defaultReturnIfDarkColor = "#fff";
      function readableColor(color, returnIfLightColor, returnIfDarkColor, strict) {
        if (returnIfLightColor === void 0) {
          returnIfLightColor = defaultReturnIfLightColor;
        }
        if (returnIfDarkColor === void 0) {
          returnIfDarkColor = defaultReturnIfDarkColor;
        }
        if (strict === void 0) {
          strict = true;
        }
        var isColorLight = getLuminance(color) > 0.179;
        var preferredReturnColor = isColorLight ? returnIfLightColor : returnIfDarkColor;
        if (!strict || getContrast(color, preferredReturnColor) >= 4.5) {
          return preferredReturnColor;
        }
        return isColorLight ? defaultReturnIfLightColor : defaultReturnIfDarkColor;
      }
      function rgbToColorString(color) {
        if (typeof color === "object" && typeof color.red === "number" && typeof color.green === "number" && typeof color.blue === "number") {
          if (typeof color.alpha === "number") {
            return rgba({
              red: color.red,
              green: color.green,
              blue: color.blue,
              alpha: color.alpha
            });
          }
          return rgb({
            red: color.red,
            green: color.green,
            blue: color.blue
          });
        }
        throw new PolishedError(46);
      }
      function saturate(amount, color) {
        if (color === "transparent")
          return color;
        var hslColor = parseToHsl(color);
        return toColorString(_extends__default["default"]({}, hslColor, {
          saturation: guard(0, 1, hslColor.saturation + parseFloat(amount))
        }));
      }
      var curriedSaturate = /* @__PURE__ */ curry(saturate);
      function setHue(hue, color) {
        if (color === "transparent")
          return color;
        return toColorString(_extends__default["default"]({}, parseToHsl(color), {
          hue: parseFloat(hue)
        }));
      }
      var curriedSetHue = /* @__PURE__ */ curry(setHue);
      function setLightness(lightness, color) {
        if (color === "transparent")
          return color;
        return toColorString(_extends__default["default"]({}, parseToHsl(color), {
          lightness: parseFloat(lightness)
        }));
      }
      var curriedSetLightness = /* @__PURE__ */ curry(setLightness);
      function setSaturation(saturation, color) {
        if (color === "transparent")
          return color;
        return toColorString(_extends__default["default"]({}, parseToHsl(color), {
          saturation: parseFloat(saturation)
        }));
      }
      var curriedSetSaturation = /* @__PURE__ */ curry(setSaturation);
      function shade(percentage, color) {
        if (color === "transparent")
          return color;
        return curriedMix(parseFloat(percentage), "rgb(0, 0, 0)", color);
      }
      var curriedShade = /* @__PURE__ */ curry(shade);
      function tint(percentage, color) {
        if (color === "transparent")
          return color;
        return curriedMix(parseFloat(percentage), "rgb(255, 255, 255)", color);
      }
      var curriedTint = /* @__PURE__ */ curry(tint);
      function transparentize(amount, color) {
        if (color === "transparent")
          return color;
        var parsedColor = parseToRgb(color);
        var alpha = typeof parsedColor.alpha === "number" ? parsedColor.alpha : 1;
        var colorWithAlpha = _extends__default["default"]({}, parsedColor, {
          alpha: guard(0, 1, +(alpha * 100 - parseFloat(amount) * 100).toFixed(2) / 100)
        });
        return rgba(colorWithAlpha);
      }
      var curriedTransparentize = /* @__PURE__ */ curry(transparentize);
      function animation() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var multiMode = Array.isArray(args[0]);
        if (!multiMode && args.length > 8) {
          throw new PolishedError(64);
        }
        var code = args.map(function(arg) {
          if (multiMode && !Array.isArray(arg) || !multiMode && Array.isArray(arg)) {
            throw new PolishedError(65);
          }
          if (Array.isArray(arg) && arg.length > 8) {
            throw new PolishedError(66);
          }
          return Array.isArray(arg) ? arg.join(" ") : arg;
        }).join(", ");
        return {
          animation: code
        };
      }
      function backgroundImages() {
        for (var _len = arguments.length, properties = new Array(_len), _key = 0; _key < _len; _key++) {
          properties[_key] = arguments[_key];
        }
        return {
          backgroundImage: properties.join(", ")
        };
      }
      function backgrounds() {
        for (var _len = arguments.length, properties = new Array(_len), _key = 0; _key < _len; _key++) {
          properties[_key] = arguments[_key];
        }
        return {
          background: properties.join(", ")
        };
      }
      var sideMap = ["top", "right", "bottom", "left"];
      function border(sideKeyword) {
        for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          values[_key - 1] = arguments[_key];
        }
        if (typeof sideKeyword === "string" && sideMap.indexOf(sideKeyword) >= 0) {
          var _ref;
          return _ref = {}, _ref["border" + capitalizeString(sideKeyword) + "Width"] = values[0], _ref["border" + capitalizeString(sideKeyword) + "Style"] = values[1], _ref["border" + capitalizeString(sideKeyword) + "Color"] = values[2], _ref;
        } else {
          values.unshift(sideKeyword);
          return {
            borderWidth: values[0],
            borderStyle: values[1],
            borderColor: values[2]
          };
        }
      }
      function borderColor() {
        for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
          values[_key] = arguments[_key];
        }
        return directionalProperty.apply(void 0, ["borderColor"].concat(values));
      }
      function borderRadius(side, radius) {
        var uppercaseSide = capitalizeString(side);
        if (!radius && radius !== 0) {
          throw new PolishedError(62);
        }
        if (uppercaseSide === "Top" || uppercaseSide === "Bottom") {
          var _ref;
          return _ref = {}, _ref["border" + uppercaseSide + "RightRadius"] = radius, _ref["border" + uppercaseSide + "LeftRadius"] = radius, _ref;
        }
        if (uppercaseSide === "Left" || uppercaseSide === "Right") {
          var _ref2;
          return _ref2 = {}, _ref2["borderTop" + uppercaseSide + "Radius"] = radius, _ref2["borderBottom" + uppercaseSide + "Radius"] = radius, _ref2;
        }
        throw new PolishedError(63);
      }
      function borderStyle() {
        for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
          values[_key] = arguments[_key];
        }
        return directionalProperty.apply(void 0, ["borderStyle"].concat(values));
      }
      function borderWidth() {
        for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
          values[_key] = arguments[_key];
        }
        return directionalProperty.apply(void 0, ["borderWidth"].concat(values));
      }
      function generateSelectors(template2, state) {
        var stateSuffix = state ? ":" + state : "";
        return template2(stateSuffix);
      }
      function statefulSelectors(states, template2, stateMap2) {
        if (!template2)
          throw new PolishedError(67);
        if (states.length === 0)
          return generateSelectors(template2, null);
        var selectors = [];
        for (var i = 0; i < states.length; i += 1) {
          if (stateMap2 && stateMap2.indexOf(states[i]) < 0) {
            throw new PolishedError(68);
          }
          selectors.push(generateSelectors(template2, states[i]));
        }
        selectors = selectors.join(",");
        return selectors;
      }
      var stateMap$1 = [void 0, null, "active", "focus", "hover"];
      function template$1(state) {
        return "button" + state + ',\n  input[type="button"]' + state + ',\n  input[type="reset"]' + state + ',\n  input[type="submit"]' + state;
      }
      function buttons() {
        for (var _len = arguments.length, states = new Array(_len), _key = 0; _key < _len; _key++) {
          states[_key] = arguments[_key];
        }
        return statefulSelectors(states, template$1, stateMap$1);
      }
      function margin() {
        for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
          values[_key] = arguments[_key];
        }
        return directionalProperty.apply(void 0, ["margin"].concat(values));
      }
      function padding() {
        for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
          values[_key] = arguments[_key];
        }
        return directionalProperty.apply(void 0, ["padding"].concat(values));
      }
      var positionMap = ["absolute", "fixed", "relative", "static", "sticky"];
      function position(firstValue) {
        for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          values[_key - 1] = arguments[_key];
        }
        if (positionMap.indexOf(firstValue) >= 0 && firstValue) {
          return _extends__default["default"]({}, directionalProperty.apply(void 0, [""].concat(values)), {
            position: firstValue
          });
        } else {
          return directionalProperty.apply(void 0, ["", firstValue].concat(values));
        }
      }
      function size(height, width) {
        if (width === void 0) {
          width = height;
        }
        return {
          height,
          width
        };
      }
      var stateMap = [void 0, null, "active", "focus", "hover"];
      function template(state) {
        return 'input[type="color"]' + state + ',\n    input[type="date"]' + state + ',\n    input[type="datetime"]' + state + ',\n    input[type="datetime-local"]' + state + ',\n    input[type="email"]' + state + ',\n    input[type="month"]' + state + ',\n    input[type="number"]' + state + ',\n    input[type="password"]' + state + ',\n    input[type="search"]' + state + ',\n    input[type="tel"]' + state + ',\n    input[type="text"]' + state + ',\n    input[type="time"]' + state + ',\n    input[type="url"]' + state + ',\n    input[type="week"]' + state + ",\n    input:not([type])" + state + ",\n    textarea" + state;
      }
      function textInputs() {
        for (var _len = arguments.length, states = new Array(_len), _key = 0; _key < _len; _key++) {
          states[_key] = arguments[_key];
        }
        return statefulSelectors(states, template, stateMap);
      }
      function transitions() {
        for (var _len = arguments.length, properties = new Array(_len), _key = 0; _key < _len; _key++) {
          properties[_key] = arguments[_key];
        }
        if (Array.isArray(properties[0]) && properties.length === 2) {
          var value = properties[1];
          if (typeof value !== "string") {
            throw new PolishedError(61);
          }
          var transitionsString = properties[0].map(function(property) {
            return property + " " + value;
          }).join(", ");
          return {
            transition: transitionsString
          };
        } else {
          return {
            transition: properties.join(", ")
          };
        }
      }
      exports.adjustHue = curriedAdjustHue;
      exports.animation = animation;
      exports.backgroundImages = backgroundImages;
      exports.backgrounds = backgrounds;
      exports.between = between;
      exports.border = border;
      exports.borderColor = borderColor;
      exports.borderRadius = borderRadius;
      exports.borderStyle = borderStyle;
      exports.borderWidth = borderWidth;
      exports.buttons = buttons;
      exports.clearFix = clearFix;
      exports.complement = complement;
      exports.cover = cover;
      exports.cssVar = cssVar;
      exports.darken = curriedDarken;
      exports.desaturate = curriedDesaturate;
      exports.directionalProperty = directionalProperty;
      exports.easeIn = easeIn;
      exports.easeInOut = easeInOut;
      exports.easeOut = easeOut;
      exports.ellipsis = ellipsis;
      exports.em = em;
      exports.fluidRange = fluidRange;
      exports.fontFace = fontFace;
      exports.getContrast = getContrast;
      exports.getLuminance = getLuminance;
      exports.getValueAndUnit = getValueAndUnit;
      exports.grayscale = grayscale;
      exports.hiDPI = hiDPI;
      exports.hideText = hideText;
      exports.hideVisually = hideVisually;
      exports.hsl = hsl;
      exports.hslToColorString = hslToColorString;
      exports.hsla = hsla;
      exports.important = important;
      exports.invert = invert;
      exports.lighten = curriedLighten;
      exports.linearGradient = linearGradient;
      exports.margin = margin;
      exports.math = math;
      exports.meetsContrastGuidelines = meetsContrastGuidelines;
      exports.mix = curriedMix;
      exports.modularScale = modularScale;
      exports.normalize = normalize;
      exports.opacify = curriedOpacify;
      exports.padding = padding;
      exports.parseToHsl = parseToHsl;
      exports.parseToRgb = parseToRgb;
      exports.position = position;
      exports.radialGradient = radialGradient;
      exports.readableColor = readableColor;
      exports.rem = rem;
      exports.remToPx = remToPx;
      exports.retinaImage = retinaImage;
      exports.rgb = rgb;
      exports.rgbToColorString = rgbToColorString;
      exports.rgba = rgba;
      exports.saturate = curriedSaturate;
      exports.setHue = curriedSetHue;
      exports.setLightness = curriedSetLightness;
      exports.setSaturation = curriedSetSaturation;
      exports.shade = curriedShade;
      exports.size = size;
      exports.stripUnit = stripUnit;
      exports.textInputs = textInputs;
      exports.timingFunctions = timingFunctions;
      exports.tint = curriedTint;
      exports.toColorString = toColorString;
      exports.transitions = transitions;
      exports.transparentize = curriedTransparentize;
      exports.triangle = triangle;
      exports.wordWrap = wordWrap;
    }
  });

  // src/components/CoreComponents.bs.js
  var require_CoreComponents_bs = __commonJS({
    "src/components/CoreComponents.bs.js"(exports) {
      "use strict";
      var React = require_react();
      var Emotion = require_Emotion_bs();
      var Polished = require_polished_cjs();
      var styles = Emotion.css(void 0, {
        hd: Emotion.display("flex"),
        tl: {
          hd: Emotion.color(Emotion.Css.Color.white),
          tl: 0
        }
      });
      function make(props) {
        var stylesObject = {
          className: styles
        };
        var newProps = Object.assign(stylesObject, props);
        var chil = props.children;
        return React.createElement("div", newProps, [chil !== void 0 ? chil : null]);
      }
      var Root = {
        styles,
        make
      };
      var styles$1 = Emotion.css(void 0, {
        hd: Emotion.display("flex"),
        tl: {
          hd: Emotion.textAlign(Emotion.center),
          tl: {
            hd: Emotion.justifyContent(Emotion.center),
            tl: {
              hd: Emotion.alignItems(Emotion.center),
              tl: {
                hd: Emotion.paddingTop(Emotion.rem(2)),
                tl: {
                  hd: Emotion.fontSize(Emotion.rem(2)),
                  tl: {
                    hd: Emotion.lineHeight(Emotion.rem(1)),
                    tl: 0
                  }
                }
              }
            }
          }
        }
      });
      function make$1(props) {
        var stylesObject = {
          className: styles$1
        };
        var newProps = Object.assign(stylesObject, props);
        var chil = props.children;
        return React.createElement("div", newProps, [chil !== void 0 ? chil : null]);
      }
      var AppBar = {
        styles: styles$1,
        make: make$1
      };
      var styles$2 = Emotion.css(void 0, {
        hd: Emotion.width(Emotion.pct(100)),
        tl: 0
      });
      function make$2(props) {
        var stylesObject = {
          className: styles$2
        };
        var newProps = Object.assign(stylesObject, props);
        var chil = props.children;
        return React.createElement("div", newProps, [chil !== void 0 ? chil : null]);
      }
      var Content = {
        styles: styles$2,
        make: make$2
      };
      function CoreComponents$Icon(Props) {
        var name = Props.name;
        return React.createElement("i", {
          className: "fas fa-" + name
        });
      }
      var Icon = {
        make: CoreComponents$Icon
      };
      function CoreComponents$Button(Props) {
        var label = Props.label;
        var background = Props.background;
        var onClick = Props.onClick;
        var disabledOpt = Props.disabled;
        var children = Props.children;
        var disabled = disabledOpt !== void 0 ? disabledOpt : false;
        var shadow = Polished.opacify(-0.4, background);
        var pseudoOutline = "0 0 0 4px " + shadow;
        var className = Emotion.css(void 0, {
          hd: Emotion.fontSize(Emotion.rem(0.9)),
          tl: {
            hd: Emotion.padding2(Emotion.rem(0.5), Emotion.rem(0.8)),
            tl: {
              hd: Emotion.p("background-color", background),
              tl: {
                hd: Emotion.width(Emotion.rem(3)),
                tl: {
                  hd: Emotion.height(Emotion.rem(3)),
                  tl: {
                    hd: Emotion.color(Emotion.Css.Color.white),
                    tl: {
                      hd: Emotion.borderRadius(Emotion.pct(50)),
                      tl: {
                        hd: Emotion.margin2("zero", Emotion.rem(0.5)),
                        tl: {
                          hd: Emotion.borderWidth("zero"),
                          tl: {
                            hd: Emotion.userSelect(Emotion.none),
                            tl: {
                              hd: Emotion.outline(Emotion.rem(0), Emotion.none, Emotion.Css.Color.white),
                              tl: {
                                hd: Emotion.fontWeight(700),
                                tl: {
                                  hd: Emotion.cursor("pointer"),
                                  tl: {
                                    hd: Emotion.p("transition", "all .15s ease-in"),
                                    tl: {
                                      hd: Emotion.select(":focus", {
                                        hd: Emotion.p("box-shadow", pseudoOutline),
                                        tl: {
                                          hd: Emotion.opacity(0.9),
                                          tl: 0
                                        }
                                      }),
                                      tl: 0
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        });
        return React.createElement("button", {
          "aria-label": label,
          className,
          disabled,
          onClick
        }, children);
      }
      var Button = {
        make: CoreComponents$Button
      };
      function CoreComponents$ToggleButton(Props) {
        var isToggled = Props.isToggled;
        var onClick = Props.onClick;
        var label = Props.label;
        var disabledOpt = Props.disabled;
        var disabled = disabledOpt !== void 0 ? disabledOpt : false;
        var background = isToggled ? "#666" : "#7A8288";
        var name = isToggled ? "pause" : "play";
        return React.createElement(CoreComponents$Button, {
          label,
          background,
          onClick,
          disabled,
          children: React.createElement(CoreComponents$Icon, {
            name
          })
        });
      }
      var ToggleButton = {
        make: CoreComponents$ToggleButton
      };
      exports.Root = Root;
      exports.AppBar = AppBar;
      exports.Content = Content;
      exports.Icon = Icon;
      exports.Button = Button;
      exports.ToggleButton = ToggleButton;
    }
  });

  // src/components/Controls.bs.js
  var require_Controls_bs = __commonJS({
    "src/components/Controls.bs.js"(exports) {
      "use strict";
      var React = require_react();
      var Emotion = require_Emotion_bs();
      var CoreComponents$ReasonGameOfLife = require_CoreComponents_bs();
      var styles = Emotion.css(void 0, {
        hd: Emotion.display("flex"),
        tl: {
          hd: Emotion.justifyContent(Emotion.center),
          tl: {
            hd: Emotion.alignItems(Emotion.center),
            tl: {
              hd: Emotion.padding2(Emotion.rem(2), "zero"),
              tl: 0
            }
          }
        }
      });
      function make(props) {
        var stylesObject = {
          className: styles
        };
        var newProps = Object.assign(stylesObject, props);
        var chil = props.children;
        return React.createElement("div", newProps, [chil !== void 0 ? chil : null]);
      }
      var Wrapper = {
        styles,
        make
      };
      function Controls(Props) {
        var isPlaying = Props.isPlaying;
        var onReset = Props.onReset;
        var onRandom = Props.onRandom;
        var onTick = Props.onTick;
        var onToggleAutoplay = Props.onToggleAutoplay;
        return React.createElement(make, {
          children: React.createElement("div", {
            role: "group"
          }, React.createElement(CoreComponents$ReasonGameOfLife.Button.make, {
            label: "Reset grid",
            background: "#ee5f5b",
            onClick: onReset,
            children: React.createElement(CoreComponents$ReasonGameOfLife.Icon.make, {
              name: "undo"
            })
          }), React.createElement(CoreComponents$ReasonGameOfLife.Button.make, {
            label: "Random grid",
            background: "#62c462",
            onClick: onRandom,
            children: React.createElement(CoreComponents$ReasonGameOfLife.Icon.make, {
              name: "random"
            })
          }), React.createElement(CoreComponents$ReasonGameOfLife.Button.make, {
            label: "Next state",
            background: "#7A8288",
            onClick: onTick,
            disabled: isPlaying,
            children: React.createElement(CoreComponents$ReasonGameOfLife.Icon.make, {
              name: "forward"
            })
          }), React.createElement(CoreComponents$ReasonGameOfLife.ToggleButton.make, {
            isToggled: isPlaying,
            onClick: onToggleAutoplay,
            label: "Toggle autpplay"
          }))
        });
      }
      var make$1 = Controls;
      exports.Wrapper = Wrapper;
      exports.make = make$1;
    }
  });

  // src/components/App.bs.js
  var require_App_bs = __commonJS({
    "src/components/App.bs.js"(exports) {
      "use strict";
      var Curry = require_curry();
      var React = require_react();
      var Grid$ReasonGameOfLife = require_Grid_bs();
      var Model$ReasonGameOfLife = require_Model_bs();
      var Controls$ReasonGameOfLife = require_Controls_bs();
      var CoreComponents$ReasonGameOfLife = require_CoreComponents_bs();
      function App(Props) {
        var match = React.useReducer(Model$ReasonGameOfLife.Reducers.root, Model$ReasonGameOfLife.initialState);
        var dispatch = match[1];
        var state = match[0];
        var handleToggleTile = React.useCallback(function(y) {
          return function(x) {
            return Curry._1(dispatch, {
              _0: [
                y,
                x
              ]
            });
          };
        }, []);
        var handleReset = React.useCallback(function(param) {
          return Curry._1(dispatch, 1);
        }, []);
        var handleRandom = React.useCallback(function(param) {
          return Curry._1(dispatch, 0);
        }, []);
        var handleTick = React.useCallback(function(param) {
          return Curry._1(dispatch, 4);
        }, []);
        var handleToggleAutoPlay = React.useCallback(function(param) {
          var play = function(param2) {
            state.animationFrameId.contents = requestAnimationFrame(play);
            return Curry._1(dispatch, 4);
          };
          if (state.isPlaying) {
            cancelAnimationFrame(state.animationFrameId.contents);
            return Curry._1(dispatch, 3);
          } else {
            play(void 0);
            return Curry._1(dispatch, 2);
          }
        }, [
          state.animationFrameId,
          state.isPlaying
        ]);
        var label = state.isPlaying ? "avg update rate: " + (String(state.frameRate) + " fps") : "";
        return React.createElement(CoreComponents$ReasonGameOfLife.Root.make, {
          children: React.createElement(CoreComponents$ReasonGameOfLife.Content.make, {
            children: null
          }, React.createElement(CoreComponents$ReasonGameOfLife.AppBar.make, {
            children: "Conway's Game of Life"
          }), React.createElement(Controls$ReasonGameOfLife.make, {
            isPlaying: state.isPlaying,
            onReset: handleReset,
            onRandom: handleRandom,
            onTick: handleTick,
            onToggleAutoplay: handleToggleAutoPlay
          }), React.createElement(Grid$ReasonGameOfLife.make, {
            data: state.grid,
            onToggle: handleToggleTile
          }), React.createElement("div", void 0, label))
        });
      }
      var R;
      var make = App;
      exports.R = R;
      exports.make = make;
    }
  });

  // src/index.css
  var require_ = __commonJS({
    "src/index.css"(exports, module) {
      module.exports = {};
    }
  });

  // src/Index.bs.js
  var require_Index_bs = __commonJS({
    "src/Index.bs.js"(exports) {
      "use strict";
      var React = require_react();
      var ReactDom = require_react_dom();
      var ServiceWorker = (init_serviceWorker(), serviceWorker_exports);
      var App$ReasonGameOfLife = require_App_bs();
      require_();
      function register_service_worker(prim) {
        ServiceWorker.register();
      }
      var randomSeed = Date.now() | 0;
      var fallback = React.createElement("div", void 0, "...");
      var app = React.createElement(React.Suspense, {
        children: React.createElement(App$ReasonGameOfLife.make, {
          key: "app"
        }),
        fallback
      });
      var root = document.querySelector("#root");
      if (!(root == null)) {
        ReactDom.render(app, root);
      }
      ServiceWorker.register();
      exports.register_service_worker = register_service_worker;
      exports.randomSeed = randomSeed;
      exports.fallback = fallback;
      exports.app = app;
    }
  });

  // src/index.js
  var src_exports = {};
  __reExport(src_exports, __toModule(require_Index_bs()));
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=bundle.js.map
